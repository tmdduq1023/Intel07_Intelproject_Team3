
servostepmotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007614  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  080077b4  080077b4  000087b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a4c  08007a4c  00009070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007a4c  08007a4c  00008a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a54  08007a54  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a54  08007a54  00008a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a58  08007a58  00008a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08007a5c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000445c  20000070  08007acc  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200044cc  08007acc  000094cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b3e  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000306c  00000000  00000000  0001dbde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  00020c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e1f  00000000  00000000  00021e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191b8  00000000  00000000  00022ca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001421b  00000000  00000000  0003be5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099096  00000000  00000000  0005007a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9110  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000560c  00000000  00000000  000e9154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000ee760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800779c 	.word	0x0800779c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800779c 	.word	0x0800779c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	2000008c 	.word	0x2000008c
 80005dc:	2000012c 	.word	0x2000012c

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b096      	sub	sp, #88	@ 0x58
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e6:	f000 ffdb 	bl	80015a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f000 f86f 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ee:	f000 f9d7 	bl	80009a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005f2:	f000 f99f 	bl	8000934 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005f6:	f000 f973 	bl	80008e0 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80005fa:	f000 f8d1 	bl	80007a0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80005fe:	f000 f945 	bl	800088c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_TIM_Base_Start_IT(&htim4) != HAL_OK) //인터럽트 시작
 8000602:	4829      	ldr	r0, [pc, #164]	@ (80006a8 <main+0xc8>)
 8000604:	f002 fbaa 	bl	8002d5c <HAL_TIM_Base_Start_IT>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <main+0x32>
  	Error_Handler();
 800060e:	f000 fc6b 	bl	8000ee8 <Error_Handler>

  if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) != HAL_OK)
 8000612:	2100      	movs	r1, #0
 8000614:	4824      	ldr	r0, [pc, #144]	@ (80006a8 <main+0xc8>)
 8000616:	f002 fc5d 	bl	8002ed4 <HAL_TIM_PWM_Start>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <main+0x44>
	Error_Handler();
 8000620:	f000 fc62 	bl	8000ee8 <Error_Handler>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_buf, RX_BUF_LEN);//uart활성화
 8000624:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000628:	4920      	ldr	r1, [pc, #128]	@ (80006ac <main+0xcc>)
 800062a:	4821      	ldr	r0, [pc, #132]	@ (80006b0 <main+0xd0>)
 800062c:	f003 fbd3 	bl	8003dd6 <HAL_UARTEx_ReceiveToIdle_DMA>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of motorTask */
  osThreadDef(motorTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000630:	4b20      	ldr	r3, [pc, #128]	@ (80006b4 <main+0xd4>)
 8000632:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000636:	461d      	mov	r5, r3
 8000638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000640:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorTaskHandle = osThreadCreate(osThread(motorTask), NULL);
 8000644:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f004 fd41 	bl	80050d2 <osThreadCreate>
 8000650:	4603      	mov	r3, r0
 8000652:	4a19      	ldr	r2, [pc, #100]	@ (80006b8 <main+0xd8>)
 8000654:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 8000656:	4b19      	ldr	r3, [pc, #100]	@ (80006bc <main+0xdc>)
 8000658:	f107 0420 	add.w	r4, r7, #32
 800065c:	461d      	mov	r5, r3
 800065e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000662:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000666:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f004 fd2e 	bl	80050d2 <osThreadCreate>
 8000676:	4603      	mov	r3, r0
 8000678:	4a11      	ldr	r2, [pc, #68]	@ (80006c0 <main+0xe0>)
 800067a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 800067c:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <main+0xe4>)
 800067e:	1d3c      	adds	r4, r7, #4
 8000680:	461d      	mov	r5, r3
 8000682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000686:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800068a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f004 fd1d 	bl	80050d2 <osThreadCreate>
 8000698:	4603      	mov	r3, r0
 800069a:	4a0b      	ldr	r2, [pc, #44]	@ (80006c8 <main+0xe8>)
 800069c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800069e:	f004 fd11 	bl	80050c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a2:	bf00      	nop
 80006a4:	e7fd      	b.n	80006a2 <main+0xc2>
 80006a6:	bf00      	nop
 80006a8:	2000032c 	.word	0x2000032c
 80006ac:	200004dc 	.word	0x200004dc
 80006b0:	20000374 	.word	0x20000374
 80006b4:	080077c0 	.word	0x080077c0
 80006b8:	200004c4 	.word	0x200004c4
 80006bc:	080077e8 	.word	0x080077e8
 80006c0:	200004c8 	.word	0x200004c8
 80006c4:	08007810 	.word	0x08007810
 80006c8:	200004cc 	.word	0x200004cc

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b094      	sub	sp, #80	@ 0x50
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	2230      	movs	r2, #48	@ 0x30
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f006 f909 	bl	80068f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	4b28      	ldr	r3, [pc, #160]	@ (8000798 <SystemClock_Config+0xcc>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f8:	4a27      	ldr	r2, [pc, #156]	@ (8000798 <SystemClock_Config+0xcc>)
 80006fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000700:	4b25      	ldr	r3, [pc, #148]	@ (8000798 <SystemClock_Config+0xcc>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000704:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	4b22      	ldr	r3, [pc, #136]	@ (800079c <SystemClock_Config+0xd0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a21      	ldr	r2, [pc, #132]	@ (800079c <SystemClock_Config+0xd0>)
 8000716:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b1f      	ldr	r3, [pc, #124]	@ (800079c <SystemClock_Config+0xd0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000728:	2302      	movs	r3, #2
 800072a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000730:	2310      	movs	r3, #16
 8000732:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000734:	2302      	movs	r3, #2
 8000736:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800073c:	2310      	movs	r3, #16
 800073e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000740:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000744:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000746:	2304      	movs	r3, #4
 8000748:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800074a:	2304      	movs	r3, #4
 800074c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074e:	f107 0320 	add.w	r3, r7, #32
 8000752:	4618      	mov	r0, r3
 8000754:	f001 fde8 	bl	8002328 <HAL_RCC_OscConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800075e:	f000 fbc3 	bl	8000ee8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	230f      	movs	r3, #15
 8000764:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	2302      	movs	r3, #2
 8000768:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800076e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000772:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2102      	movs	r1, #2
 800077e:	4618      	mov	r0, r3
 8000780:	f002 f84a 	bl	8002818 <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800078a:	f000 fbad 	bl	8000ee8 <Error_Handler>
  }
}
 800078e:	bf00      	nop
 8000790:	3750      	adds	r7, #80	@ 0x50
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08e      	sub	sp, #56	@ 0x38
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b4:	f107 0320 	add.w	r3, r7, #32
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
 80007cc:	615a      	str	r2, [r3, #20]
 80007ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007d0:	4b2c      	ldr	r3, [pc, #176]	@ (8000884 <MX_TIM4_Init+0xe4>)
 80007d2:	4a2d      	ldr	r2, [pc, #180]	@ (8000888 <MX_TIM4_Init+0xe8>)
 80007d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 80007d6:	4b2b      	ldr	r3, [pc, #172]	@ (8000884 <MX_TIM4_Init+0xe4>)
 80007d8:	2253      	movs	r2, #83	@ 0x53
 80007da:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007dc:	4b29      	ldr	r3, [pc, #164]	@ (8000884 <MX_TIM4_Init+0xe4>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 80007e2:	4b28      	ldr	r3, [pc, #160]	@ (8000884 <MX_TIM4_Init+0xe4>)
 80007e4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80007e8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ea:	4b26      	ldr	r3, [pc, #152]	@ (8000884 <MX_TIM4_Init+0xe4>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f0:	4b24      	ldr	r3, [pc, #144]	@ (8000884 <MX_TIM4_Init+0xe4>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80007f6:	4823      	ldr	r0, [pc, #140]	@ (8000884 <MX_TIM4_Init+0xe4>)
 80007f8:	f002 fa60 	bl	8002cbc <HAL_TIM_Base_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000802:	f000 fb71 	bl	8000ee8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000806:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800080a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800080c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000810:	4619      	mov	r1, r3
 8000812:	481c      	ldr	r0, [pc, #112]	@ (8000884 <MX_TIM4_Init+0xe4>)
 8000814:	f002 fdc0 	bl	8003398 <HAL_TIM_ConfigClockSource>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800081e:	f000 fb63 	bl	8000ee8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000822:	4818      	ldr	r0, [pc, #96]	@ (8000884 <MX_TIM4_Init+0xe4>)
 8000824:	f002 fafc 	bl	8002e20 <HAL_TIM_PWM_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800082e:	f000 fb5b 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000832:	2300      	movs	r3, #0
 8000834:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800083a:	f107 0320 	add.w	r3, r7, #32
 800083e:	4619      	mov	r1, r3
 8000840:	4810      	ldr	r0, [pc, #64]	@ (8000884 <MX_TIM4_Init+0xe4>)
 8000842:	f003 f96b 	bl	8003b1c <HAL_TIMEx_MasterConfigSynchronization>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800084c:	f000 fb4c 	bl	8000ee8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000850:	2360      	movs	r3, #96	@ 0x60
 8000852:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2200      	movs	r2, #0
 8000864:	4619      	mov	r1, r3
 8000866:	4807      	ldr	r0, [pc, #28]	@ (8000884 <MX_TIM4_Init+0xe4>)
 8000868:	f002 fcd4 	bl	8003214 <HAL_TIM_PWM_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000872:	f000 fb39 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000876:	4803      	ldr	r0, [pc, #12]	@ (8000884 <MX_TIM4_Init+0xe4>)
 8000878:	f000 fb90 	bl	8000f9c <HAL_TIM_MspPostInit>

}
 800087c:	bf00      	nop
 800087e:	3738      	adds	r7, #56	@ 0x38
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	2000032c 	.word	0x2000032c
 8000888:	40000800 	.word	0x40000800

0800088c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000890:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <MX_USART1_UART_Init+0x4c>)
 8000892:	4a12      	ldr	r2, [pc, #72]	@ (80008dc <MX_USART1_UART_Init+0x50>)
 8000894:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000896:	4b10      	ldr	r3, [pc, #64]	@ (80008d8 <MX_USART1_UART_Init+0x4c>)
 8000898:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800089c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800089e:	4b0e      	ldr	r3, [pc, #56]	@ (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	@ (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008b0:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008b2:	220c      	movs	r2, #12
 80008b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b08      	ldr	r3, [pc, #32]	@ (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008bc:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	@ (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008c4:	f003 f9ac 	bl	8003c20 <HAL_UART_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008ce:	f000 fb0b 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000374 	.word	0x20000374
 80008dc:	40011000 	.word	0x40011000

080008e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e4:	4b11      	ldr	r3, [pc, #68]	@ (800092c <MX_USART2_UART_Init+0x4c>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	@ (8000930 <MX_USART2_UART_Init+0x50>)
 80008e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ea:	4b10      	ldr	r3, [pc, #64]	@ (800092c <MX_USART2_UART_Init+0x4c>)
 80008ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <MX_USART2_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <MX_USART2_UART_Init+0x4c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	@ (800092c <MX_USART2_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000904:	4b09      	ldr	r3, [pc, #36]	@ (800092c <MX_USART2_UART_Init+0x4c>)
 8000906:	220c      	movs	r2, #12
 8000908:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090a:	4b08      	ldr	r3, [pc, #32]	@ (800092c <MX_USART2_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000910:	4b06      	ldr	r3, [pc, #24]	@ (800092c <MX_USART2_UART_Init+0x4c>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000916:	4805      	ldr	r0, [pc, #20]	@ (800092c <MX_USART2_UART_Init+0x4c>)
 8000918:	f003 f982 	bl	8003c20 <HAL_UART_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000922:	f000 fae1 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200003bc 	.word	0x200003bc
 8000930:	40004400 	.word	0x40004400

08000934 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b17      	ldr	r3, [pc, #92]	@ (800099c <MX_DMA_Init+0x68>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a16      	ldr	r2, [pc, #88]	@ (800099c <MX_DMA_Init+0x68>)
 8000944:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b14      	ldr	r3, [pc, #80]	@ (800099c <MX_DMA_Init+0x68>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	4b10      	ldr	r3, [pc, #64]	@ (800099c <MX_DMA_Init+0x68>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a0f      	ldr	r2, [pc, #60]	@ (800099c <MX_DMA_Init+0x68>)
 8000960:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b0d      	ldr	r3, [pc, #52]	@ (800099c <MX_DMA_Init+0x68>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2105      	movs	r1, #5
 8000976:	2011      	movs	r0, #17
 8000978:	f000 ff0c 	bl	8001794 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800097c:	2011      	movs	r0, #17
 800097e:	f000 ff25 	bl	80017cc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2105      	movs	r1, #5
 8000986:	203a      	movs	r0, #58	@ 0x3a
 8000988:	f000 ff04 	bl	8001794 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800098c:	203a      	movs	r0, #58	@ 0x3a
 800098e:	f000 ff1d 	bl	80017cc <HAL_NVIC_EnableIRQ>

}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	@ 0x28
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	4b37      	ldr	r3, [pc, #220]	@ (8000a98 <MX_GPIO_Init+0xf8>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	4a36      	ldr	r2, [pc, #216]	@ (8000a98 <MX_GPIO_Init+0xf8>)
 80009c0:	f043 0304 	orr.w	r3, r3, #4
 80009c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c6:	4b34      	ldr	r3, [pc, #208]	@ (8000a98 <MX_GPIO_Init+0xf8>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b30      	ldr	r3, [pc, #192]	@ (8000a98 <MX_GPIO_Init+0xf8>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	4a2f      	ldr	r2, [pc, #188]	@ (8000a98 <MX_GPIO_Init+0xf8>)
 80009dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000a98 <MX_GPIO_Init+0xf8>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	4b29      	ldr	r3, [pc, #164]	@ (8000a98 <MX_GPIO_Init+0xf8>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a28      	ldr	r2, [pc, #160]	@ (8000a98 <MX_GPIO_Init+0xf8>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b26      	ldr	r3, [pc, #152]	@ (8000a98 <MX_GPIO_Init+0xf8>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4b22      	ldr	r3, [pc, #136]	@ (8000a98 <MX_GPIO_Init+0xf8>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	4a21      	ldr	r2, [pc, #132]	@ (8000a98 <MX_GPIO_Init+0xf8>)
 8000a14:	f043 0302 	orr.w	r3, r3, #2
 8000a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a98 <MX_GPIO_Init+0xf8>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	f003 0302 	and.w	r3, r3, #2
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	210f      	movs	r1, #15
 8000a2a:	481c      	ldr	r0, [pc, #112]	@ (8000a9c <MX_GPIO_Init+0xfc>)
 8000a2c:	f001 fc62 	bl	80022f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2120      	movs	r1, #32
 8000a34:	481a      	ldr	r0, [pc, #104]	@ (8000aa0 <MX_GPIO_Init+0x100>)
 8000a36:	f001 fc5d 	bl	80022f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a40:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4812      	ldr	r0, [pc, #72]	@ (8000a9c <MX_GPIO_Init+0xfc>)
 8000a52:	f001 facb 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000a56:	230f      	movs	r3, #15
 8000a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	480b      	ldr	r0, [pc, #44]	@ (8000a9c <MX_GPIO_Init+0xfc>)
 8000a6e:	f001 fabd 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a72:	2320      	movs	r3, #32
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	4805      	ldr	r0, [pc, #20]	@ (8000aa0 <MX_GPIO_Init+0x100>)
 8000a8a:	f001 faaf 	bl	8001fec <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a8e:	bf00      	nop
 8000a90:	3728      	adds	r7, #40	@ 0x28
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020800 	.word	0x40020800
 8000aa0:	40020000 	.word	0x40020000

08000aa4 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) //uart인터럽트
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	460b      	mov	r3, r1
 8000aae:	807b      	strh	r3, [r7, #2]
  if(huart->Instance==USART1){
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae0 <HAL_UARTEx_RxEventCallback+0x3c>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d10e      	bne.n	8000ad8 <HAL_UARTEx_RxEventCallback+0x34>
    // rx_buf[0..Size-1] 가 이번 프레임
    // Circular 유지하려면: __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT); // 선택
	  uartFlag = 1;
 8000aba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae4 <HAL_UARTEx_RxEventCallback+0x40>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, rx_buf, Size, 100);
 8000ac0:	887a      	ldrh	r2, [r7, #2]
 8000ac2:	2364      	movs	r3, #100	@ 0x64
 8000ac4:	4908      	ldr	r1, [pc, #32]	@ (8000ae8 <HAL_UARTEx_RxEventCallback+0x44>)
 8000ac6:	4809      	ldr	r0, [pc, #36]	@ (8000aec <HAL_UARTEx_RxEventCallback+0x48>)
 8000ac8:	f003 f8fa 	bl	8003cc0 <HAL_UART_Transmit>

	  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_buf, RX_BUF_LEN);
 8000acc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ad0:	4905      	ldr	r1, [pc, #20]	@ (8000ae8 <HAL_UARTEx_RxEventCallback+0x44>)
 8000ad2:	4807      	ldr	r0, [pc, #28]	@ (8000af0 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000ad4:	f003 f97f 	bl	8003dd6 <HAL_UARTEx_ReceiveToIdle_DMA>
  }
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40011000 	.word	0x40011000
 8000ae4:	200004d8 	.word	0x200004d8
 8000ae8:	200004dc 	.word	0x200004dc
 8000aec:	200003bc 	.word	0x200003bc
 8000af0:	20000374 	.word	0x20000374

08000af4 <stepMotor>:

void stepMotor(int step) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
    switch (step) {
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2b07      	cmp	r3, #7
 8000b00:	f200 80bc 	bhi.w	8000c7c <stepMotor+0x188>
 8000b04:	a201      	add	r2, pc, #4	@ (adr r2, 8000b0c <stepMotor+0x18>)
 8000b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b0a:	bf00      	nop
 8000b0c:	08000b2d 	.word	0x08000b2d
 8000b10:	08000b57 	.word	0x08000b57
 8000b14:	08000b81 	.word	0x08000b81
 8000b18:	08000bab 	.word	0x08000bab
 8000b1c:	08000bd5 	.word	0x08000bd5
 8000b20:	08000bff 	.word	0x08000bff
 8000b24:	08000c29 	.word	0x08000c29
 8000b28:	08000c53 	.word	0x08000c53
        case 0:
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2101      	movs	r1, #1
 8000b30:	4854      	ldr	r0, [pc, #336]	@ (8000c84 <stepMotor+0x190>)
 8000b32:	f001 fbdf 	bl	80022f4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2102      	movs	r1, #2
 8000b3a:	4852      	ldr	r0, [pc, #328]	@ (8000c84 <stepMotor+0x190>)
 8000b3c:	f001 fbda 	bl	80022f4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2104      	movs	r1, #4
 8000b44:	484f      	ldr	r0, [pc, #316]	@ (8000c84 <stepMotor+0x190>)
 8000b46:	f001 fbd5 	bl	80022f4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2108      	movs	r1, #8
 8000b4e:	484d      	ldr	r0, [pc, #308]	@ (8000c84 <stepMotor+0x190>)
 8000b50:	f001 fbd0 	bl	80022f4 <HAL_GPIO_WritePin>
            break;
 8000b54:	e092      	b.n	8000c7c <stepMotor+0x188>
        case 1:
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000b56:	2201      	movs	r2, #1
 8000b58:	2101      	movs	r1, #1
 8000b5a:	484a      	ldr	r0, [pc, #296]	@ (8000c84 <stepMotor+0x190>)
 8000b5c:	f001 fbca 	bl	80022f4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	2102      	movs	r1, #2
 8000b64:	4847      	ldr	r0, [pc, #284]	@ (8000c84 <stepMotor+0x190>)
 8000b66:	f001 fbc5 	bl	80022f4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2104      	movs	r1, #4
 8000b6e:	4845      	ldr	r0, [pc, #276]	@ (8000c84 <stepMotor+0x190>)
 8000b70:	f001 fbc0 	bl	80022f4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2108      	movs	r1, #8
 8000b78:	4842      	ldr	r0, [pc, #264]	@ (8000c84 <stepMotor+0x190>)
 8000b7a:	f001 fbbb 	bl	80022f4 <HAL_GPIO_WritePin>
            break;
 8000b7e:	e07d      	b.n	8000c7c <stepMotor+0x188>
        case 2:
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2101      	movs	r1, #1
 8000b84:	483f      	ldr	r0, [pc, #252]	@ (8000c84 <stepMotor+0x190>)
 8000b86:	f001 fbb5 	bl	80022f4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	483d      	ldr	r0, [pc, #244]	@ (8000c84 <stepMotor+0x190>)
 8000b90:	f001 fbb0 	bl	80022f4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2104      	movs	r1, #4
 8000b98:	483a      	ldr	r0, [pc, #232]	@ (8000c84 <stepMotor+0x190>)
 8000b9a:	f001 fbab 	bl	80022f4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2108      	movs	r1, #8
 8000ba2:	4838      	ldr	r0, [pc, #224]	@ (8000c84 <stepMotor+0x190>)
 8000ba4:	f001 fba6 	bl	80022f4 <HAL_GPIO_WritePin>
            break;
 8000ba8:	e068      	b.n	8000c7c <stepMotor+0x188>
        case 3:
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2101      	movs	r1, #1
 8000bae:	4835      	ldr	r0, [pc, #212]	@ (8000c84 <stepMotor+0x190>)
 8000bb0:	f001 fba0 	bl	80022f4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2102      	movs	r1, #2
 8000bb8:	4832      	ldr	r0, [pc, #200]	@ (8000c84 <stepMotor+0x190>)
 8000bba:	f001 fb9b 	bl	80022f4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	2104      	movs	r1, #4
 8000bc2:	4830      	ldr	r0, [pc, #192]	@ (8000c84 <stepMotor+0x190>)
 8000bc4:	f001 fb96 	bl	80022f4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2108      	movs	r1, #8
 8000bcc:	482d      	ldr	r0, [pc, #180]	@ (8000c84 <stepMotor+0x190>)
 8000bce:	f001 fb91 	bl	80022f4 <HAL_GPIO_WritePin>
            break;
 8000bd2:	e053      	b.n	8000c7c <stepMotor+0x188>
        case 4:
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	482a      	ldr	r0, [pc, #168]	@ (8000c84 <stepMotor+0x190>)
 8000bda:	f001 fb8b 	bl	80022f4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2102      	movs	r1, #2
 8000be2:	4828      	ldr	r0, [pc, #160]	@ (8000c84 <stepMotor+0x190>)
 8000be4:	f001 fb86 	bl	80022f4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	2104      	movs	r1, #4
 8000bec:	4825      	ldr	r0, [pc, #148]	@ (8000c84 <stepMotor+0x190>)
 8000bee:	f001 fb81 	bl	80022f4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2108      	movs	r1, #8
 8000bf6:	4823      	ldr	r0, [pc, #140]	@ (8000c84 <stepMotor+0x190>)
 8000bf8:	f001 fb7c 	bl	80022f4 <HAL_GPIO_WritePin>
            break;
 8000bfc:	e03e      	b.n	8000c7c <stepMotor+0x188>
        case 5:
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2101      	movs	r1, #1
 8000c02:	4820      	ldr	r0, [pc, #128]	@ (8000c84 <stepMotor+0x190>)
 8000c04:	f001 fb76 	bl	80022f4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	481d      	ldr	r0, [pc, #116]	@ (8000c84 <stepMotor+0x190>)
 8000c0e:	f001 fb71 	bl	80022f4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000c12:	2201      	movs	r2, #1
 8000c14:	2104      	movs	r1, #4
 8000c16:	481b      	ldr	r0, [pc, #108]	@ (8000c84 <stepMotor+0x190>)
 8000c18:	f001 fb6c 	bl	80022f4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2108      	movs	r1, #8
 8000c20:	4818      	ldr	r0, [pc, #96]	@ (8000c84 <stepMotor+0x190>)
 8000c22:	f001 fb67 	bl	80022f4 <HAL_GPIO_WritePin>
            break;
 8000c26:	e029      	b.n	8000c7c <stepMotor+0x188>
        case 6:
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	4815      	ldr	r0, [pc, #84]	@ (8000c84 <stepMotor+0x190>)
 8000c2e:	f001 fb61 	bl	80022f4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2102      	movs	r1, #2
 8000c36:	4813      	ldr	r0, [pc, #76]	@ (8000c84 <stepMotor+0x190>)
 8000c38:	f001 fb5c 	bl	80022f4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2104      	movs	r1, #4
 8000c40:	4810      	ldr	r0, [pc, #64]	@ (8000c84 <stepMotor+0x190>)
 8000c42:	f001 fb57 	bl	80022f4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000c46:	2201      	movs	r2, #1
 8000c48:	2108      	movs	r1, #8
 8000c4a:	480e      	ldr	r0, [pc, #56]	@ (8000c84 <stepMotor+0x190>)
 8000c4c:	f001 fb52 	bl	80022f4 <HAL_GPIO_WritePin>
            break;
 8000c50:	e014      	b.n	8000c7c <stepMotor+0x188>
        case 7:
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000c52:	2201      	movs	r2, #1
 8000c54:	2101      	movs	r1, #1
 8000c56:	480b      	ldr	r0, [pc, #44]	@ (8000c84 <stepMotor+0x190>)
 8000c58:	f001 fb4c 	bl	80022f4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2102      	movs	r1, #2
 8000c60:	4808      	ldr	r0, [pc, #32]	@ (8000c84 <stepMotor+0x190>)
 8000c62:	f001 fb47 	bl	80022f4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2104      	movs	r1, #4
 8000c6a:	4806      	ldr	r0, [pc, #24]	@ (8000c84 <stepMotor+0x190>)
 8000c6c:	f001 fb42 	bl	80022f4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000c70:	2201      	movs	r2, #1
 8000c72:	2108      	movs	r1, #8
 8000c74:	4803      	ldr	r0, [pc, #12]	@ (8000c84 <stepMotor+0x190>)
 8000c76:	f001 fb3d 	bl	80022f4 <HAL_GPIO_WritePin>
            break;
 8000c7a:	bf00      	nop
    }
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40020800 	.word	0x40020800

08000c88 <Forward90>:

void Forward90(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
    const int one_revolution = 4096;
 8000c8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c92:	60bb      	str	r3, [r7, #8]
    const int delay_ms = 1;
 8000c94:	2301      	movs	r3, #1
 8000c96:	607b      	str	r3, [r7, #4]

    for(int i = 0; i < one_revolution / 4; i++)
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	e011      	b.n	8000cc2 <Forward90+0x3a>
    {
        // 8-step sequence (0 to 7)
        stepMotor(i % 8);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	425a      	negs	r2, r3
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	f002 0207 	and.w	r2, r2, #7
 8000caa:	bf58      	it	pl
 8000cac:	4253      	negpl	r3, r2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff20 	bl	8000af4 <stepMotor>
        osDelay(delay_ms);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f004 fa57 	bl	800516a <osDelay>
    for(int i = 0; i < one_revolution / 4; i++)
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	da00      	bge.n	8000cca <Forward90+0x42>
 8000cc8:	3303      	adds	r3, #3
 8000cca:	109b      	asrs	r3, r3, #2
 8000ccc:	461a      	mov	r2, r3
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	dbe4      	blt.n	8000c9e <Forward90+0x16>
    }
}
 8000cd4:	bf00      	nop
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <__io_putchar>:
//        osDelay(delay_ms);
//    }
//}

PUTCHAR_PROTOTYPE
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART6 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000ce8:	1d39      	adds	r1, r7, #4
 8000cea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4803      	ldr	r0, [pc, #12]	@ (8000d00 <__io_putchar+0x20>)
 8000cf2:	f002 ffe5 	bl	8003cc0 <HAL_UART_Transmit>

  return ch;
 8000cf6:	687b      	ldr	r3, [r7, #4]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200003bc 	.word	0x200003bc

08000d04 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  switch (motorCommand)
 8000d0c:	4b18      	ldr	r3, [pc, #96]	@ (8000d70 <StartDefaultTask+0x6c>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d016      	beq.n	8000d44 <StartDefaultTask+0x40>
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d118      	bne.n	8000d4c <StartDefaultTask+0x48>
		{
			case MOTOR_FORWARD:
				__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 1000); //-45도
 8000d1a:	4b16      	ldr	r3, [pc, #88]	@ (8000d74 <StartDefaultTask+0x70>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d22:	635a      	str	r2, [r3, #52]	@ 0x34
				osDelay(1000);
 8000d24:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d28:	f004 fa1f 	bl	800516a <osDelay>
		//			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 1500); //0도
		//			osDelay(1000);
				__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 2000); //45도
 8000d2c:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <StartDefaultTask+0x70>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000d34:	635a      	str	r2, [r3, #52]	@ 0x34
				servoDone = 1;
 8000d36:	4b10      	ldr	r3, [pc, #64]	@ (8000d78 <StartDefaultTask+0x74>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	601a      	str	r2, [r3, #0]
				motorCommand = MOTOR_STOP; // 명령 수행 완료 후 대기 상태로 변경
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d70 <StartDefaultTask+0x6c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
				break;
 8000d42:	e003      	b.n	8000d4c <StartDefaultTask+0x48>

			case MOTOR_STOP:
				motorFlag = 0;
 8000d44:	4b0d      	ldr	r3, [pc, #52]	@ (8000d7c <StartDefaultTask+0x78>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
				break;
 8000d4a:	bf00      	nop
		}
	  if(!motorFlag&&servoDone)
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d7c <StartDefaultTask+0x78>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d108      	bne.n	8000d66 <StartDefaultTask+0x62>
 8000d54:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <StartDefaultTask+0x74>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d004      	beq.n	8000d66 <StartDefaultTask+0x62>
	  {
		  Forward90();
 8000d5c:	f7ff ff94 	bl	8000c88 <Forward90>
		  servoDone = 0;
 8000d60:	4b05      	ldr	r3, [pc, #20]	@ (8000d78 <StartDefaultTask+0x74>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
	  }

	  osDelay(10);
 8000d66:	200a      	movs	r0, #10
 8000d68:	f004 f9ff 	bl	800516a <osDelay>
	  switch (motorCommand)
 8000d6c:	e7ce      	b.n	8000d0c <StartDefaultTask+0x8>
 8000d6e:	bf00      	nop
 8000d70:	200004d0 	.word	0x200004d0
 8000d74:	2000032c 	.word	0x2000032c
 8000d78:	200004d4 	.word	0x200004d4
 8000d7c:	20000000 	.word	0x20000000

08000d80 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b090      	sub	sp, #64	@ 0x40
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {

	int i=0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char * pToken;
	char * pArray[ARR_CNT]={0};
 8000d8c:	f107 031c 	add.w	r3, r7, #28
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
	int arrbuff[4];
	pToken = strtok(rx_buf,"@");
 8000d9c:	493a      	ldr	r1, [pc, #232]	@ (8000e88 <StartTask02+0x108>)
 8000d9e:	483b      	ldr	r0, [pc, #236]	@ (8000e8c <StartTask02+0x10c>)
 8000da0:	f005 fdb0 	bl	8006904 <strtok>
 8000da4:	63b8      	str	r0, [r7, #56]	@ 0x38
	while(pToken != NULL)
 8000da6:	e011      	b.n	8000dcc <StartTask02+0x4c>
	{
		pArray[i] =  pToken;
 8000da8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	3340      	adds	r3, #64	@ 0x40
 8000dae:	443b      	add	r3, r7
 8000db0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000db2:	f843 2c24 	str.w	r2, [r3, #-36]
		if(++i >= ARR_CNT)
 8000db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000db8:	3301      	adds	r3, #1
 8000dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000dbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	dc08      	bgt.n	8000dd4 <StartTask02+0x54>
		  break;
		pToken = strtok(NULL,"@");
 8000dc2:	4931      	ldr	r1, [pc, #196]	@ (8000e88 <StartTask02+0x108>)
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f005 fd9d 	bl	8006904 <strtok>
 8000dca:	63b8      	str	r0, [r7, #56]	@ 0x38
	while(pToken != NULL)
 8000dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d1ea      	bne.n	8000da8 <StartTask02+0x28>
 8000dd2:	e000      	b.n	8000dd6 <StartTask02+0x56>
		  break;
 8000dd4:	bf00      	nop
	}
	for(int j =0; j<sizeof(arrbuff)/sizeof(int); j++)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8000dda:	e012      	b.n	8000e02 <StartTask02+0x82>
	{
		arrbuff[j]= atoi(pArray[j]);
 8000ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	3340      	adds	r3, #64	@ 0x40
 8000de2:	443b      	add	r3, r7
 8000de4:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f005 fbe3 	bl	80065b4 <atoi>
 8000dee:	4602      	mov	r2, r0
 8000df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	3340      	adds	r3, #64	@ 0x40
 8000df6:	443b      	add	r3, r7
 8000df8:	f843 2c34 	str.w	r2, [r3, #-52]
	for(int j =0; j<sizeof(arrbuff)/sizeof(int); j++)
 8000dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dfe:	3301      	adds	r3, #1
 8000e00:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d9e9      	bls.n	8000ddc <StartTask02+0x5c>
	}
	if(uartFlag)
 8000e08:	4b21      	ldr	r3, [pc, #132]	@ (8000e90 <StartTask02+0x110>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d033      	beq.n	8000e78 <StartTask02+0xf8>
	{
		for(int k =0; k<sizeof(arrbuff)/sizeof(int); k++)
 8000e10:	2300      	movs	r3, #0
 8000e12:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e14:	e02d      	b.n	8000e72 <StartTask02+0xf2>
			{
				printf("arrbuff-> %d\r\n",arrbuff[k]);
 8000e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	3340      	adds	r3, #64	@ 0x40
 8000e1c:	443b      	add	r3, r7
 8000e1e:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000e22:	4619      	mov	r1, r3
 8000e24:	481b      	ldr	r0, [pc, #108]	@ (8000e94 <StartTask02+0x114>)
 8000e26:	f005 fd0f 	bl	8006848 <iprintf>
				if (arrbuff[k])
 8000e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	3340      	adds	r3, #64	@ 0x40
 8000e30:	443b      	add	r3, r7
 8000e32:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d00d      	beq.n	8000e56 <StartTask02+0xd6>
				{
					  motorCommand = MOTOR_FORWARD;
 8000e3a:	4b17      	ldr	r3, [pc, #92]	@ (8000e98 <StartTask02+0x118>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	701a      	strb	r2, [r3, #0]
					  motorFlag = 1;
 8000e40:	4b16      	ldr	r3, [pc, #88]	@ (8000e9c <StartTask02+0x11c>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	601a      	str	r2, [r3, #0]
					  servoDone = 0;
 8000e46:	4b16      	ldr	r3, [pc, #88]	@ (8000ea0 <StartTask02+0x120>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]

					  osDelay(3000);
 8000e4c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000e50:	f004 f98b 	bl	800516a <osDelay>
 8000e54:	e00a      	b.n	8000e6c <StartTask02+0xec>
				}
				else
				{
					Forward90();
 8000e56:	f7ff ff17 	bl	8000c88 <Forward90>
					motorFlag = 1;
 8000e5a:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <StartTask02+0x11c>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	601a      	str	r2, [r3, #0]
					servoDone = 0;
 8000e60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea0 <StartTask02+0x120>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
					osDelay(100);
 8000e66:	2064      	movs	r0, #100	@ 0x64
 8000e68:	f004 f97f 	bl	800516a <osDelay>
		for(int k =0; k<sizeof(arrbuff)/sizeof(int); k++)
 8000e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e6e:	3301      	adds	r3, #1
 8000e70:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	d9ce      	bls.n	8000e16 <StartTask02+0x96>
				}

			}
	}
	uartFlag = 0;
 8000e78:	4b05      	ldr	r3, [pc, #20]	@ (8000e90 <StartTask02+0x110>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
	osDelay(10);
 8000e7e:	200a      	movs	r0, #10
 8000e80:	f004 f973 	bl	800516a <osDelay>
  {
 8000e84:	e780      	b.n	8000d88 <StartTask02+0x8>
 8000e86:	bf00      	nop
 8000e88:	0800782c 	.word	0x0800782c
 8000e8c:	200004dc 	.word	0x200004dc
 8000e90:	200004d8 	.word	0x200004d8
 8000e94:	08007830 	.word	0x08007830
 8000e98:	200004d0 	.word	0x200004d0
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	200004d4 	.word	0x200004d4

08000ea4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000eac:	2001      	movs	r0, #1
 8000eae:	f004 f95c 	bl	800516a <osDelay>
 8000eb2:	e7fb      	b.n	8000eac <StartTask03+0x8>

08000eb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if(htim->Instance == TIM4)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a07      	ldr	r2, [pc, #28]	@ (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d101      	bne.n	8000eca <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 8000ec6:	f000 fb8d 	bl	80015e4 <HAL_IncTick>

	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a05      	ldr	r2, [pc, #20]	@ (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d101      	bne.n	8000ed8 <HAL_TIM_PeriodElapsedCallback+0x24>
  {
    HAL_IncTick();
 8000ed4:	f000 fb86 	bl	80015e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40000800 	.word	0x40000800
 8000ee4:	40000400 	.word	0x40000400

08000ee8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eec:	b672      	cpsid	i
}
 8000eee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <Error_Handler+0x8>

08000ef4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <HAL_MspInit+0x54>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f02:	4a11      	ldr	r2, [pc, #68]	@ (8000f48 <HAL_MspInit+0x54>)
 8000f04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <HAL_MspInit+0x54>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	603b      	str	r3, [r7, #0]
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <HAL_MspInit+0x54>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f48 <HAL_MspInit+0x54>)
 8000f20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f26:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <HAL_MspInit+0x54>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	210f      	movs	r1, #15
 8000f36:	f06f 0001 	mvn.w	r0, #1
 8000f3a:	f000 fc2b 	bl	8001794 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40023800 	.word	0x40023800

08000f4c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0e      	ldr	r2, [pc, #56]	@ (8000f94 <HAL_TIM_Base_MspInit+0x48>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d115      	bne.n	8000f8a <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	4b0d      	ldr	r3, [pc, #52]	@ (8000f98 <HAL_TIM_Base_MspInit+0x4c>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f66:	4a0c      	ldr	r2, [pc, #48]	@ (8000f98 <HAL_TIM_Base_MspInit+0x4c>)
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f98 <HAL_TIM_Base_MspInit+0x4c>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2105      	movs	r1, #5
 8000f7e:	201e      	movs	r0, #30
 8000f80:	f000 fc08 	bl	8001794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f84:	201e      	movs	r0, #30
 8000f86:	f000 fc21 	bl	80017cc <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40000800 	.word	0x40000800
 8000f98:	40023800 	.word	0x40023800

08000f9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a12      	ldr	r2, [pc, #72]	@ (8001004 <HAL_TIM_MspPostInit+0x68>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d11d      	bne.n	8000ffa <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	4b11      	ldr	r3, [pc, #68]	@ (8001008 <HAL_TIM_MspPostInit+0x6c>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	4a10      	ldr	r2, [pc, #64]	@ (8001008 <HAL_TIM_MspPostInit+0x6c>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fce:	4b0e      	ldr	r3, [pc, #56]	@ (8001008 <HAL_TIM_MspPostInit+0x6c>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fda:	2340      	movs	r3, #64	@ 0x40
 8000fdc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000fea:	2302      	movs	r3, #2
 8000fec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4805      	ldr	r0, [pc, #20]	@ (800100c <HAL_TIM_MspPostInit+0x70>)
 8000ff6:	f000 fff9 	bl	8001fec <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000ffa:	bf00      	nop
 8000ffc:	3720      	adds	r7, #32
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40000800 	.word	0x40000800
 8001008:	40023800 	.word	0x40023800
 800100c:	40020400 	.word	0x40020400

08001010 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08c      	sub	sp, #48	@ 0x30
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a69      	ldr	r2, [pc, #420]	@ (80011d4 <HAL_UART_MspInit+0x1c4>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d164      	bne.n	80010fc <HAL_UART_MspInit+0xec>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	61bb      	str	r3, [r7, #24]
 8001036:	4b68      	ldr	r3, [pc, #416]	@ (80011d8 <HAL_UART_MspInit+0x1c8>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800103a:	4a67      	ldr	r2, [pc, #412]	@ (80011d8 <HAL_UART_MspInit+0x1c8>)
 800103c:	f043 0310 	orr.w	r3, r3, #16
 8001040:	6453      	str	r3, [r2, #68]	@ 0x44
 8001042:	4b65      	ldr	r3, [pc, #404]	@ (80011d8 <HAL_UART_MspInit+0x1c8>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001046:	f003 0310 	and.w	r3, r3, #16
 800104a:	61bb      	str	r3, [r7, #24]
 800104c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
 8001052:	4b61      	ldr	r3, [pc, #388]	@ (80011d8 <HAL_UART_MspInit+0x1c8>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	4a60      	ldr	r2, [pc, #384]	@ (80011d8 <HAL_UART_MspInit+0x1c8>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6313      	str	r3, [r2, #48]	@ 0x30
 800105e:	4b5e      	ldr	r3, [pc, #376]	@ (80011d8 <HAL_UART_MspInit+0x1c8>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800106a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800106e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001078:	2303      	movs	r3, #3
 800107a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800107c:	2307      	movs	r3, #7
 800107e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001080:	f107 031c 	add.w	r3, r7, #28
 8001084:	4619      	mov	r1, r3
 8001086:	4855      	ldr	r0, [pc, #340]	@ (80011dc <HAL_UART_MspInit+0x1cc>)
 8001088:	f000 ffb0 	bl	8001fec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800108c:	4b54      	ldr	r3, [pc, #336]	@ (80011e0 <HAL_UART_MspInit+0x1d0>)
 800108e:	4a55      	ldr	r2, [pc, #340]	@ (80011e4 <HAL_UART_MspInit+0x1d4>)
 8001090:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001092:	4b53      	ldr	r3, [pc, #332]	@ (80011e0 <HAL_UART_MspInit+0x1d0>)
 8001094:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001098:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800109a:	4b51      	ldr	r3, [pc, #324]	@ (80011e0 <HAL_UART_MspInit+0x1d0>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010a0:	4b4f      	ldr	r3, [pc, #316]	@ (80011e0 <HAL_UART_MspInit+0x1d0>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010a6:	4b4e      	ldr	r3, [pc, #312]	@ (80011e0 <HAL_UART_MspInit+0x1d0>)
 80010a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010ac:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010ae:	4b4c      	ldr	r3, [pc, #304]	@ (80011e0 <HAL_UART_MspInit+0x1d0>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010b4:	4b4a      	ldr	r3, [pc, #296]	@ (80011e0 <HAL_UART_MspInit+0x1d0>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80010ba:	4b49      	ldr	r3, [pc, #292]	@ (80011e0 <HAL_UART_MspInit+0x1d0>)
 80010bc:	2200      	movs	r2, #0
 80010be:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80010c0:	4b47      	ldr	r3, [pc, #284]	@ (80011e0 <HAL_UART_MspInit+0x1d0>)
 80010c2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80010c6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010c8:	4b45      	ldr	r3, [pc, #276]	@ (80011e0 <HAL_UART_MspInit+0x1d0>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80010ce:	4844      	ldr	r0, [pc, #272]	@ (80011e0 <HAL_UART_MspInit+0x1d0>)
 80010d0:	f000 fb8a 	bl	80017e8 <HAL_DMA_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80010da:	f7ff ff05 	bl	8000ee8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a3f      	ldr	r2, [pc, #252]	@ (80011e0 <HAL_UART_MspInit+0x1d0>)
 80010e2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010e4:	4a3e      	ldr	r2, [pc, #248]	@ (80011e0 <HAL_UART_MspInit+0x1d0>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2105      	movs	r1, #5
 80010ee:	2025      	movs	r0, #37	@ 0x25
 80010f0:	f000 fb50 	bl	8001794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010f4:	2025      	movs	r0, #37	@ 0x25
 80010f6:	f000 fb69 	bl	80017cc <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80010fa:	e067      	b.n	80011cc <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART2)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a39      	ldr	r2, [pc, #228]	@ (80011e8 <HAL_UART_MspInit+0x1d8>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d162      	bne.n	80011cc <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	4b33      	ldr	r3, [pc, #204]	@ (80011d8 <HAL_UART_MspInit+0x1c8>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110e:	4a32      	ldr	r2, [pc, #200]	@ (80011d8 <HAL_UART_MspInit+0x1c8>)
 8001110:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001114:	6413      	str	r3, [r2, #64]	@ 0x40
 8001116:	4b30      	ldr	r3, [pc, #192]	@ (80011d8 <HAL_UART_MspInit+0x1c8>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	4b2c      	ldr	r3, [pc, #176]	@ (80011d8 <HAL_UART_MspInit+0x1c8>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	4a2b      	ldr	r2, [pc, #172]	@ (80011d8 <HAL_UART_MspInit+0x1c8>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	@ 0x30
 8001132:	4b29      	ldr	r3, [pc, #164]	@ (80011d8 <HAL_UART_MspInit+0x1c8>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800113e:	230c      	movs	r3, #12
 8001140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114a:	2303      	movs	r3, #3
 800114c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800114e:	2307      	movs	r3, #7
 8001150:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	f107 031c 	add.w	r3, r7, #28
 8001156:	4619      	mov	r1, r3
 8001158:	4820      	ldr	r0, [pc, #128]	@ (80011dc <HAL_UART_MspInit+0x1cc>)
 800115a:	f000 ff47 	bl	8001fec <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800115e:	4b23      	ldr	r3, [pc, #140]	@ (80011ec <HAL_UART_MspInit+0x1dc>)
 8001160:	4a23      	ldr	r2, [pc, #140]	@ (80011f0 <HAL_UART_MspInit+0x1e0>)
 8001162:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001164:	4b21      	ldr	r3, [pc, #132]	@ (80011ec <HAL_UART_MspInit+0x1dc>)
 8001166:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800116a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800116c:	4b1f      	ldr	r3, [pc, #124]	@ (80011ec <HAL_UART_MspInit+0x1dc>)
 800116e:	2240      	movs	r2, #64	@ 0x40
 8001170:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001172:	4b1e      	ldr	r3, [pc, #120]	@ (80011ec <HAL_UART_MspInit+0x1dc>)
 8001174:	2200      	movs	r2, #0
 8001176:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001178:	4b1c      	ldr	r3, [pc, #112]	@ (80011ec <HAL_UART_MspInit+0x1dc>)
 800117a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800117e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001180:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <HAL_UART_MspInit+0x1dc>)
 8001182:	2200      	movs	r2, #0
 8001184:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001186:	4b19      	ldr	r3, [pc, #100]	@ (80011ec <HAL_UART_MspInit+0x1dc>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800118c:	4b17      	ldr	r3, [pc, #92]	@ (80011ec <HAL_UART_MspInit+0x1dc>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001192:	4b16      	ldr	r3, [pc, #88]	@ (80011ec <HAL_UART_MspInit+0x1dc>)
 8001194:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001198:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800119a:	4b14      	ldr	r3, [pc, #80]	@ (80011ec <HAL_UART_MspInit+0x1dc>)
 800119c:	2200      	movs	r2, #0
 800119e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80011a0:	4812      	ldr	r0, [pc, #72]	@ (80011ec <HAL_UART_MspInit+0x1dc>)
 80011a2:	f000 fb21 	bl	80017e8 <HAL_DMA_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 80011ac:	f7ff fe9c 	bl	8000ee8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a0e      	ldr	r2, [pc, #56]	@ (80011ec <HAL_UART_MspInit+0x1dc>)
 80011b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80011b6:	4a0d      	ldr	r2, [pc, #52]	@ (80011ec <HAL_UART_MspInit+0x1dc>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	2105      	movs	r1, #5
 80011c0:	2026      	movs	r0, #38	@ 0x26
 80011c2:	f000 fae7 	bl	8001794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011c6:	2026      	movs	r0, #38	@ 0x26
 80011c8:	f000 fb00 	bl	80017cc <HAL_NVIC_EnableIRQ>
}
 80011cc:	bf00      	nop
 80011ce:	3730      	adds	r7, #48	@ 0x30
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40011000 	.word	0x40011000
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020000 	.word	0x40020000
 80011e0:	20000404 	.word	0x20000404
 80011e4:	40026440 	.word	0x40026440
 80011e8:	40004400 	.word	0x40004400
 80011ec:	20000464 	.word	0x20000464
 80011f0:	400260a0 	.word	0x400260a0

080011f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08e      	sub	sp, #56	@ 0x38
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001200:	2300      	movs	r3, #0
 8001202:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	4b33      	ldr	r3, [pc, #204]	@ (80012d8 <HAL_InitTick+0xe4>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120c:	4a32      	ldr	r2, [pc, #200]	@ (80012d8 <HAL_InitTick+0xe4>)
 800120e:	f043 0302 	orr.w	r3, r3, #2
 8001212:	6413      	str	r3, [r2, #64]	@ 0x40
 8001214:	4b30      	ldr	r3, [pc, #192]	@ (80012d8 <HAL_InitTick+0xe4>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001220:	f107 0210 	add.w	r2, r7, #16
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4611      	mov	r1, r2
 800122a:	4618      	mov	r0, r3
 800122c:	f001 fd14 	bl	8002c58 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001236:	2b00      	cmp	r3, #0
 8001238:	d103      	bne.n	8001242 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800123a:	f001 fce5 	bl	8002c08 <HAL_RCC_GetPCLK1Freq>
 800123e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001240:	e004      	b.n	800124c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001242:	f001 fce1 	bl	8002c08 <HAL_RCC_GetPCLK1Freq>
 8001246:	4603      	mov	r3, r0
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800124c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800124e:	4a23      	ldr	r2, [pc, #140]	@ (80012dc <HAL_InitTick+0xe8>)
 8001250:	fba2 2303 	umull	r2, r3, r2, r3
 8001254:	0c9b      	lsrs	r3, r3, #18
 8001256:	3b01      	subs	r3, #1
 8001258:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800125a:	4b21      	ldr	r3, [pc, #132]	@ (80012e0 <HAL_InitTick+0xec>)
 800125c:	4a21      	ldr	r2, [pc, #132]	@ (80012e4 <HAL_InitTick+0xf0>)
 800125e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001260:	4b1f      	ldr	r3, [pc, #124]	@ (80012e0 <HAL_InitTick+0xec>)
 8001262:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001266:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001268:	4a1d      	ldr	r2, [pc, #116]	@ (80012e0 <HAL_InitTick+0xec>)
 800126a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800126c:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 800126e:	4b1c      	ldr	r3, [pc, #112]	@ (80012e0 <HAL_InitTick+0xec>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001274:	4b1a      	ldr	r3, [pc, #104]	@ (80012e0 <HAL_InitTick+0xec>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127a:	4b19      	ldr	r3, [pc, #100]	@ (80012e0 <HAL_InitTick+0xec>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8001280:	4817      	ldr	r0, [pc, #92]	@ (80012e0 <HAL_InitTick+0xec>)
 8001282:	f001 fd1b 	bl	8002cbc <HAL_TIM_Base_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800128c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001290:	2b00      	cmp	r3, #0
 8001292:	d11b      	bne.n	80012cc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8001294:	4812      	ldr	r0, [pc, #72]	@ (80012e0 <HAL_InitTick+0xec>)
 8001296:	f001 fd61 	bl	8002d5c <HAL_TIM_Base_Start_IT>
 800129a:	4603      	mov	r3, r0
 800129c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80012a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d111      	bne.n	80012cc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012a8:	201d      	movs	r0, #29
 80012aa:	f000 fa8f 	bl	80017cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b0f      	cmp	r3, #15
 80012b2:	d808      	bhi.n	80012c6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80012b4:	2200      	movs	r2, #0
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	201d      	movs	r0, #29
 80012ba:	f000 fa6b 	bl	8001794 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012be:	4a0a      	ldr	r2, [pc, #40]	@ (80012e8 <HAL_InitTick+0xf4>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	e002      	b.n	80012cc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3738      	adds	r7, #56	@ 0x38
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40023800 	.word	0x40023800
 80012dc:	431bde83 	.word	0x431bde83
 80012e0:	200005dc 	.word	0x200005dc
 80012e4:	40000400 	.word	0x40000400
 80012e8:	20000008 	.word	0x20000008

080012ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <NMI_Handler+0x4>

080012f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <HardFault_Handler+0x4>

080012fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <MemManage_Handler+0x4>

08001304 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <BusFault_Handler+0x4>

0800130c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001310:	bf00      	nop
 8001312:	e7fd      	b.n	8001310 <UsageFault_Handler+0x4>

08001314 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001328:	4802      	ldr	r0, [pc, #8]	@ (8001334 <DMA1_Stream6_IRQHandler+0x10>)
 800132a:	f000 fbf5 	bl	8001b18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000464 	.word	0x20000464

08001338 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800133c:	4802      	ldr	r0, [pc, #8]	@ (8001348 <TIM3_IRQHandler+0x10>)
 800133e:	f001 fe79 	bl	8003034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200005dc 	.word	0x200005dc

0800134c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001350:	4802      	ldr	r0, [pc, #8]	@ (800135c <TIM4_IRQHandler+0x10>)
 8001352:	f001 fe6f 	bl	8003034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	2000032c 	.word	0x2000032c

08001360 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001364:	4802      	ldr	r0, [pc, #8]	@ (8001370 <USART1_IRQHandler+0x10>)
 8001366:	f002 fd8f 	bl	8003e88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000374 	.word	0x20000374

08001374 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001378:	4802      	ldr	r0, [pc, #8]	@ (8001384 <USART2_IRQHandler+0x10>)
 800137a:	f002 fd85 	bl	8003e88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200003bc 	.word	0x200003bc

08001388 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800138c:	4802      	ldr	r0, [pc, #8]	@ (8001398 <DMA2_Stream2_IRQHandler+0x10>)
 800138e:	f000 fbc3 	bl	8001b18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000404 	.word	0x20000404

0800139c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return 1;
 80013a0:	2301      	movs	r3, #1
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <_kill>:

int _kill(int pid, int sig)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013b6:	f005 fba5 	bl	8006b04 <__errno>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2216      	movs	r2, #22
 80013be:	601a      	str	r2, [r3, #0]
  return -1;
 80013c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <_exit>:

void _exit (int status)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013d4:	f04f 31ff 	mov.w	r1, #4294967295
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff ffe7 	bl	80013ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80013de:	bf00      	nop
 80013e0:	e7fd      	b.n	80013de <_exit+0x12>

080013e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b086      	sub	sp, #24
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	60f8      	str	r0, [r7, #12]
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	e00a      	b.n	800140a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013f4:	f3af 8000 	nop.w
 80013f8:	4601      	mov	r1, r0
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	60ba      	str	r2, [r7, #8]
 8001400:	b2ca      	uxtb	r2, r1
 8001402:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	3301      	adds	r3, #1
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	429a      	cmp	r2, r3
 8001410:	dbf0      	blt.n	80013f4 <_read+0x12>
  }

  return len;
 8001412:	687b      	ldr	r3, [r7, #4]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	e009      	b.n	8001442 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	1c5a      	adds	r2, r3, #1
 8001432:	60ba      	str	r2, [r7, #8]
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff fc52 	bl	8000ce0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	3301      	adds	r3, #1
 8001440:	617b      	str	r3, [r7, #20]
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	429a      	cmp	r2, r3
 8001448:	dbf1      	blt.n	800142e <_write+0x12>
  }
  return len;
 800144a:	687b      	ldr	r3, [r7, #4]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <_close>:

int _close(int file)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800145c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001460:	4618      	mov	r0, r3
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800147c:	605a      	str	r2, [r3, #4]
  return 0;
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <_isatty>:

int _isatty(int file)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001494:	2301      	movs	r3, #1
}
 8001496:	4618      	mov	r0, r3
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b085      	sub	sp, #20
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	60f8      	str	r0, [r7, #12]
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c4:	4a14      	ldr	r2, [pc, #80]	@ (8001518 <_sbrk+0x5c>)
 80014c6:	4b15      	ldr	r3, [pc, #84]	@ (800151c <_sbrk+0x60>)
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d0:	4b13      	ldr	r3, [pc, #76]	@ (8001520 <_sbrk+0x64>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d102      	bne.n	80014de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d8:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <_sbrk+0x64>)
 80014da:	4a12      	ldr	r2, [pc, #72]	@ (8001524 <_sbrk+0x68>)
 80014dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014de:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <_sbrk+0x64>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d207      	bcs.n	80014fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014ec:	f005 fb0a 	bl	8006b04 <__errno>
 80014f0:	4603      	mov	r3, r0
 80014f2:	220c      	movs	r2, #12
 80014f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
 80014fa:	e009      	b.n	8001510 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014fc:	4b08      	ldr	r3, [pc, #32]	@ (8001520 <_sbrk+0x64>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001502:	4b07      	ldr	r3, [pc, #28]	@ (8001520 <_sbrk+0x64>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	4a05      	ldr	r2, [pc, #20]	@ (8001520 <_sbrk+0x64>)
 800150c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800150e:	68fb      	ldr	r3, [r7, #12]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20020000 	.word	0x20020000
 800151c:	00000400 	.word	0x00000400
 8001520:	20000624 	.word	0x20000624
 8001524:	200044d0 	.word	0x200044d0

08001528 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800152c:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <SystemInit+0x20>)
 800152e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001532:	4a05      	ldr	r2, [pc, #20]	@ (8001548 <SystemInit+0x20>)
 8001534:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001538:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800154c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001584 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001550:	f7ff ffea 	bl	8001528 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001554:	480c      	ldr	r0, [pc, #48]	@ (8001588 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001556:	490d      	ldr	r1, [pc, #52]	@ (800158c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001558:	4a0d      	ldr	r2, [pc, #52]	@ (8001590 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800155c:	e002      	b.n	8001564 <LoopCopyDataInit>

0800155e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800155e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001562:	3304      	adds	r3, #4

08001564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001568:	d3f9      	bcc.n	800155e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800156a:	4a0a      	ldr	r2, [pc, #40]	@ (8001594 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800156c:	4c0a      	ldr	r4, [pc, #40]	@ (8001598 <LoopFillZerobss+0x22>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001570:	e001      	b.n	8001576 <LoopFillZerobss>

08001572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001574:	3204      	adds	r2, #4

08001576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001578:	d3fb      	bcc.n	8001572 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800157a:	f005 fac9 	bl	8006b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800157e:	f7ff f82f 	bl	80005e0 <main>
  bx  lr    
 8001582:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001584:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800158c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001590:	08007a5c 	.word	0x08007a5c
  ldr r2, =_sbss
 8001594:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001598:	200044cc 	.word	0x200044cc

0800159c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800159c:	e7fe      	b.n	800159c <ADC_IRQHandler>
	...

080015a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015a4:	4b0e      	ldr	r3, [pc, #56]	@ (80015e0 <HAL_Init+0x40>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a0d      	ldr	r2, [pc, #52]	@ (80015e0 <HAL_Init+0x40>)
 80015aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015b0:	4b0b      	ldr	r3, [pc, #44]	@ (80015e0 <HAL_Init+0x40>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0a      	ldr	r2, [pc, #40]	@ (80015e0 <HAL_Init+0x40>)
 80015b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015bc:	4b08      	ldr	r3, [pc, #32]	@ (80015e0 <HAL_Init+0x40>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a07      	ldr	r2, [pc, #28]	@ (80015e0 <HAL_Init+0x40>)
 80015c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c8:	2003      	movs	r0, #3
 80015ca:	f000 f8d8 	bl	800177e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ce:	200f      	movs	r0, #15
 80015d0:	f7ff fe10 	bl	80011f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d4:	f7ff fc8e 	bl	8000ef4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023c00 	.word	0x40023c00

080015e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e8:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <HAL_IncTick+0x20>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <HAL_IncTick+0x24>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	4a04      	ldr	r2, [pc, #16]	@ (8001608 <HAL_IncTick+0x24>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	2000000c 	.word	0x2000000c
 8001608:	20000628 	.word	0x20000628

0800160c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return uwTick;
 8001610:	4b03      	ldr	r3, [pc, #12]	@ (8001620 <HAL_GetTick+0x14>)
 8001612:	681b      	ldr	r3, [r3, #0]
}
 8001614:	4618      	mov	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000628 	.word	0x20000628

08001624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001634:	4b0c      	ldr	r3, [pc, #48]	@ (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001640:	4013      	ands	r3, r2
 8001642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800164c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001650:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001656:	4a04      	ldr	r2, [pc, #16]	@ (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	60d3      	str	r3, [r2, #12]
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001670:	4b04      	ldr	r3, [pc, #16]	@ (8001684 <__NVIC_GetPriorityGrouping+0x18>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	f003 0307 	and.w	r3, r3, #7
}
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	2b00      	cmp	r3, #0
 8001698:	db0b      	blt.n	80016b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	f003 021f 	and.w	r2, r3, #31
 80016a0:	4907      	ldr	r1, [pc, #28]	@ (80016c0 <__NVIC_EnableIRQ+0x38>)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	2001      	movs	r0, #1
 80016aa:	fa00 f202 	lsl.w	r2, r0, r2
 80016ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000e100 	.word	0xe000e100

080016c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	6039      	str	r1, [r7, #0]
 80016ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	db0a      	blt.n	80016ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	490c      	ldr	r1, [pc, #48]	@ (8001710 <__NVIC_SetPriority+0x4c>)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	0112      	lsls	r2, r2, #4
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	440b      	add	r3, r1
 80016e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ec:	e00a      	b.n	8001704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	4908      	ldr	r1, [pc, #32]	@ (8001714 <__NVIC_SetPriority+0x50>)
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	3b04      	subs	r3, #4
 80016fc:	0112      	lsls	r2, r2, #4
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	440b      	add	r3, r1
 8001702:	761a      	strb	r2, [r3, #24]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000e100 	.word	0xe000e100
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001718:	b480      	push	{r7}
 800171a:	b089      	sub	sp, #36	@ 0x24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f1c3 0307 	rsb	r3, r3, #7
 8001732:	2b04      	cmp	r3, #4
 8001734:	bf28      	it	cs
 8001736:	2304      	movcs	r3, #4
 8001738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3304      	adds	r3, #4
 800173e:	2b06      	cmp	r3, #6
 8001740:	d902      	bls.n	8001748 <NVIC_EncodePriority+0x30>
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3b03      	subs	r3, #3
 8001746:	e000      	b.n	800174a <NVIC_EncodePriority+0x32>
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	f04f 32ff 	mov.w	r2, #4294967295
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43da      	mvns	r2, r3
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	401a      	ands	r2, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001760:	f04f 31ff 	mov.w	r1, #4294967295
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	fa01 f303 	lsl.w	r3, r1, r3
 800176a:	43d9      	mvns	r1, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001770:	4313      	orrs	r3, r2
         );
}
 8001772:	4618      	mov	r0, r3
 8001774:	3724      	adds	r7, #36	@ 0x24
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ff4c 	bl	8001624 <__NVIC_SetPriorityGrouping>
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
 80017a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a6:	f7ff ff61 	bl	800166c <__NVIC_GetPriorityGrouping>
 80017aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	68b9      	ldr	r1, [r7, #8]
 80017b0:	6978      	ldr	r0, [r7, #20]
 80017b2:	f7ff ffb1 	bl	8001718 <NVIC_EncodePriority>
 80017b6:	4602      	mov	r2, r0
 80017b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017bc:	4611      	mov	r1, r2
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff ff80 	bl	80016c4 <__NVIC_SetPriority>
}
 80017c4:	bf00      	nop
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff ff54 	bl	8001688 <__NVIC_EnableIRQ>
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80017f4:	f7ff ff0a 	bl	800160c <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d101      	bne.n	8001804 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e099      	b.n	8001938 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2202      	movs	r2, #2
 8001808:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 0201 	bic.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001824:	e00f      	b.n	8001846 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001826:	f7ff fef1 	bl	800160c <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b05      	cmp	r3, #5
 8001832:	d908      	bls.n	8001846 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2220      	movs	r2, #32
 8001838:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2203      	movs	r2, #3
 800183e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e078      	b.n	8001938 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1e8      	bne.n	8001826 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	4b38      	ldr	r3, [pc, #224]	@ (8001940 <HAL_DMA_Init+0x158>)
 8001860:	4013      	ands	r3, r2
 8001862:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001872:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800187e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800188a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	4313      	orrs	r3, r2
 8001896:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189c:	2b04      	cmp	r3, #4
 800189e:	d107      	bne.n	80018b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a8:	4313      	orrs	r3, r2
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f023 0307 	bic.w	r3, r3, #7
 80018c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	d117      	bne.n	800190a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d00e      	beq.n	800190a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 fb01 	bl	8001ef4 <DMA_CheckFifoParam>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d008      	beq.n	800190a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2240      	movs	r2, #64	@ 0x40
 80018fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001906:	2301      	movs	r3, #1
 8001908:	e016      	b.n	8001938 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 fab8 	bl	8001e88 <DMA_CalcBaseAndBitshift>
 8001918:	4603      	mov	r3, r0
 800191a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001920:	223f      	movs	r2, #63	@ 0x3f
 8001922:	409a      	lsls	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	f010803f 	.word	0xf010803f

08001944 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
 8001950:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001952:	2300      	movs	r3, #0
 8001954:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800195a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001962:	2b01      	cmp	r3, #1
 8001964:	d101      	bne.n	800196a <HAL_DMA_Start_IT+0x26>
 8001966:	2302      	movs	r3, #2
 8001968:	e040      	b.n	80019ec <HAL_DMA_Start_IT+0xa8>
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2201      	movs	r2, #1
 800196e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b01      	cmp	r3, #1
 800197c:	d12f      	bne.n	80019de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2202      	movs	r2, #2
 8001982:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2200      	movs	r2, #0
 800198a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	68b9      	ldr	r1, [r7, #8]
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f000 fa4a 	bl	8001e2c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800199c:	223f      	movs	r2, #63	@ 0x3f
 800199e:	409a      	lsls	r2, r3
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 0216 	orr.w	r2, r2, #22
 80019b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d007      	beq.n	80019cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0208 	orr.w	r2, r2, #8
 80019ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f042 0201 	orr.w	r2, r2, #1
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	e005      	b.n	80019ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80019e6:	2302      	movs	r3, #2
 80019e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a00:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a02:	f7ff fe03 	bl	800160c <HAL_GetTick>
 8001a06:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d008      	beq.n	8001a26 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2280      	movs	r2, #128	@ 0x80
 8001a18:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e052      	b.n	8001acc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 0216 	bic.w	r2, r2, #22
 8001a34:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	695a      	ldr	r2, [r3, #20]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a44:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d103      	bne.n	8001a56 <HAL_DMA_Abort+0x62>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d007      	beq.n	8001a66 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0208 	bic.w	r2, r2, #8
 8001a64:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0201 	bic.w	r2, r2, #1
 8001a74:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a76:	e013      	b.n	8001aa0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a78:	f7ff fdc8 	bl	800160c <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b05      	cmp	r3, #5
 8001a84:	d90c      	bls.n	8001aa0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2220      	movs	r2, #32
 8001a8a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2203      	movs	r2, #3
 8001a90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e015      	b.n	8001acc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1e4      	bne.n	8001a78 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ab2:	223f      	movs	r2, #63	@ 0x3f
 8001ab4:	409a      	lsls	r2, r3
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d004      	beq.n	8001af2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2280      	movs	r2, #128	@ 0x80
 8001aec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e00c      	b.n	8001b0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2205      	movs	r2, #5
 8001af6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 0201 	bic.w	r2, r2, #1
 8001b08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b24:	4b8e      	ldr	r3, [pc, #568]	@ (8001d60 <HAL_DMA_IRQHandler+0x248>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a8e      	ldr	r2, [pc, #568]	@ (8001d64 <HAL_DMA_IRQHandler+0x24c>)
 8001b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2e:	0a9b      	lsrs	r3, r3, #10
 8001b30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b42:	2208      	movs	r2, #8
 8001b44:	409a      	lsls	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d01a      	beq.n	8001b84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d013      	beq.n	8001b84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0204 	bic.w	r2, r2, #4
 8001b6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b70:	2208      	movs	r2, #8
 8001b72:	409a      	lsls	r2, r3
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b7c:	f043 0201 	orr.w	r2, r3, #1
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b88:	2201      	movs	r2, #1
 8001b8a:	409a      	lsls	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d012      	beq.n	8001bba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00b      	beq.n	8001bba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	409a      	lsls	r2, r3
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb2:	f043 0202 	orr.w	r2, r3, #2
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bbe:	2204      	movs	r2, #4
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d012      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00b      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bdc:	2204      	movs	r2, #4
 8001bde:	409a      	lsls	r2, r3
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001be8:	f043 0204 	orr.w	r2, r3, #4
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf4:	2210      	movs	r2, #16
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d043      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d03c      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c12:	2210      	movs	r2, #16
 8001c14:	409a      	lsls	r2, r3
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d018      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d108      	bne.n	8001c48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d024      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	4798      	blx	r3
 8001c46:	e01f      	b.n	8001c88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d01b      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	4798      	blx	r3
 8001c58:	e016      	b.n	8001c88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d107      	bne.n	8001c78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0208 	bic.w	r2, r2, #8
 8001c76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 808f 	beq.w	8001db8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0310 	and.w	r3, r3, #16
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 8087 	beq.w	8001db8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cae:	2220      	movs	r2, #32
 8001cb0:	409a      	lsls	r2, r3
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b05      	cmp	r3, #5
 8001cc0:	d136      	bne.n	8001d30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0216 	bic.w	r2, r2, #22
 8001cd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	695a      	ldr	r2, [r3, #20]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ce0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d103      	bne.n	8001cf2 <HAL_DMA_IRQHandler+0x1da>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d007      	beq.n	8001d02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 0208 	bic.w	r2, r2, #8
 8001d00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d06:	223f      	movs	r2, #63	@ 0x3f
 8001d08:	409a      	lsls	r2, r3
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d07e      	beq.n	8001e24 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	4798      	blx	r3
        }
        return;
 8001d2e:	e079      	b.n	8001e24 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d01d      	beq.n	8001d7a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10d      	bne.n	8001d68 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d031      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	4798      	blx	r3
 8001d5c:	e02c      	b.n	8001db8 <HAL_DMA_IRQHandler+0x2a0>
 8001d5e:	bf00      	nop
 8001d60:	20000004 	.word	0x20000004
 8001d64:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d023      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	4798      	blx	r3
 8001d78:	e01e      	b.n	8001db8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10f      	bne.n	8001da8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0210 	bic.w	r2, r2, #16
 8001d96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d032      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d022      	beq.n	8001e12 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2205      	movs	r2, #5
 8001dd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0201 	bic.w	r2, r2, #1
 8001de2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	3301      	adds	r3, #1
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d307      	bcc.n	8001e00 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f2      	bne.n	8001de4 <HAL_DMA_IRQHandler+0x2cc>
 8001dfe:	e000      	b.n	8001e02 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e00:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d005      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	4798      	blx	r3
 8001e22:	e000      	b.n	8001e26 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e24:	bf00      	nop
    }
  }
}
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
 8001e38:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001e48:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	2b40      	cmp	r3, #64	@ 0x40
 8001e58:	d108      	bne.n	8001e6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e6a:	e007      	b.n	8001e7c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68ba      	ldr	r2, [r7, #8]
 8001e72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	60da      	str	r2, [r3, #12]
}
 8001e7c:	bf00      	nop
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	3b10      	subs	r3, #16
 8001e98:	4a14      	ldr	r2, [pc, #80]	@ (8001eec <DMA_CalcBaseAndBitshift+0x64>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	091b      	lsrs	r3, r3, #4
 8001ea0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ea2:	4a13      	ldr	r2, [pc, #76]	@ (8001ef0 <DMA_CalcBaseAndBitshift+0x68>)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d909      	bls.n	8001eca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001ebe:	f023 0303 	bic.w	r3, r3, #3
 8001ec2:	1d1a      	adds	r2, r3, #4
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ec8:	e007      	b.n	8001eda <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001ed2:	f023 0303 	bic.w	r3, r3, #3
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	aaaaaaab 	.word	0xaaaaaaab
 8001ef0:	08007860 	.word	0x08007860

08001ef4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001efc:	2300      	movs	r3, #0
 8001efe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d11f      	bne.n	8001f4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d856      	bhi.n	8001fc2 <DMA_CheckFifoParam+0xce>
 8001f14:	a201      	add	r2, pc, #4	@ (adr r2, 8001f1c <DMA_CheckFifoParam+0x28>)
 8001f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1a:	bf00      	nop
 8001f1c:	08001f2d 	.word	0x08001f2d
 8001f20:	08001f3f 	.word	0x08001f3f
 8001f24:	08001f2d 	.word	0x08001f2d
 8001f28:	08001fc3 	.word	0x08001fc3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d046      	beq.n	8001fc6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f3c:	e043      	b.n	8001fc6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f42:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f46:	d140      	bne.n	8001fca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f4c:	e03d      	b.n	8001fca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f56:	d121      	bne.n	8001f9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2b03      	cmp	r3, #3
 8001f5c:	d837      	bhi.n	8001fce <DMA_CheckFifoParam+0xda>
 8001f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f64 <DMA_CheckFifoParam+0x70>)
 8001f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f64:	08001f75 	.word	0x08001f75
 8001f68:	08001f7b 	.word	0x08001f7b
 8001f6c:	08001f75 	.word	0x08001f75
 8001f70:	08001f8d 	.word	0x08001f8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	73fb      	strb	r3, [r7, #15]
      break;
 8001f78:	e030      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d025      	beq.n	8001fd2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f8a:	e022      	b.n	8001fd2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f90:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f94:	d11f      	bne.n	8001fd6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f9a:	e01c      	b.n	8001fd6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d903      	bls.n	8001faa <DMA_CheckFifoParam+0xb6>
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	d003      	beq.n	8001fb0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001fa8:	e018      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	73fb      	strb	r3, [r7, #15]
      break;
 8001fae:	e015      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00e      	beq.n	8001fda <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8001fc0:	e00b      	b.n	8001fda <DMA_CheckFifoParam+0xe6>
      break;
 8001fc2:	bf00      	nop
 8001fc4:	e00a      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
      break;
 8001fc6:	bf00      	nop
 8001fc8:	e008      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
      break;
 8001fca:	bf00      	nop
 8001fcc:	e006      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
      break;
 8001fce:	bf00      	nop
 8001fd0:	e004      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
      break;
 8001fd2:	bf00      	nop
 8001fd4:	e002      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
      break;   
 8001fd6:	bf00      	nop
 8001fd8:	e000      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
      break;
 8001fda:	bf00      	nop
    }
  } 
  
  return status; 
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop

08001fec <HAL_GPIO_Init>:
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	@ 0x24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  /* Start scheduler */
  osKernelStart();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]

 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
  /* We should never get here as control is now taken by the scheduler */
 8001ffe:	2300      	movs	r3, #0
 8002000:	61bb      	str	r3, [r7, #24]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	e159      	b.n	80022bc <HAL_GPIO_Init+0x2d0>
  }
  /* USER CODE END 3 */
}
 8002008:	2201      	movs	r2, #1
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	617b      	str	r3, [r7, #20]

/**
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
  * @brief System Clock Configuration
  * @retval None
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	429a      	cmp	r2, r3
 8002022:	f040 8148 	bne.w	80022b6 <HAL_GPIO_Init+0x2ca>
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	2b01      	cmp	r3, #1
 8002030:	d005      	beq.n	800203e <HAL_GPIO_Init+0x52>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 0303 	and.w	r3, r3, #3
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800203a:	2b02      	cmp	r3, #2
 800203c:	d130      	bne.n	80020a0 <HAL_GPIO_Init+0xb4>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	61bb      	str	r3, [r7, #24]

 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	2203      	movs	r2, #3
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
  /** Initializes the RCC Oscillators according to the specified parameters
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
  * in the RCC_OscInitTypeDef structure.
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	609a      	str	r2, [r3, #8]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002074:	2201      	movs	r2, #1
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	f003 0201 	and.w	r2, r3, #1
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	2b03      	cmp	r3, #3
 80020aa:	d017      	beq.n	80020dc <HAL_GPIO_Init+0xf0>
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	61bb      	str	r3, [r7, #24]
  /** Initializes the CPU, AHB and APB buses clocks
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	2203      	movs	r2, #3
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
  */
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	60da      	str	r2, [r3, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d123      	bne.n	8002130 <HAL_GPIO_Init+0x144>
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	08da      	lsrs	r2, r3, #3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3208      	adds	r2, #8
 80020f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f4:	61bb      	str	r3, [r7, #24]
  }
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	220f      	movs	r2, #15
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
}
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]

 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	08da      	lsrs	r2, r3, #3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3208      	adds	r2, #8
 800212a:	69b9      	ldr	r1, [r7, #24]
 800212c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/**
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	61bb      	str	r3, [r7, #24]
  */
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	2203      	movs	r2, #3
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
static void MX_TIM4_Init(void)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0203 	and.w	r2, r3, #3
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
{
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 80a2 	beq.w	80022b6 <HAL_GPIO_Init+0x2ca>

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	4b57      	ldr	r3, [pc, #348]	@ (80022d4 <HAL_GPIO_Init+0x2e8>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217a:	4a56      	ldr	r2, [pc, #344]	@ (80022d4 <HAL_GPIO_Init+0x2e8>)
 800217c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002180:	6453      	str	r3, [r2, #68]	@ 0x44
 8002182:	4b54      	ldr	r3, [pc, #336]	@ (80022d4 <HAL_GPIO_Init+0x2e8>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002186:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};

 800218e:	4a52      	ldr	r2, [pc, #328]	@ (80022d8 <HAL_GPIO_Init+0x2ec>)
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	089b      	lsrs	r3, r3, #2
 8002194:	3302      	adds	r3, #2
 8002196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219a:	61bb      	str	r3, [r7, #24]
  /* USER CODE BEGIN TIM4_Init 1 */
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	220f      	movs	r2, #15
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]

 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a49      	ldr	r2, [pc, #292]	@ (80022dc <HAL_GPIO_Init+0x2f0>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d019      	beq.n	80021ee <HAL_GPIO_Init+0x202>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a48      	ldr	r2, [pc, #288]	@ (80022e0 <HAL_GPIO_Init+0x2f4>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d013      	beq.n	80021ea <HAL_GPIO_Init+0x1fe>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a47      	ldr	r2, [pc, #284]	@ (80022e4 <HAL_GPIO_Init+0x2f8>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d00d      	beq.n	80021e6 <HAL_GPIO_Init+0x1fa>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a46      	ldr	r2, [pc, #280]	@ (80022e8 <HAL_GPIO_Init+0x2fc>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d007      	beq.n	80021e2 <HAL_GPIO_Init+0x1f6>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a45      	ldr	r2, [pc, #276]	@ (80022ec <HAL_GPIO_Init+0x300>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d101      	bne.n	80021de <HAL_GPIO_Init+0x1f2>
 80021da:	2304      	movs	r3, #4
 80021dc:	e008      	b.n	80021f0 <HAL_GPIO_Init+0x204>
 80021de:	2307      	movs	r3, #7
 80021e0:	e006      	b.n	80021f0 <HAL_GPIO_Init+0x204>
 80021e2:	2303      	movs	r3, #3
 80021e4:	e004      	b.n	80021f0 <HAL_GPIO_Init+0x204>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e002      	b.n	80021f0 <HAL_GPIO_Init+0x204>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e000      	b.n	80021f0 <HAL_GPIO_Init+0x204>
 80021ee:	2300      	movs	r3, #0
 80021f0:	69fa      	ldr	r2, [r7, #28]
 80021f2:	f002 0203 	and.w	r2, r2, #3
 80021f6:	0092      	lsls	r2, r2, #2
 80021f8:	4093      	lsls	r3, r2
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
  /* USER CODE END TIM4_Init 1 */
 8002200:	4935      	ldr	r1, [pc, #212]	@ (80022d8 <HAL_GPIO_Init+0x2ec>)
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	089b      	lsrs	r3, r3, #2
 8002206:	3302      	adds	r3, #2
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 84-1;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800220e:	4b38      	ldr	r3, [pc, #224]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	61bb      	str	r3, [r7, #24]
  htim4.Init.Period = 20000-1;
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_GPIO_Init+0x246>
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
  {
    Error_Handler();
 8002232:	4a2f      	ldr	r2, [pc, #188]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	6093      	str	r3, [r2, #8]
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002238:	4b2d      	ldr	r3, [pc, #180]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
  {
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_GPIO_Init+0x270>
    Error_Handler();
  }
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	4313      	orrs	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
  {
 800225c:	4a24      	ldr	r2, [pc, #144]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	60d3      	str	r3, [r2, #12]
    Error_Handler();
  }
 8002262:	4b23      	ldr	r3, [pc, #140]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	43db      	mvns	r3, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4013      	ands	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_Init+0x29a>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
    Error_Handler();
  }
 8002286:	4a1a      	ldr	r2, [pc, #104]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	6053      	str	r3, [r2, #4]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800228c:	4b18      	ldr	r3, [pc, #96]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_GPIO_Init+0x2c4>
  {
    Error_Handler();
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
  }
  /* USER CODE BEGIN TIM4_Init 2 */
 80022b0:	4a0f      	ldr	r2, [pc, #60]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	6013      	str	r3, [r2, #0]
    /* USER CODE BEGIN 3 */
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3301      	adds	r3, #1
 80022ba:	61fb      	str	r3, [r7, #28]
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	2b0f      	cmp	r3, #15
 80022c0:	f67f aea2 	bls.w	8002008 <HAL_GPIO_Init+0x1c>

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);

 80022c4:	bf00      	nop
 80022c6:	bf00      	nop
 80022c8:	3724      	adds	r7, #36	@ 0x24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40013800 	.word	0x40013800
 80022dc:	40020000 	.word	0x40020000
 80022e0:	40020400 	.word	0x40020400
 80022e4:	40020800 	.word	0x40020800
 80022e8:	40020c00 	.word	0x40020c00
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40013c00 	.word	0x40013c00

080022f4 <HAL_GPIO_WritePin>:
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : plus_Pin minus_Pin */
  GPIO_InitStruct.Pin = plus_Pin|minus_Pin;
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	807b      	strh	r3, [r7, #2]
 8002300:	4613      	mov	r3, r2
 8002302:	707b      	strb	r3, [r7, #1]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
 8002304:	787b      	ldrb	r3, [r7, #1]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_WritePin+0x1e>
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800230a:	887a      	ldrh	r2, [r7, #2]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	619a      	str	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002310:	e003      	b.n	800231a <HAL_GPIO_WritePin+0x26>

 8002312:	887b      	ldrh	r3, [r7, #2]
 8002314:	041a      	lsls	r2, r3, #16
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	619a      	str	r2, [r3, #24]
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e267      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d075      	beq.n	8002432 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002346:	4b88      	ldr	r3, [pc, #544]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b04      	cmp	r3, #4
 8002350:	d00c      	beq.n	800236c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002352:	4b85      	ldr	r3, [pc, #532]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800235a:	2b08      	cmp	r3, #8
 800235c:	d112      	bne.n	8002384 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800235e:	4b82      	ldr	r3, [pc, #520]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002366:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800236a:	d10b      	bne.n	8002384 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800236c:	4b7e      	ldr	r3, [pc, #504]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d05b      	beq.n	8002430 <HAL_RCC_OscConfig+0x108>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d157      	bne.n	8002430 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e242      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800238c:	d106      	bne.n	800239c <HAL_RCC_OscConfig+0x74>
 800238e:	4b76      	ldr	r3, [pc, #472]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a75      	ldr	r2, [pc, #468]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 8002394:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	e01d      	b.n	80023d8 <HAL_RCC_OscConfig+0xb0>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x98>
 80023a6:	4b70      	ldr	r3, [pc, #448]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a6f      	ldr	r2, [pc, #444]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 80023ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a6c      	ldr	r2, [pc, #432]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 80023b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	e00b      	b.n	80023d8 <HAL_RCC_OscConfig+0xb0>
 80023c0:	4b69      	ldr	r3, [pc, #420]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a68      	ldr	r2, [pc, #416]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 80023c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	4b66      	ldr	r3, [pc, #408]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a65      	ldr	r2, [pc, #404]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 80023d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d013      	beq.n	8002408 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7ff f914 	bl	800160c <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e8:	f7ff f910 	bl	800160c <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b64      	cmp	r3, #100	@ 0x64
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e207      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fa:	4b5b      	ldr	r3, [pc, #364]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0xc0>
 8002406:	e014      	b.n	8002432 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7ff f900 	bl	800160c <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002410:	f7ff f8fc 	bl	800160c <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b64      	cmp	r3, #100	@ 0x64
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e1f3      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002422:	4b51      	ldr	r3, [pc, #324]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0xe8>
 800242e:	e000      	b.n	8002432 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d063      	beq.n	8002506 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800243e:	4b4a      	ldr	r3, [pc, #296]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 030c 	and.w	r3, r3, #12
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00b      	beq.n	8002462 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800244a:	4b47      	ldr	r3, [pc, #284]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002452:	2b08      	cmp	r3, #8
 8002454:	d11c      	bne.n	8002490 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002456:	4b44      	ldr	r3, [pc, #272]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d116      	bne.n	8002490 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002462:	4b41      	ldr	r3, [pc, #260]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d005      	beq.n	800247a <HAL_RCC_OscConfig+0x152>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d001      	beq.n	800247a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e1c7      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247a:	4b3b      	ldr	r3, [pc, #236]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	4937      	ldr	r1, [pc, #220]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248e:	e03a      	b.n	8002506 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d020      	beq.n	80024da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002498:	4b34      	ldr	r3, [pc, #208]	@ (800256c <HAL_RCC_OscConfig+0x244>)
 800249a:	2201      	movs	r2, #1
 800249c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249e:	f7ff f8b5 	bl	800160c <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a6:	f7ff f8b1 	bl	800160c <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e1a8      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c4:	4b28      	ldr	r3, [pc, #160]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4925      	ldr	r1, [pc, #148]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	600b      	str	r3, [r1, #0]
 80024d8:	e015      	b.n	8002506 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024da:	4b24      	ldr	r3, [pc, #144]	@ (800256c <HAL_RCC_OscConfig+0x244>)
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e0:	f7ff f894 	bl	800160c <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e8:	f7ff f890 	bl	800160c <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e187      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d036      	beq.n	8002580 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d016      	beq.n	8002548 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800251a:	4b15      	ldr	r3, [pc, #84]	@ (8002570 <HAL_RCC_OscConfig+0x248>)
 800251c:	2201      	movs	r2, #1
 800251e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002520:	f7ff f874 	bl	800160c <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002528:	f7ff f870 	bl	800160c <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e167      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253a:	4b0b      	ldr	r3, [pc, #44]	@ (8002568 <HAL_RCC_OscConfig+0x240>)
 800253c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0x200>
 8002546:	e01b      	b.n	8002580 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002548:	4b09      	ldr	r3, [pc, #36]	@ (8002570 <HAL_RCC_OscConfig+0x248>)
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254e:	f7ff f85d 	bl	800160c <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002554:	e00e      	b.n	8002574 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002556:	f7ff f859 	bl	800160c <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d907      	bls.n	8002574 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e150      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
 8002568:	40023800 	.word	0x40023800
 800256c:	42470000 	.word	0x42470000
 8002570:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002574:	4b88      	ldr	r3, [pc, #544]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 8002576:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1ea      	bne.n	8002556 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 8097 	beq.w	80026bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800258e:	2300      	movs	r3, #0
 8002590:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002592:	4b81      	ldr	r3, [pc, #516]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 8002594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10f      	bne.n	80025be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	4b7d      	ldr	r3, [pc, #500]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a6:	4a7c      	ldr	r2, [pc, #496]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 80025a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ae:	4b7a      	ldr	r3, [pc, #488]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025b6:	60bb      	str	r3, [r7, #8]
 80025b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ba:	2301      	movs	r3, #1
 80025bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025be:	4b77      	ldr	r3, [pc, #476]	@ (800279c <HAL_RCC_OscConfig+0x474>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d118      	bne.n	80025fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ca:	4b74      	ldr	r3, [pc, #464]	@ (800279c <HAL_RCC_OscConfig+0x474>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a73      	ldr	r2, [pc, #460]	@ (800279c <HAL_RCC_OscConfig+0x474>)
 80025d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025d6:	f7ff f819 	bl	800160c <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025de:	f7ff f815 	bl	800160c <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e10c      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f0:	4b6a      	ldr	r3, [pc, #424]	@ (800279c <HAL_RCC_OscConfig+0x474>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0f0      	beq.n	80025de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d106      	bne.n	8002612 <HAL_RCC_OscConfig+0x2ea>
 8002604:	4b64      	ldr	r3, [pc, #400]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 8002606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002608:	4a63      	ldr	r2, [pc, #396]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002610:	e01c      	b.n	800264c <HAL_RCC_OscConfig+0x324>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b05      	cmp	r3, #5
 8002618:	d10c      	bne.n	8002634 <HAL_RCC_OscConfig+0x30c>
 800261a:	4b5f      	ldr	r3, [pc, #380]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800261e:	4a5e      	ldr	r2, [pc, #376]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 8002620:	f043 0304 	orr.w	r3, r3, #4
 8002624:	6713      	str	r3, [r2, #112]	@ 0x70
 8002626:	4b5c      	ldr	r3, [pc, #368]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 8002628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800262a:	4a5b      	ldr	r2, [pc, #364]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	6713      	str	r3, [r2, #112]	@ 0x70
 8002632:	e00b      	b.n	800264c <HAL_RCC_OscConfig+0x324>
 8002634:	4b58      	ldr	r3, [pc, #352]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 8002636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002638:	4a57      	ldr	r2, [pc, #348]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 800263a:	f023 0301 	bic.w	r3, r3, #1
 800263e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002640:	4b55      	ldr	r3, [pc, #340]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 8002642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002644:	4a54      	ldr	r2, [pc, #336]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 8002646:	f023 0304 	bic.w	r3, r3, #4
 800264a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d015      	beq.n	8002680 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002654:	f7fe ffda 	bl	800160c <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800265a:	e00a      	b.n	8002672 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800265c:	f7fe ffd6 	bl	800160c <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800266a:	4293      	cmp	r3, r2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e0cb      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002672:	4b49      	ldr	r3, [pc, #292]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 8002674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0ee      	beq.n	800265c <HAL_RCC_OscConfig+0x334>
 800267e:	e014      	b.n	80026aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002680:	f7fe ffc4 	bl	800160c <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002686:	e00a      	b.n	800269e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002688:	f7fe ffc0 	bl	800160c <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002696:	4293      	cmp	r3, r2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e0b5      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269e:	4b3e      	ldr	r3, [pc, #248]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 80026a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1ee      	bne.n	8002688 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026aa:	7dfb      	ldrb	r3, [r7, #23]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d105      	bne.n	80026bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026b0:	4b39      	ldr	r3, [pc, #228]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 80026b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b4:	4a38      	ldr	r2, [pc, #224]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 80026b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 80a1 	beq.w	8002808 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026c6:	4b34      	ldr	r3, [pc, #208]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 030c 	and.w	r3, r3, #12
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d05c      	beq.n	800278c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d141      	bne.n	800275e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026da:	4b31      	ldr	r3, [pc, #196]	@ (80027a0 <HAL_RCC_OscConfig+0x478>)
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7fe ff94 	bl	800160c <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e8:	f7fe ff90 	bl	800160c <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e087      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fa:	4b27      	ldr	r3, [pc, #156]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69da      	ldr	r2, [r3, #28]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002714:	019b      	lsls	r3, r3, #6
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271c:	085b      	lsrs	r3, r3, #1
 800271e:	3b01      	subs	r3, #1
 8002720:	041b      	lsls	r3, r3, #16
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002728:	061b      	lsls	r3, r3, #24
 800272a:	491b      	ldr	r1, [pc, #108]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 800272c:	4313      	orrs	r3, r2
 800272e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002730:	4b1b      	ldr	r3, [pc, #108]	@ (80027a0 <HAL_RCC_OscConfig+0x478>)
 8002732:	2201      	movs	r2, #1
 8002734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002736:	f7fe ff69 	bl	800160c <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273e:	f7fe ff65 	bl	800160c <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e05c      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002750:	4b11      	ldr	r3, [pc, #68]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0f0      	beq.n	800273e <HAL_RCC_OscConfig+0x416>
 800275c:	e054      	b.n	8002808 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800275e:	4b10      	ldr	r3, [pc, #64]	@ (80027a0 <HAL_RCC_OscConfig+0x478>)
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002764:	f7fe ff52 	bl	800160c <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800276c:	f7fe ff4e 	bl	800160c <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e045      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277e:	4b06      	ldr	r3, [pc, #24]	@ (8002798 <HAL_RCC_OscConfig+0x470>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f0      	bne.n	800276c <HAL_RCC_OscConfig+0x444>
 800278a:	e03d      	b.n	8002808 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d107      	bne.n	80027a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e038      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
 8002798:	40023800 	.word	0x40023800
 800279c:	40007000 	.word	0x40007000
 80027a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002814 <HAL_RCC_OscConfig+0x4ec>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d028      	beq.n	8002804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027bc:	429a      	cmp	r2, r3
 80027be:	d121      	bne.n	8002804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d11a      	bne.n	8002804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80027d4:	4013      	ands	r3, r2
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80027da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027dc:	4293      	cmp	r3, r2
 80027de:	d111      	bne.n	8002804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ea:	085b      	lsrs	r3, r3, #1
 80027ec:	3b01      	subs	r3, #1
 80027ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d107      	bne.n	8002804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002800:	429a      	cmp	r2, r3
 8002802:	d001      	beq.n	8002808 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e000      	b.n	800280a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40023800 	.word	0x40023800

08002818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0cc      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800282c:	4b68      	ldr	r3, [pc, #416]	@ (80029d0 <HAL_RCC_ClockConfig+0x1b8>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d90c      	bls.n	8002854 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283a:	4b65      	ldr	r3, [pc, #404]	@ (80029d0 <HAL_RCC_ClockConfig+0x1b8>)
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002842:	4b63      	ldr	r3, [pc, #396]	@ (80029d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0b8      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d020      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800286c:	4b59      	ldr	r3, [pc, #356]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	4a58      	ldr	r2, [pc, #352]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002876:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002884:	4b53      	ldr	r3, [pc, #332]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	4a52      	ldr	r2, [pc, #328]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800288e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002890:	4b50      	ldr	r3, [pc, #320]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	494d      	ldr	r1, [pc, #308]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d044      	beq.n	8002938 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d107      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b6:	4b47      	ldr	r3, [pc, #284]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d119      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e07f      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d003      	beq.n	80028d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d107      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d6:	4b3f      	ldr	r3, [pc, #252]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d109      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e06f      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e6:	4b3b      	ldr	r3, [pc, #236]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e067      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028f6:	4b37      	ldr	r3, [pc, #220]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f023 0203 	bic.w	r2, r3, #3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	4934      	ldr	r1, [pc, #208]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002904:	4313      	orrs	r3, r2
 8002906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002908:	f7fe fe80 	bl	800160c <HAL_GetTick>
 800290c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290e:	e00a      	b.n	8002926 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002910:	f7fe fe7c 	bl	800160c <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800291e:	4293      	cmp	r3, r2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e04f      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002926:	4b2b      	ldr	r3, [pc, #172]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 020c 	and.w	r2, r3, #12
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	429a      	cmp	r2, r3
 8002936:	d1eb      	bne.n	8002910 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002938:	4b25      	ldr	r3, [pc, #148]	@ (80029d0 <HAL_RCC_ClockConfig+0x1b8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d20c      	bcs.n	8002960 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002946:	4b22      	ldr	r3, [pc, #136]	@ (80029d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800294e:	4b20      	ldr	r3, [pc, #128]	@ (80029d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e032      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800296c:	4b19      	ldr	r3, [pc, #100]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	4916      	ldr	r1, [pc, #88]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	4313      	orrs	r3, r2
 800297c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d009      	beq.n	800299e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800298a:	4b12      	ldr	r3, [pc, #72]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	490e      	ldr	r1, [pc, #56]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	4313      	orrs	r3, r2
 800299c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800299e:	f000 f821 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 80029a2:	4602      	mov	r2, r0
 80029a4:	4b0b      	ldr	r3, [pc, #44]	@ (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	091b      	lsrs	r3, r3, #4
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	490a      	ldr	r1, [pc, #40]	@ (80029d8 <HAL_RCC_ClockConfig+0x1c0>)
 80029b0:	5ccb      	ldrb	r3, [r1, r3]
 80029b2:	fa22 f303 	lsr.w	r3, r2, r3
 80029b6:	4a09      	ldr	r2, [pc, #36]	@ (80029dc <HAL_RCC_ClockConfig+0x1c4>)
 80029b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80029ba:	4b09      	ldr	r3, [pc, #36]	@ (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe fc18 	bl	80011f4 <HAL_InitTick>

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40023c00 	.word	0x40023c00
 80029d4:	40023800 	.word	0x40023800
 80029d8:	08007848 	.word	0x08007848
 80029dc:	20000004 	.word	0x20000004
 80029e0:	20000008 	.word	0x20000008

080029e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029e8:	b094      	sub	sp, #80	@ 0x50
 80029ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029fc:	4b79      	ldr	r3, [pc, #484]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0x200>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 030c 	and.w	r3, r3, #12
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d00d      	beq.n	8002a24 <HAL_RCC_GetSysClockFreq+0x40>
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	f200 80e1 	bhi.w	8002bd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d002      	beq.n	8002a18 <HAL_RCC_GetSysClockFreq+0x34>
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d003      	beq.n	8002a1e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a16:	e0db      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a18:	4b73      	ldr	r3, [pc, #460]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a1c:	e0db      	b.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a1e:	4b73      	ldr	r3, [pc, #460]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x208>)
 8002a20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a22:	e0d8      	b.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a24:	4b6f      	ldr	r3, [pc, #444]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a2c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a2e:	4b6d      	ldr	r3, [pc, #436]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d063      	beq.n	8002b02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a3a:	4b6a      	ldr	r3, [pc, #424]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	099b      	lsrs	r3, r3, #6
 8002a40:	2200      	movs	r2, #0
 8002a42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a44:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a4e:	2300      	movs	r3, #0
 8002a50:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a56:	4622      	mov	r2, r4
 8002a58:	462b      	mov	r3, r5
 8002a5a:	f04f 0000 	mov.w	r0, #0
 8002a5e:	f04f 0100 	mov.w	r1, #0
 8002a62:	0159      	lsls	r1, r3, #5
 8002a64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a68:	0150      	lsls	r0, r2, #5
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4621      	mov	r1, r4
 8002a70:	1a51      	subs	r1, r2, r1
 8002a72:	6139      	str	r1, [r7, #16]
 8002a74:	4629      	mov	r1, r5
 8002a76:	eb63 0301 	sbc.w	r3, r3, r1
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a88:	4659      	mov	r1, fp
 8002a8a:	018b      	lsls	r3, r1, #6
 8002a8c:	4651      	mov	r1, sl
 8002a8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a92:	4651      	mov	r1, sl
 8002a94:	018a      	lsls	r2, r1, #6
 8002a96:	4651      	mov	r1, sl
 8002a98:	ebb2 0801 	subs.w	r8, r2, r1
 8002a9c:	4659      	mov	r1, fp
 8002a9e:	eb63 0901 	sbc.w	r9, r3, r1
 8002aa2:	f04f 0200 	mov.w	r2, #0
 8002aa6:	f04f 0300 	mov.w	r3, #0
 8002aaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002aae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ab2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ab6:	4690      	mov	r8, r2
 8002ab8:	4699      	mov	r9, r3
 8002aba:	4623      	mov	r3, r4
 8002abc:	eb18 0303 	adds.w	r3, r8, r3
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	462b      	mov	r3, r5
 8002ac4:	eb49 0303 	adc.w	r3, r9, r3
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	f04f 0200 	mov.w	r2, #0
 8002ace:	f04f 0300 	mov.w	r3, #0
 8002ad2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ad6:	4629      	mov	r1, r5
 8002ad8:	024b      	lsls	r3, r1, #9
 8002ada:	4621      	mov	r1, r4
 8002adc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ae0:	4621      	mov	r1, r4
 8002ae2:	024a      	lsls	r2, r1, #9
 8002ae4:	4610      	mov	r0, r2
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aea:	2200      	movs	r2, #0
 8002aec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002aee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002af0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002af4:	f7fd fbc4 	bl	8000280 <__aeabi_uldivmod>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4613      	mov	r3, r2
 8002afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b00:	e058      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b02:	4b38      	ldr	r3, [pc, #224]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	099b      	lsrs	r3, r3, #6
 8002b08:	2200      	movs	r2, #0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	4611      	mov	r1, r2
 8002b0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b12:	623b      	str	r3, [r7, #32]
 8002b14:	2300      	movs	r3, #0
 8002b16:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b1c:	4642      	mov	r2, r8
 8002b1e:	464b      	mov	r3, r9
 8002b20:	f04f 0000 	mov.w	r0, #0
 8002b24:	f04f 0100 	mov.w	r1, #0
 8002b28:	0159      	lsls	r1, r3, #5
 8002b2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b2e:	0150      	lsls	r0, r2, #5
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	4641      	mov	r1, r8
 8002b36:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b3a:	4649      	mov	r1, r9
 8002b3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	f04f 0300 	mov.w	r3, #0
 8002b48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b54:	ebb2 040a 	subs.w	r4, r2, sl
 8002b58:	eb63 050b 	sbc.w	r5, r3, fp
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	f04f 0300 	mov.w	r3, #0
 8002b64:	00eb      	lsls	r3, r5, #3
 8002b66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b6a:	00e2      	lsls	r2, r4, #3
 8002b6c:	4614      	mov	r4, r2
 8002b6e:	461d      	mov	r5, r3
 8002b70:	4643      	mov	r3, r8
 8002b72:	18e3      	adds	r3, r4, r3
 8002b74:	603b      	str	r3, [r7, #0]
 8002b76:	464b      	mov	r3, r9
 8002b78:	eb45 0303 	adc.w	r3, r5, r3
 8002b7c:	607b      	str	r3, [r7, #4]
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	f04f 0300 	mov.w	r3, #0
 8002b86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b8a:	4629      	mov	r1, r5
 8002b8c:	028b      	lsls	r3, r1, #10
 8002b8e:	4621      	mov	r1, r4
 8002b90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b94:	4621      	mov	r1, r4
 8002b96:	028a      	lsls	r2, r1, #10
 8002b98:	4610      	mov	r0, r2
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	61bb      	str	r3, [r7, #24]
 8002ba2:	61fa      	str	r2, [r7, #28]
 8002ba4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ba8:	f7fd fb6a 	bl	8000280 <__aeabi_uldivmod>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	0c1b      	lsrs	r3, r3, #16
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002bc4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002bc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bcc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bce:	e002      	b.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bd0:	4b05      	ldr	r3, [pc, #20]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3750      	adds	r7, #80	@ 0x50
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002be2:	bf00      	nop
 8002be4:	40023800 	.word	0x40023800
 8002be8:	00f42400 	.word	0x00f42400
 8002bec:	007a1200 	.word	0x007a1200

08002bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bf4:	4b03      	ldr	r3, [pc, #12]	@ (8002c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	20000004 	.word	0x20000004

08002c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c0c:	f7ff fff0 	bl	8002bf0 <HAL_RCC_GetHCLKFreq>
 8002c10:	4602      	mov	r2, r0
 8002c12:	4b05      	ldr	r3, [pc, #20]	@ (8002c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	0a9b      	lsrs	r3, r3, #10
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	4903      	ldr	r1, [pc, #12]	@ (8002c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c1e:	5ccb      	ldrb	r3, [r1, r3]
 8002c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	08007858 	.word	0x08007858

08002c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c34:	f7ff ffdc 	bl	8002bf0 <HAL_RCC_GetHCLKFreq>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	4b05      	ldr	r3, [pc, #20]	@ (8002c50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	0b5b      	lsrs	r3, r3, #13
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	4903      	ldr	r1, [pc, #12]	@ (8002c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c46:	5ccb      	ldrb	r3, [r1, r3]
 8002c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40023800 	.word	0x40023800
 8002c54:	08007858 	.word	0x08007858

08002c58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	220f      	movs	r2, #15
 8002c66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c68:	4b12      	ldr	r3, [pc, #72]	@ (8002cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 0203 	and.w	r2, r3, #3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c74:	4b0f      	ldr	r3, [pc, #60]	@ (8002cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c80:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002c8c:	4b09      	ldr	r3, [pc, #36]	@ (8002cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	08db      	lsrs	r3, r3, #3
 8002c92:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c9a:	4b07      	ldr	r3, [pc, #28]	@ (8002cb8 <HAL_RCC_GetClockConfig+0x60>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0207 	and.w	r2, r3, #7
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	601a      	str	r2, [r3, #0]
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	40023c00 	.word	0x40023c00

08002cbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e041      	b.n	8002d52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d106      	bne.n	8002ce8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7fe f932 	bl	8000f4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2202      	movs	r2, #2
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	f000 fc3c 	bl	8003578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d001      	beq.n	8002d74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e044      	b.n	8002dfe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2202      	movs	r2, #2
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0201 	orr.w	r2, r2, #1
 8002d8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a1e      	ldr	r2, [pc, #120]	@ (8002e0c <HAL_TIM_Base_Start_IT+0xb0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d018      	beq.n	8002dc8 <HAL_TIM_Base_Start_IT+0x6c>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d9e:	d013      	beq.n	8002dc8 <HAL_TIM_Base_Start_IT+0x6c>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a1a      	ldr	r2, [pc, #104]	@ (8002e10 <HAL_TIM_Base_Start_IT+0xb4>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d00e      	beq.n	8002dc8 <HAL_TIM_Base_Start_IT+0x6c>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a19      	ldr	r2, [pc, #100]	@ (8002e14 <HAL_TIM_Base_Start_IT+0xb8>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d009      	beq.n	8002dc8 <HAL_TIM_Base_Start_IT+0x6c>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a17      	ldr	r2, [pc, #92]	@ (8002e18 <HAL_TIM_Base_Start_IT+0xbc>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d004      	beq.n	8002dc8 <HAL_TIM_Base_Start_IT+0x6c>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a16      	ldr	r2, [pc, #88]	@ (8002e1c <HAL_TIM_Base_Start_IT+0xc0>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d111      	bne.n	8002dec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2b06      	cmp	r3, #6
 8002dd8:	d010      	beq.n	8002dfc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f042 0201 	orr.w	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dea:	e007      	b.n	8002dfc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0201 	orr.w	r2, r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	40010000 	.word	0x40010000
 8002e10:	40000400 	.word	0x40000400
 8002e14:	40000800 	.word	0x40000800
 8002e18:	40000c00 	.word	0x40000c00
 8002e1c:	40014000 	.word	0x40014000

08002e20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e041      	b.n	8002eb6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d106      	bne.n	8002e4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f839 	bl	8002ebe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4610      	mov	r0, r2
 8002e60:	f000 fb8a 	bl	8003578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
	...

08002ed4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d109      	bne.n	8002ef8 <HAL_TIM_PWM_Start+0x24>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	bf14      	ite	ne
 8002ef0:	2301      	movne	r3, #1
 8002ef2:	2300      	moveq	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	e022      	b.n	8002f3e <HAL_TIM_PWM_Start+0x6a>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d109      	bne.n	8002f12 <HAL_TIM_PWM_Start+0x3e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	bf14      	ite	ne
 8002f0a:	2301      	movne	r3, #1
 8002f0c:	2300      	moveq	r3, #0
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	e015      	b.n	8002f3e <HAL_TIM_PWM_Start+0x6a>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d109      	bne.n	8002f2c <HAL_TIM_PWM_Start+0x58>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	bf14      	ite	ne
 8002f24:	2301      	movne	r3, #1
 8002f26:	2300      	moveq	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	e008      	b.n	8002f3e <HAL_TIM_PWM_Start+0x6a>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	bf14      	ite	ne
 8002f38:	2301      	movne	r3, #1
 8002f3a:	2300      	moveq	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e068      	b.n	8003018 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d104      	bne.n	8002f56 <HAL_TIM_PWM_Start+0x82>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f54:	e013      	b.n	8002f7e <HAL_TIM_PWM_Start+0xaa>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	d104      	bne.n	8002f66 <HAL_TIM_PWM_Start+0x92>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f64:	e00b      	b.n	8002f7e <HAL_TIM_PWM_Start+0xaa>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d104      	bne.n	8002f76 <HAL_TIM_PWM_Start+0xa2>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f74:	e003      	b.n	8002f7e <HAL_TIM_PWM_Start+0xaa>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2202      	movs	r2, #2
 8002f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2201      	movs	r2, #1
 8002f84:	6839      	ldr	r1, [r7, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 fda2 	bl	8003ad0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a23      	ldr	r2, [pc, #140]	@ (8003020 <HAL_TIM_PWM_Start+0x14c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d107      	bne.n	8002fa6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fa4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a1d      	ldr	r2, [pc, #116]	@ (8003020 <HAL_TIM_PWM_Start+0x14c>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d018      	beq.n	8002fe2 <HAL_TIM_PWM_Start+0x10e>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fb8:	d013      	beq.n	8002fe2 <HAL_TIM_PWM_Start+0x10e>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a19      	ldr	r2, [pc, #100]	@ (8003024 <HAL_TIM_PWM_Start+0x150>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d00e      	beq.n	8002fe2 <HAL_TIM_PWM_Start+0x10e>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a17      	ldr	r2, [pc, #92]	@ (8003028 <HAL_TIM_PWM_Start+0x154>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d009      	beq.n	8002fe2 <HAL_TIM_PWM_Start+0x10e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a16      	ldr	r2, [pc, #88]	@ (800302c <HAL_TIM_PWM_Start+0x158>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d004      	beq.n	8002fe2 <HAL_TIM_PWM_Start+0x10e>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a14      	ldr	r2, [pc, #80]	@ (8003030 <HAL_TIM_PWM_Start+0x15c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d111      	bne.n	8003006 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2b06      	cmp	r3, #6
 8002ff2:	d010      	beq.n	8003016 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0201 	orr.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003004:	e007      	b.n	8003016 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 0201 	orr.w	r2, r2, #1
 8003014:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40010000 	.word	0x40010000
 8003024:	40000400 	.word	0x40000400
 8003028:	40000800 	.word	0x40000800
 800302c:	40000c00 	.word	0x40000c00
 8003030:	40014000 	.word	0x40014000

08003034 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d020      	beq.n	8003098 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d01b      	beq.n	8003098 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f06f 0202 	mvn.w	r2, #2
 8003068:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 fa5b 	bl	800353a <HAL_TIM_IC_CaptureCallback>
 8003084:	e005      	b.n	8003092 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fa4d 	bl	8003526 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fa5e 	bl	800354e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f003 0304 	and.w	r3, r3, #4
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d020      	beq.n	80030e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d01b      	beq.n	80030e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f06f 0204 	mvn.w	r2, #4
 80030b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2202      	movs	r2, #2
 80030ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fa35 	bl	800353a <HAL_TIM_IC_CaptureCallback>
 80030d0:	e005      	b.n	80030de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fa27 	bl	8003526 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 fa38 	bl	800354e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d020      	beq.n	8003130 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d01b      	beq.n	8003130 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f06f 0208 	mvn.w	r2, #8
 8003100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2204      	movs	r2, #4
 8003106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 fa0f 	bl	800353a <HAL_TIM_IC_CaptureCallback>
 800311c:	e005      	b.n	800312a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 fa01 	bl	8003526 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 fa12 	bl	800354e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f003 0310 	and.w	r3, r3, #16
 8003136:	2b00      	cmp	r3, #0
 8003138:	d020      	beq.n	800317c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f003 0310 	and.w	r3, r3, #16
 8003140:	2b00      	cmp	r3, #0
 8003142:	d01b      	beq.n	800317c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f06f 0210 	mvn.w	r2, #16
 800314c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2208      	movs	r2, #8
 8003152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f9e9 	bl	800353a <HAL_TIM_IC_CaptureCallback>
 8003168:	e005      	b.n	8003176 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f9db 	bl	8003526 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f9ec 	bl	800354e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00c      	beq.n	80031a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d007      	beq.n	80031a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0201 	mvn.w	r2, #1
 8003198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7fd fe8a 	bl	8000eb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00c      	beq.n	80031c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d007      	beq.n	80031c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80031bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 fd24 	bl	8003c0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00c      	beq.n	80031e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d007      	beq.n	80031e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80031e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f9bd 	bl	8003562 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f003 0320 	and.w	r3, r3, #32
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00c      	beq.n	800320c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f003 0320 	and.w	r3, r3, #32
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d007      	beq.n	800320c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f06f 0220 	mvn.w	r2, #32
 8003204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 fcf6 	bl	8003bf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800320c:	bf00      	nop
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003220:	2300      	movs	r3, #0
 8003222:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800322e:	2302      	movs	r3, #2
 8003230:	e0ae      	b.n	8003390 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b0c      	cmp	r3, #12
 800323e:	f200 809f 	bhi.w	8003380 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003242:	a201      	add	r2, pc, #4	@ (adr r2, 8003248 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003248:	0800327d 	.word	0x0800327d
 800324c:	08003381 	.word	0x08003381
 8003250:	08003381 	.word	0x08003381
 8003254:	08003381 	.word	0x08003381
 8003258:	080032bd 	.word	0x080032bd
 800325c:	08003381 	.word	0x08003381
 8003260:	08003381 	.word	0x08003381
 8003264:	08003381 	.word	0x08003381
 8003268:	080032ff 	.word	0x080032ff
 800326c:	08003381 	.word	0x08003381
 8003270:	08003381 	.word	0x08003381
 8003274:	08003381 	.word	0x08003381
 8003278:	0800333f 	.word	0x0800333f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68b9      	ldr	r1, [r7, #8]
 8003282:	4618      	mov	r0, r3
 8003284:	f000 f9fe 	bl	8003684 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699a      	ldr	r2, [r3, #24]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0208 	orr.w	r2, r2, #8
 8003296:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699a      	ldr	r2, [r3, #24]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0204 	bic.w	r2, r2, #4
 80032a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6999      	ldr	r1, [r3, #24]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	691a      	ldr	r2, [r3, #16]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	619a      	str	r2, [r3, #24]
      break;
 80032ba:	e064      	b.n	8003386 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68b9      	ldr	r1, [r7, #8]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 fa44 	bl	8003750 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699a      	ldr	r2, [r3, #24]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6999      	ldr	r1, [r3, #24]
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	021a      	lsls	r2, r3, #8
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	619a      	str	r2, [r3, #24]
      break;
 80032fc:	e043      	b.n	8003386 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68b9      	ldr	r1, [r7, #8]
 8003304:	4618      	mov	r0, r3
 8003306:	f000 fa8f 	bl	8003828 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	69da      	ldr	r2, [r3, #28]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f042 0208 	orr.w	r2, r2, #8
 8003318:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	69da      	ldr	r2, [r3, #28]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0204 	bic.w	r2, r2, #4
 8003328:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69d9      	ldr	r1, [r3, #28]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	691a      	ldr	r2, [r3, #16]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	61da      	str	r2, [r3, #28]
      break;
 800333c:	e023      	b.n	8003386 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68b9      	ldr	r1, [r7, #8]
 8003344:	4618      	mov	r0, r3
 8003346:	f000 fad9 	bl	80038fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69da      	ldr	r2, [r3, #28]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003358:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69da      	ldr	r2, [r3, #28]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003368:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	69d9      	ldr	r1, [r3, #28]
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	021a      	lsls	r2, r3, #8
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	61da      	str	r2, [r3, #28]
      break;
 800337e:	e002      	b.n	8003386 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	75fb      	strb	r3, [r7, #23]
      break;
 8003384:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800338e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003390:	4618      	mov	r0, r3
 8003392:	3718      	adds	r7, #24
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_TIM_ConfigClockSource+0x1c>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e0b4      	b.n	800351e <HAL_TIM_ConfigClockSource+0x186>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80033d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80033da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033ec:	d03e      	beq.n	800346c <HAL_TIM_ConfigClockSource+0xd4>
 80033ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033f2:	f200 8087 	bhi.w	8003504 <HAL_TIM_ConfigClockSource+0x16c>
 80033f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033fa:	f000 8086 	beq.w	800350a <HAL_TIM_ConfigClockSource+0x172>
 80033fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003402:	d87f      	bhi.n	8003504 <HAL_TIM_ConfigClockSource+0x16c>
 8003404:	2b70      	cmp	r3, #112	@ 0x70
 8003406:	d01a      	beq.n	800343e <HAL_TIM_ConfigClockSource+0xa6>
 8003408:	2b70      	cmp	r3, #112	@ 0x70
 800340a:	d87b      	bhi.n	8003504 <HAL_TIM_ConfigClockSource+0x16c>
 800340c:	2b60      	cmp	r3, #96	@ 0x60
 800340e:	d050      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0x11a>
 8003410:	2b60      	cmp	r3, #96	@ 0x60
 8003412:	d877      	bhi.n	8003504 <HAL_TIM_ConfigClockSource+0x16c>
 8003414:	2b50      	cmp	r3, #80	@ 0x50
 8003416:	d03c      	beq.n	8003492 <HAL_TIM_ConfigClockSource+0xfa>
 8003418:	2b50      	cmp	r3, #80	@ 0x50
 800341a:	d873      	bhi.n	8003504 <HAL_TIM_ConfigClockSource+0x16c>
 800341c:	2b40      	cmp	r3, #64	@ 0x40
 800341e:	d058      	beq.n	80034d2 <HAL_TIM_ConfigClockSource+0x13a>
 8003420:	2b40      	cmp	r3, #64	@ 0x40
 8003422:	d86f      	bhi.n	8003504 <HAL_TIM_ConfigClockSource+0x16c>
 8003424:	2b30      	cmp	r3, #48	@ 0x30
 8003426:	d064      	beq.n	80034f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003428:	2b30      	cmp	r3, #48	@ 0x30
 800342a:	d86b      	bhi.n	8003504 <HAL_TIM_ConfigClockSource+0x16c>
 800342c:	2b20      	cmp	r3, #32
 800342e:	d060      	beq.n	80034f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003430:	2b20      	cmp	r3, #32
 8003432:	d867      	bhi.n	8003504 <HAL_TIM_ConfigClockSource+0x16c>
 8003434:	2b00      	cmp	r3, #0
 8003436:	d05c      	beq.n	80034f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003438:	2b10      	cmp	r3, #16
 800343a:	d05a      	beq.n	80034f2 <HAL_TIM_ConfigClockSource+0x15a>
 800343c:	e062      	b.n	8003504 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800344e:	f000 fb1f 	bl	8003a90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003460:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	609a      	str	r2, [r3, #8]
      break;
 800346a:	e04f      	b.n	800350c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800347c:	f000 fb08 	bl	8003a90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800348e:	609a      	str	r2, [r3, #8]
      break;
 8003490:	e03c      	b.n	800350c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800349e:	461a      	mov	r2, r3
 80034a0:	f000 fa7c 	bl	800399c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2150      	movs	r1, #80	@ 0x50
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fad5 	bl	8003a5a <TIM_ITRx_SetConfig>
      break;
 80034b0:	e02c      	b.n	800350c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034be:	461a      	mov	r2, r3
 80034c0:	f000 fa9b 	bl	80039fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2160      	movs	r1, #96	@ 0x60
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fac5 	bl	8003a5a <TIM_ITRx_SetConfig>
      break;
 80034d0:	e01c      	b.n	800350c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034de:	461a      	mov	r2, r3
 80034e0:	f000 fa5c 	bl	800399c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2140      	movs	r1, #64	@ 0x40
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 fab5 	bl	8003a5a <TIM_ITRx_SetConfig>
      break;
 80034f0:	e00c      	b.n	800350c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4619      	mov	r1, r3
 80034fc:	4610      	mov	r0, r2
 80034fe:	f000 faac 	bl	8003a5a <TIM_ITRx_SetConfig>
      break;
 8003502:	e003      	b.n	800350c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	73fb      	strb	r3, [r7, #15]
      break;
 8003508:	e000      	b.n	800350c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800350a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800351c:	7bfb      	ldrb	r3, [r7, #15]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003562:	b480      	push	{r7}
 8003564:	b083      	sub	sp, #12
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
	...

08003578 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a37      	ldr	r2, [pc, #220]	@ (8003668 <TIM_Base_SetConfig+0xf0>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d00f      	beq.n	80035b0 <TIM_Base_SetConfig+0x38>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003596:	d00b      	beq.n	80035b0 <TIM_Base_SetConfig+0x38>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a34      	ldr	r2, [pc, #208]	@ (800366c <TIM_Base_SetConfig+0xf4>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d007      	beq.n	80035b0 <TIM_Base_SetConfig+0x38>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a33      	ldr	r2, [pc, #204]	@ (8003670 <TIM_Base_SetConfig+0xf8>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d003      	beq.n	80035b0 <TIM_Base_SetConfig+0x38>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a32      	ldr	r2, [pc, #200]	@ (8003674 <TIM_Base_SetConfig+0xfc>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d108      	bne.n	80035c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a28      	ldr	r2, [pc, #160]	@ (8003668 <TIM_Base_SetConfig+0xf0>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d01b      	beq.n	8003602 <TIM_Base_SetConfig+0x8a>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035d0:	d017      	beq.n	8003602 <TIM_Base_SetConfig+0x8a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a25      	ldr	r2, [pc, #148]	@ (800366c <TIM_Base_SetConfig+0xf4>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d013      	beq.n	8003602 <TIM_Base_SetConfig+0x8a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a24      	ldr	r2, [pc, #144]	@ (8003670 <TIM_Base_SetConfig+0xf8>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d00f      	beq.n	8003602 <TIM_Base_SetConfig+0x8a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a23      	ldr	r2, [pc, #140]	@ (8003674 <TIM_Base_SetConfig+0xfc>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d00b      	beq.n	8003602 <TIM_Base_SetConfig+0x8a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a22      	ldr	r2, [pc, #136]	@ (8003678 <TIM_Base_SetConfig+0x100>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d007      	beq.n	8003602 <TIM_Base_SetConfig+0x8a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a21      	ldr	r2, [pc, #132]	@ (800367c <TIM_Base_SetConfig+0x104>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d003      	beq.n	8003602 <TIM_Base_SetConfig+0x8a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a20      	ldr	r2, [pc, #128]	@ (8003680 <TIM_Base_SetConfig+0x108>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d108      	bne.n	8003614 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003608:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	4313      	orrs	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	4313      	orrs	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a0c      	ldr	r2, [pc, #48]	@ (8003668 <TIM_Base_SetConfig+0xf0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d103      	bne.n	8003642 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	691a      	ldr	r2, [r3, #16]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f043 0204 	orr.w	r2, r3, #4
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	601a      	str	r2, [r3, #0]
}
 800365a:	bf00      	nop
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40010000 	.word	0x40010000
 800366c:	40000400 	.word	0x40000400
 8003670:	40000800 	.word	0x40000800
 8003674:	40000c00 	.word	0x40000c00
 8003678:	40014000 	.word	0x40014000
 800367c:	40014400 	.word	0x40014400
 8003680:	40014800 	.word	0x40014800

08003684 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	f023 0201 	bic.w	r2, r3, #1
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f023 0303 	bic.w	r3, r3, #3
 80036ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f023 0302 	bic.w	r3, r3, #2
 80036cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a1c      	ldr	r2, [pc, #112]	@ (800374c <TIM_OC1_SetConfig+0xc8>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d10c      	bne.n	80036fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f023 0308 	bic.w	r3, r3, #8
 80036e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f023 0304 	bic.w	r3, r3, #4
 80036f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a13      	ldr	r2, [pc, #76]	@ (800374c <TIM_OC1_SetConfig+0xc8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d111      	bne.n	8003726 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	4313      	orrs	r3, r2
 800371a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	4313      	orrs	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	621a      	str	r2, [r3, #32]
}
 8003740:	bf00      	nop
 8003742:	371c      	adds	r7, #28
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	40010000 	.word	0x40010000

08003750 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	f023 0210 	bic.w	r2, r3, #16
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800377e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	021b      	lsls	r3, r3, #8
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4313      	orrs	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f023 0320 	bic.w	r3, r3, #32
 800379a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a1e      	ldr	r2, [pc, #120]	@ (8003824 <TIM_OC2_SetConfig+0xd4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d10d      	bne.n	80037cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a15      	ldr	r2, [pc, #84]	@ (8003824 <TIM_OC2_SetConfig+0xd4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d113      	bne.n	80037fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80037e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	621a      	str	r2, [r3, #32]
}
 8003816:	bf00      	nop
 8003818:	371c      	adds	r7, #28
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40010000 	.word	0x40010000

08003828 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f023 0303 	bic.w	r3, r3, #3
 800385e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	021b      	lsls	r3, r3, #8
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	4313      	orrs	r3, r2
 800387c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a1d      	ldr	r2, [pc, #116]	@ (80038f8 <TIM_OC3_SetConfig+0xd0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d10d      	bne.n	80038a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800388c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	021b      	lsls	r3, r3, #8
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	4313      	orrs	r3, r2
 8003898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80038a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a14      	ldr	r2, [pc, #80]	@ (80038f8 <TIM_OC3_SetConfig+0xd0>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d113      	bne.n	80038d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80038b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80038b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	621a      	str	r2, [r3, #32]
}
 80038ec:	bf00      	nop
 80038ee:	371c      	adds	r7, #28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	40010000 	.word	0x40010000

080038fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800392a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	021b      	lsls	r3, r3, #8
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	4313      	orrs	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003946:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	031b      	lsls	r3, r3, #12
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a10      	ldr	r2, [pc, #64]	@ (8003998 <TIM_OC4_SetConfig+0x9c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d109      	bne.n	8003970 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003962:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	019b      	lsls	r3, r3, #6
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	4313      	orrs	r3, r2
 800396e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	621a      	str	r2, [r3, #32]
}
 800398a:	bf00      	nop
 800398c:	371c      	adds	r7, #28
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40010000 	.word	0x40010000

0800399c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800399c:	b480      	push	{r7}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	f023 0201 	bic.w	r2, r3, #1
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f023 030a 	bic.w	r3, r3, #10
 80039d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	4313      	orrs	r3, r2
 80039e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	621a      	str	r2, [r3, #32]
}
 80039ee:	bf00      	nop
 80039f0:	371c      	adds	r7, #28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b087      	sub	sp, #28
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	60f8      	str	r0, [r7, #12]
 8003a02:	60b9      	str	r1, [r7, #8]
 8003a04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	f023 0210 	bic.w	r2, r3, #16
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	031b      	lsls	r3, r3, #12
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003a36:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	621a      	str	r2, [r3, #32]
}
 8003a4e:	bf00      	nop
 8003a50:	371c      	adds	r7, #28
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b085      	sub	sp, #20
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
 8003a62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f043 0307 	orr.w	r3, r3, #7
 8003a7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	609a      	str	r2, [r3, #8]
}
 8003a84:	bf00      	nop
 8003a86:	3714      	adds	r7, #20
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
 8003a9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003aaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	021a      	lsls	r2, r3, #8
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	609a      	str	r2, [r3, #8]
}
 8003ac4:	bf00      	nop
 8003ac6:	371c      	adds	r7, #28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	f003 031f 	and.w	r3, r3, #31
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6a1a      	ldr	r2, [r3, #32]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	43db      	mvns	r3, r3
 8003af2:	401a      	ands	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a1a      	ldr	r2, [r3, #32]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f003 031f 	and.w	r3, r3, #31
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	fa01 f303 	lsl.w	r3, r1, r3
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	621a      	str	r2, [r3, #32]
}
 8003b0e:	bf00      	nop
 8003b10:	371c      	adds	r7, #28
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
	...

08003b1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d101      	bne.n	8003b34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b30:	2302      	movs	r3, #2
 8003b32:	e050      	b.n	8003bd6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a1c      	ldr	r2, [pc, #112]	@ (8003be4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d018      	beq.n	8003baa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b80:	d013      	beq.n	8003baa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a18      	ldr	r2, [pc, #96]	@ (8003be8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d00e      	beq.n	8003baa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a16      	ldr	r2, [pc, #88]	@ (8003bec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d009      	beq.n	8003baa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a15      	ldr	r2, [pc, #84]	@ (8003bf0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d004      	beq.n	8003baa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a13      	ldr	r2, [pc, #76]	@ (8003bf4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d10c      	bne.n	8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40010000 	.word	0x40010000
 8003be8:	40000400 	.word	0x40000400
 8003bec:	40000800 	.word	0x40000800
 8003bf0:	40000c00 	.word	0x40000c00
 8003bf4:	40014000 	.word	0x40014000

08003bf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e042      	b.n	8003cb8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d106      	bne.n	8003c4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7fd f9e2 	bl	8001010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2224      	movs	r2, #36	@ 0x24
 8003c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 ffa1 	bl	8004bac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695a      	ldr	r2, [r3, #20]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b08a      	sub	sp, #40	@ 0x28
 8003cc4:	af02      	add	r7, sp, #8
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b20      	cmp	r3, #32
 8003cde:	d175      	bne.n	8003dcc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d002      	beq.n	8003cec <HAL_UART_Transmit+0x2c>
 8003ce6:	88fb      	ldrh	r3, [r7, #6]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e06e      	b.n	8003dce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2221      	movs	r2, #33	@ 0x21
 8003cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cfe:	f7fd fc85 	bl	800160c <HAL_GetTick>
 8003d02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	88fa      	ldrh	r2, [r7, #6]
 8003d08:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	88fa      	ldrh	r2, [r7, #6]
 8003d0e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d18:	d108      	bne.n	8003d2c <HAL_UART_Transmit+0x6c>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d104      	bne.n	8003d2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d22:	2300      	movs	r3, #0
 8003d24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	61bb      	str	r3, [r7, #24]
 8003d2a:	e003      	b.n	8003d34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d30:	2300      	movs	r3, #0
 8003d32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d34:	e02e      	b.n	8003d94 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2180      	movs	r1, #128	@ 0x80
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 fc71 	bl	8004628 <UART_WaitOnFlagUntilTimeout>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d005      	beq.n	8003d58 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e03a      	b.n	8003dce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10b      	bne.n	8003d76 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	461a      	mov	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	3302      	adds	r3, #2
 8003d72:	61bb      	str	r3, [r7, #24]
 8003d74:	e007      	b.n	8003d86 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	781a      	ldrb	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	3301      	adds	r3, #1
 8003d84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1cb      	bne.n	8003d36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2200      	movs	r2, #0
 8003da6:	2140      	movs	r1, #64	@ 0x40
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 fc3d 	bl	8004628 <UART_WaitOnFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e006      	b.n	8003dce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	e000      	b.n	8003dce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003dcc:	2302      	movs	r3, #2
  }
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3720      	adds	r7, #32
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b08c      	sub	sp, #48	@ 0x30
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	60f8      	str	r0, [r7, #12]
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	4613      	mov	r3, r2
 8003de2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b20      	cmp	r3, #32
 8003dee:	d146      	bne.n	8003e7e <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d002      	beq.n	8003dfc <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003df6:	88fb      	ldrh	r3, [r7, #6]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d101      	bne.n	8003e00 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e03f      	b.n	8003e80 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2201      	movs	r2, #1
 8003e04:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003e0c:	88fb      	ldrh	r3, [r7, #6]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	68b9      	ldr	r1, [r7, #8]
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 fc62 	bl	80046dc <UART_Start_Receive_DMA>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d125      	bne.n	8003e72 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e26:	2300      	movs	r3, #0
 8003e28:	613b      	str	r3, [r7, #16]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	613b      	str	r3, [r7, #16]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	613b      	str	r3, [r7, #16]
 8003e3a:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	330c      	adds	r3, #12
 8003e42:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	e853 3f00 	ldrex	r3, [r3]
 8003e4a:	617b      	str	r3, [r7, #20]
   return(result);
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f043 0310 	orr.w	r3, r3, #16
 8003e52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	330c      	adds	r3, #12
 8003e5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e5c:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e5e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e60:	6a39      	ldr	r1, [r7, #32]
 8003e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e64:	e841 2300 	strex	r3, r2, [r1]
 8003e68:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1e5      	bne.n	8003e3c <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8003e70:	e002      	b.n	8003e78 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8003e78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003e7c:	e000      	b.n	8003e80 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8003e7e:	2302      	movs	r3, #2
  }
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3730      	adds	r7, #48	@ 0x30
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b0ba      	sub	sp, #232	@ 0xe8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003ec6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10f      	bne.n	8003eee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ed2:	f003 0320 	and.w	r3, r3, #32
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d009      	beq.n	8003eee <HAL_UART_IRQHandler+0x66>
 8003eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ede:	f003 0320 	and.w	r3, r3, #32
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 fda2 	bl	8004a30 <UART_Receive_IT>
      return;
 8003eec:	e273      	b.n	80043d6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003eee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 80de 	beq.w	80040b4 <HAL_UART_IRQHandler+0x22c>
 8003ef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d106      	bne.n	8003f12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f08:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 80d1 	beq.w	80040b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00b      	beq.n	8003f36 <HAL_UART_IRQHandler+0xae>
 8003f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d005      	beq.n	8003f36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2e:	f043 0201 	orr.w	r2, r3, #1
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f3a:	f003 0304 	and.w	r3, r3, #4
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00b      	beq.n	8003f5a <HAL_UART_IRQHandler+0xd2>
 8003f42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d005      	beq.n	8003f5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f52:	f043 0202 	orr.w	r2, r3, #2
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00b      	beq.n	8003f7e <HAL_UART_IRQHandler+0xf6>
 8003f66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f76:	f043 0204 	orr.w	r2, r3, #4
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d011      	beq.n	8003fae <HAL_UART_IRQHandler+0x126>
 8003f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d105      	bne.n	8003fa2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d005      	beq.n	8003fae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa6:	f043 0208 	orr.w	r2, r3, #8
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 820a 	beq.w	80043cc <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fbc:	f003 0320 	and.w	r3, r3, #32
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <HAL_UART_IRQHandler+0x14e>
 8003fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fc8:	f003 0320 	and.w	r3, r3, #32
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 fd2d 	bl	8004a30 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe0:	2b40      	cmp	r3, #64	@ 0x40
 8003fe2:	bf0c      	ite	eq
 8003fe4:	2301      	moveq	r3, #1
 8003fe6:	2300      	movne	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff2:	f003 0308 	and.w	r3, r3, #8
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d103      	bne.n	8004002 <HAL_UART_IRQHandler+0x17a>
 8003ffa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d04f      	beq.n	80040a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fc38 	bl	8004878 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004012:	2b40      	cmp	r3, #64	@ 0x40
 8004014:	d141      	bne.n	800409a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3314      	adds	r3, #20
 800401c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004020:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004024:	e853 3f00 	ldrex	r3, [r3]
 8004028:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800402c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004030:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004034:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3314      	adds	r3, #20
 800403e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004042:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004046:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800404e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004052:	e841 2300 	strex	r3, r2, [r1]
 8004056:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800405a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1d9      	bne.n	8004016 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004066:	2b00      	cmp	r3, #0
 8004068:	d013      	beq.n	8004092 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800406e:	4a8a      	ldr	r2, [pc, #552]	@ (8004298 <HAL_UART_IRQHandler+0x410>)
 8004070:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004076:	4618      	mov	r0, r3
 8004078:	f7fd fd2c 	bl	8001ad4 <HAL_DMA_Abort_IT>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d016      	beq.n	80040b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800408c:	4610      	mov	r0, r2
 800408e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004090:	e00e      	b.n	80040b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f9c0 	bl	8004418 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004098:	e00a      	b.n	80040b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f9bc 	bl	8004418 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a0:	e006      	b.n	80040b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f9b8 	bl	8004418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80040ae:	e18d      	b.n	80043cc <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b0:	bf00      	nop
    return;
 80040b2:	e18b      	b.n	80043cc <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	f040 8167 	bne.w	800438c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80040be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040c2:	f003 0310 	and.w	r3, r3, #16
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 8160 	beq.w	800438c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80040cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040d0:	f003 0310 	and.w	r3, r3, #16
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 8159 	beq.w	800438c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040da:	2300      	movs	r3, #0
 80040dc:	60bb      	str	r3, [r7, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	60bb      	str	r3, [r7, #8]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	60bb      	str	r3, [r7, #8]
 80040ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040fa:	2b40      	cmp	r3, #64	@ 0x40
 80040fc:	f040 80ce 	bne.w	800429c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800410c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 80a9 	beq.w	8004268 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800411a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800411e:	429a      	cmp	r2, r3
 8004120:	f080 80a2 	bcs.w	8004268 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800412a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004136:	f000 8088 	beq.w	800424a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	330c      	adds	r3, #12
 8004140:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004144:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004148:	e853 3f00 	ldrex	r3, [r3]
 800414c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004150:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004154:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004158:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	330c      	adds	r3, #12
 8004162:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004166:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800416a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004172:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004176:	e841 2300 	strex	r3, r2, [r1]
 800417a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800417e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1d9      	bne.n	800413a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3314      	adds	r3, #20
 800418c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004190:	e853 3f00 	ldrex	r3, [r3]
 8004194:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004196:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004198:	f023 0301 	bic.w	r3, r3, #1
 800419c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	3314      	adds	r3, #20
 80041a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80041aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80041ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80041b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80041b6:	e841 2300 	strex	r3, r2, [r1]
 80041ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80041bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1e1      	bne.n	8004186 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	3314      	adds	r3, #20
 80041c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041cc:	e853 3f00 	ldrex	r3, [r3]
 80041d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80041d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3314      	adds	r3, #20
 80041e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80041e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80041ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80041ee:	e841 2300 	strex	r3, r2, [r1]
 80041f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80041f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1e3      	bne.n	80041c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2220      	movs	r2, #32
 80041fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	330c      	adds	r3, #12
 800420e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004210:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004212:	e853 3f00 	ldrex	r3, [r3]
 8004216:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004218:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800421a:	f023 0310 	bic.w	r3, r3, #16
 800421e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	330c      	adds	r3, #12
 8004228:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800422c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800422e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004230:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004232:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004234:	e841 2300 	strex	r3, r2, [r1]
 8004238:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800423a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1e3      	bne.n	8004208 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004244:	4618      	mov	r0, r3
 8004246:	f7fd fbd5 	bl	80019f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2202      	movs	r2, #2
 800424e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004258:	b29b      	uxth	r3, r3
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	b29b      	uxth	r3, r3
 800425e:	4619      	mov	r1, r3
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7fc fc1f 	bl	8000aa4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004266:	e0b3      	b.n	80043d0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800426c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004270:	429a      	cmp	r2, r3
 8004272:	f040 80ad 	bne.w	80043d0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004280:	f040 80a6 	bne.w	80043d0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800428e:	4619      	mov	r1, r3
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7fc fc07 	bl	8000aa4 <HAL_UARTEx_RxEventCallback>
      return;
 8004296:	e09b      	b.n	80043d0 <HAL_UART_IRQHandler+0x548>
 8004298:	0800493f 	.word	0x0800493f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 808e 	beq.w	80043d4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80042b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 8089 	beq.w	80043d4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	330c      	adds	r3, #12
 80042c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042cc:	e853 3f00 	ldrex	r3, [r3]
 80042d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	330c      	adds	r3, #12
 80042e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80042e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80042e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042ee:	e841 2300 	strex	r3, r2, [r1]
 80042f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1e3      	bne.n	80042c2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3314      	adds	r3, #20
 8004300:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004304:	e853 3f00 	ldrex	r3, [r3]
 8004308:	623b      	str	r3, [r7, #32]
   return(result);
 800430a:	6a3b      	ldr	r3, [r7, #32]
 800430c:	f023 0301 	bic.w	r3, r3, #1
 8004310:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	3314      	adds	r3, #20
 800431a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800431e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004320:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004322:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004324:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004326:	e841 2300 	strex	r3, r2, [r1]
 800432a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800432c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1e3      	bne.n	80042fa <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2220      	movs	r2, #32
 8004336:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	330c      	adds	r3, #12
 8004346:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	e853 3f00 	ldrex	r3, [r3]
 800434e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f023 0310 	bic.w	r3, r3, #16
 8004356:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	330c      	adds	r3, #12
 8004360:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004364:	61fa      	str	r2, [r7, #28]
 8004366:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004368:	69b9      	ldr	r1, [r7, #24]
 800436a:	69fa      	ldr	r2, [r7, #28]
 800436c:	e841 2300 	strex	r3, r2, [r1]
 8004370:	617b      	str	r3, [r7, #20]
   return(result);
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1e3      	bne.n	8004340 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800437e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004382:	4619      	mov	r1, r3
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7fc fb8d 	bl	8000aa4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800438a:	e023      	b.n	80043d4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800438c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004394:	2b00      	cmp	r3, #0
 8004396:	d009      	beq.n	80043ac <HAL_UART_IRQHandler+0x524>
 8004398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800439c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 fadb 	bl	8004960 <UART_Transmit_IT>
    return;
 80043aa:	e014      	b.n	80043d6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00e      	beq.n	80043d6 <HAL_UART_IRQHandler+0x54e>
 80043b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d008      	beq.n	80043d6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 fb1b 	bl	8004a00 <UART_EndTransmit_IT>
    return;
 80043ca:	e004      	b.n	80043d6 <HAL_UART_IRQHandler+0x54e>
    return;
 80043cc:	bf00      	nop
 80043ce:	e002      	b.n	80043d6 <HAL_UART_IRQHandler+0x54e>
      return;
 80043d0:	bf00      	nop
 80043d2:	e000      	b.n	80043d6 <HAL_UART_IRQHandler+0x54e>
      return;
 80043d4:	bf00      	nop
  }
}
 80043d6:	37e8      	adds	r7, #232	@ 0xe8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b09c      	sub	sp, #112	@ 0x70
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004438:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004444:	2b00      	cmp	r3, #0
 8004446:	d172      	bne.n	800452e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004448:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800444a:	2200      	movs	r2, #0
 800444c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800444e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	330c      	adds	r3, #12
 8004454:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004456:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004458:	e853 3f00 	ldrex	r3, [r3]
 800445c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800445e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004460:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004464:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004466:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	330c      	adds	r3, #12
 800446c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800446e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004470:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004472:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004474:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004476:	e841 2300 	strex	r3, r2, [r1]
 800447a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800447c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1e5      	bne.n	800444e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004482:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	3314      	adds	r3, #20
 8004488:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800448c:	e853 3f00 	ldrex	r3, [r3]
 8004490:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004494:	f023 0301 	bic.w	r3, r3, #1
 8004498:	667b      	str	r3, [r7, #100]	@ 0x64
 800449a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3314      	adds	r3, #20
 80044a0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80044a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80044a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044aa:	e841 2300 	strex	r3, r2, [r1]
 80044ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1e5      	bne.n	8004482 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	3314      	adds	r3, #20
 80044bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c0:	e853 3f00 	ldrex	r3, [r3]
 80044c4:	623b      	str	r3, [r7, #32]
   return(result);
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80044ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	3314      	adds	r3, #20
 80044d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80044d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80044d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044de:	e841 2300 	strex	r3, r2, [r1]
 80044e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1e5      	bne.n	80044b6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044ec:	2220      	movs	r2, #32
 80044ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d119      	bne.n	800452e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	330c      	adds	r3, #12
 8004500:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	e853 3f00 	ldrex	r3, [r3]
 8004508:	60fb      	str	r3, [r7, #12]
   return(result);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f023 0310 	bic.w	r3, r3, #16
 8004510:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004512:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	330c      	adds	r3, #12
 8004518:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800451a:	61fa      	str	r2, [r7, #28]
 800451c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451e:	69b9      	ldr	r1, [r7, #24]
 8004520:	69fa      	ldr	r2, [r7, #28]
 8004522:	e841 2300 	strex	r3, r2, [r1]
 8004526:	617b      	str	r3, [r7, #20]
   return(result);
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1e5      	bne.n	80044fa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800452e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004530:	2200      	movs	r2, #0
 8004532:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004534:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004538:	2b01      	cmp	r3, #1
 800453a:	d106      	bne.n	800454a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800453c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800453e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004540:	4619      	mov	r1, r3
 8004542:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004544:	f7fc faae 	bl	8000aa4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004548:	e002      	b.n	8004550 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800454a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800454c:	f7ff ff50 	bl	80043f0 <HAL_UART_RxCpltCallback>
}
 8004550:	bf00      	nop
 8004552:	3770      	adds	r7, #112	@ 0x70
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004564:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2201      	movs	r2, #1
 800456a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004570:	2b01      	cmp	r3, #1
 8004572:	d108      	bne.n	8004586 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004578:	085b      	lsrs	r3, r3, #1
 800457a:	b29b      	uxth	r3, r3
 800457c:	4619      	mov	r1, r3
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f7fc fa90 	bl	8000aa4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004584:	e002      	b.n	800458c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f7ff ff3c 	bl	8004404 <HAL_UART_RxHalfCpltCallback>
}
 800458c:	bf00      	nop
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800459c:	2300      	movs	r3, #0
 800459e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045b0:	2b80      	cmp	r3, #128	@ 0x80
 80045b2:	bf0c      	ite	eq
 80045b4:	2301      	moveq	r3, #1
 80045b6:	2300      	movne	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b21      	cmp	r3, #33	@ 0x21
 80045c6:	d108      	bne.n	80045da <UART_DMAError+0x46>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d005      	beq.n	80045da <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2200      	movs	r2, #0
 80045d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80045d4:	68b8      	ldr	r0, [r7, #8]
 80045d6:	f000 f927 	bl	8004828 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e4:	2b40      	cmp	r3, #64	@ 0x40
 80045e6:	bf0c      	ite	eq
 80045e8:	2301      	moveq	r3, #1
 80045ea:	2300      	movne	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b22      	cmp	r3, #34	@ 0x22
 80045fa:	d108      	bne.n	800460e <UART_DMAError+0x7a>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d005      	beq.n	800460e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	2200      	movs	r2, #0
 8004606:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004608:	68b8      	ldr	r0, [r7, #8]
 800460a:	f000 f935 	bl	8004878 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004612:	f043 0210 	orr.w	r2, r3, #16
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800461a:	68b8      	ldr	r0, [r7, #8]
 800461c:	f7ff fefc 	bl	8004418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004620:	bf00      	nop
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	603b      	str	r3, [r7, #0]
 8004634:	4613      	mov	r3, r2
 8004636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004638:	e03b      	b.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004640:	d037      	beq.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004642:	f7fc ffe3 	bl	800160c <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	6a3a      	ldr	r2, [r7, #32]
 800464e:	429a      	cmp	r2, r3
 8004650:	d302      	bcc.n	8004658 <UART_WaitOnFlagUntilTimeout+0x30>
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e03a      	b.n	80046d2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	2b00      	cmp	r3, #0
 8004668:	d023      	beq.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	2b80      	cmp	r3, #128	@ 0x80
 800466e:	d020      	beq.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b40      	cmp	r3, #64	@ 0x40
 8004674:	d01d      	beq.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b08      	cmp	r3, #8
 8004682:	d116      	bne.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004684:	2300      	movs	r3, #0
 8004686:	617b      	str	r3, [r7, #20]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 f8ec 	bl	8004878 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2208      	movs	r2, #8
 80046a4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e00f      	b.n	80046d2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	4013      	ands	r3, r2
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	429a      	cmp	r2, r3
 80046c0:	bf0c      	ite	eq
 80046c2:	2301      	moveq	r3, #1
 80046c4:	2300      	movne	r3, #0
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	461a      	mov	r2, r3
 80046ca:	79fb      	ldrb	r3, [r7, #7]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d0b4      	beq.n	800463a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b098      	sub	sp, #96	@ 0x60
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	4613      	mov	r3, r2
 80046e8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	88fa      	ldrh	r2, [r7, #6]
 80046f4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2222      	movs	r2, #34	@ 0x22
 8004700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004708:	4a44      	ldr	r2, [pc, #272]	@ (800481c <UART_Start_Receive_DMA+0x140>)
 800470a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004710:	4a43      	ldr	r2, [pc, #268]	@ (8004820 <UART_Start_Receive_DMA+0x144>)
 8004712:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004718:	4a42      	ldr	r2, [pc, #264]	@ (8004824 <UART_Start_Receive_DMA+0x148>)
 800471a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004720:	2200      	movs	r2, #0
 8004722:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004724:	f107 0308 	add.w	r3, r7, #8
 8004728:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3304      	adds	r3, #4
 8004734:	4619      	mov	r1, r3
 8004736:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	88fb      	ldrh	r3, [r7, #6]
 800473c:	f7fd f902 	bl	8001944 <HAL_DMA_Start_IT>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d008      	beq.n	8004758 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2210      	movs	r2, #16
 800474a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2220      	movs	r2, #32
 8004750:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e05d      	b.n	8004814 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004758:	2300      	movs	r3, #0
 800475a:	613b      	str	r3, [r7, #16]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	613b      	str	r3, [r7, #16]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	613b      	str	r3, [r7, #16]
 800476c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d019      	beq.n	80047aa <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	330c      	adds	r3, #12
 800477c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004780:	e853 3f00 	ldrex	r3, [r3]
 8004784:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004788:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800478c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	330c      	adds	r3, #12
 8004794:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004796:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004798:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800479c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800479e:	e841 2300 	strex	r3, r2, [r1]
 80047a2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80047a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1e5      	bne.n	8004776 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	3314      	adds	r3, #20
 80047b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b4:	e853 3f00 	ldrex	r3, [r3]
 80047b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047bc:	f043 0301 	orr.w	r3, r3, #1
 80047c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	3314      	adds	r3, #20
 80047c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80047ca:	63ba      	str	r2, [r7, #56]	@ 0x38
 80047cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ce:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80047d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80047d2:	e841 2300 	strex	r3, r2, [r1]
 80047d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1e5      	bne.n	80047aa <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3314      	adds	r3, #20
 80047e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	e853 3f00 	ldrex	r3, [r3]
 80047ec:	617b      	str	r3, [r7, #20]
   return(result);
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3314      	adds	r3, #20
 80047fc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80047fe:	627a      	str	r2, [r7, #36]	@ 0x24
 8004800:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004802:	6a39      	ldr	r1, [r7, #32]
 8004804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004806:	e841 2300 	strex	r3, r2, [r1]
 800480a:	61fb      	str	r3, [r7, #28]
   return(result);
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1e5      	bne.n	80047de <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3760      	adds	r7, #96	@ 0x60
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	0800442d 	.word	0x0800442d
 8004820:	08004559 	.word	0x08004559
 8004824:	08004595 	.word	0x08004595

08004828 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004828:	b480      	push	{r7}
 800482a:	b089      	sub	sp, #36	@ 0x24
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	330c      	adds	r3, #12
 8004836:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	e853 3f00 	ldrex	r3, [r3]
 800483e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004846:	61fb      	str	r3, [r7, #28]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	330c      	adds	r3, #12
 800484e:	69fa      	ldr	r2, [r7, #28]
 8004850:	61ba      	str	r2, [r7, #24]
 8004852:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004854:	6979      	ldr	r1, [r7, #20]
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	e841 2300 	strex	r3, r2, [r1]
 800485c:	613b      	str	r3, [r7, #16]
   return(result);
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1e5      	bne.n	8004830 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2220      	movs	r2, #32
 8004868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800486c:	bf00      	nop
 800486e:	3724      	adds	r7, #36	@ 0x24
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004878:	b480      	push	{r7}
 800487a:	b095      	sub	sp, #84	@ 0x54
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	330c      	adds	r3, #12
 8004886:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800488a:	e853 3f00 	ldrex	r3, [r3]
 800488e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004892:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004896:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	330c      	adds	r3, #12
 800489e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048a0:	643a      	str	r2, [r7, #64]	@ 0x40
 80048a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048a8:	e841 2300 	strex	r3, r2, [r1]
 80048ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1e5      	bne.n	8004880 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	3314      	adds	r3, #20
 80048ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048bc:	6a3b      	ldr	r3, [r7, #32]
 80048be:	e853 3f00 	ldrex	r3, [r3]
 80048c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	f023 0301 	bic.w	r3, r3, #1
 80048ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3314      	adds	r3, #20
 80048d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048dc:	e841 2300 	strex	r3, r2, [r1]
 80048e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1e5      	bne.n	80048b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d119      	bne.n	8004924 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	330c      	adds	r3, #12
 80048f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	e853 3f00 	ldrex	r3, [r3]
 80048fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f023 0310 	bic.w	r3, r3, #16
 8004906:	647b      	str	r3, [r7, #68]	@ 0x44
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	330c      	adds	r3, #12
 800490e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004910:	61ba      	str	r2, [r7, #24]
 8004912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004914:	6979      	ldr	r1, [r7, #20]
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	e841 2300 	strex	r3, r2, [r1]
 800491c:	613b      	str	r3, [r7, #16]
   return(result);
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1e5      	bne.n	80048f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004932:	bf00      	nop
 8004934:	3754      	adds	r7, #84	@ 0x54
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b084      	sub	sp, #16
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800494a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f7ff fd60 	bl	8004418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004958:	bf00      	nop
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b21      	cmp	r3, #33	@ 0x21
 8004972:	d13e      	bne.n	80049f2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800497c:	d114      	bne.n	80049a8 <UART_Transmit_IT+0x48>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d110      	bne.n	80049a8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	461a      	mov	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800499a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	1c9a      	adds	r2, r3, #2
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	621a      	str	r2, [r3, #32]
 80049a6:	e008      	b.n	80049ba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	1c59      	adds	r1, r3, #1
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6211      	str	r1, [r2, #32]
 80049b2:	781a      	ldrb	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049be:	b29b      	uxth	r3, r3
 80049c0:	3b01      	subs	r3, #1
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	4619      	mov	r1, r3
 80049c8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10f      	bne.n	80049ee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68da      	ldr	r2, [r3, #12]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	e000      	b.n	80049f4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049f2:	2302      	movs	r3, #2
  }
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a16:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7ff fcdb 	bl	80043dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b08c      	sub	sp, #48	@ 0x30
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b22      	cmp	r3, #34	@ 0x22
 8004a4a:	f040 80aa 	bne.w	8004ba2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a56:	d115      	bne.n	8004a84 <UART_Receive_IT+0x54>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d111      	bne.n	8004a84 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a64:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a76:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a7c:	1c9a      	adds	r2, r3, #2
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a82:	e024      	b.n	8004ace <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a92:	d007      	beq.n	8004aa4 <UART_Receive_IT+0x74>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10a      	bne.n	8004ab2 <UART_Receive_IT+0x82>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d106      	bne.n	8004ab2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aae:	701a      	strb	r2, [r3, #0]
 8004ab0:	e008      	b.n	8004ac4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac8:	1c5a      	adds	r2, r3, #1
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	4619      	mov	r1, r3
 8004adc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d15d      	bne.n	8004b9e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f022 0220 	bic.w	r2, r2, #32
 8004af0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68da      	ldr	r2, [r3, #12]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b00:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	695a      	ldr	r2, [r3, #20]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0201 	bic.w	r2, r2, #1
 8004b10:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d135      	bne.n	8004b94 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	330c      	adds	r3, #12
 8004b34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	e853 3f00 	ldrex	r3, [r3]
 8004b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f023 0310 	bic.w	r3, r3, #16
 8004b44:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	330c      	adds	r3, #12
 8004b4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b4e:	623a      	str	r2, [r7, #32]
 8004b50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b52:	69f9      	ldr	r1, [r7, #28]
 8004b54:	6a3a      	ldr	r2, [r7, #32]
 8004b56:	e841 2300 	strex	r3, r2, [r1]
 8004b5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1e5      	bne.n	8004b2e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0310 	and.w	r3, r3, #16
 8004b6c:	2b10      	cmp	r3, #16
 8004b6e:	d10a      	bne.n	8004b86 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b70:	2300      	movs	r3, #0
 8004b72:	60fb      	str	r3, [r7, #12]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	60fb      	str	r3, [r7, #12]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f7fb ff89 	bl	8000aa4 <HAL_UARTEx_RxEventCallback>
 8004b92:	e002      	b.n	8004b9a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7ff fc2b 	bl	80043f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	e002      	b.n	8004ba4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	e000      	b.n	8004ba4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ba2:	2302      	movs	r3, #2
  }
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3730      	adds	r7, #48	@ 0x30
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bb0:	b0c0      	sub	sp, #256	@ 0x100
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc8:	68d9      	ldr	r1, [r3, #12]
 8004bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	ea40 0301 	orr.w	r3, r0, r1
 8004bd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	431a      	orrs	r2, r3
 8004be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	431a      	orrs	r2, r3
 8004bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004c04:	f021 010c 	bic.w	r1, r1, #12
 8004c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004c12:	430b      	orrs	r3, r1
 8004c14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c26:	6999      	ldr	r1, [r3, #24]
 8004c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	ea40 0301 	orr.w	r3, r0, r1
 8004c32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	4b8f      	ldr	r3, [pc, #572]	@ (8004e78 <UART_SetConfig+0x2cc>)
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d005      	beq.n	8004c4c <UART_SetConfig+0xa0>
 8004c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	4b8d      	ldr	r3, [pc, #564]	@ (8004e7c <UART_SetConfig+0x2d0>)
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d104      	bne.n	8004c56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c4c:	f7fd fff0 	bl	8002c30 <HAL_RCC_GetPCLK2Freq>
 8004c50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c54:	e003      	b.n	8004c5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c56:	f7fd ffd7 	bl	8002c08 <HAL_RCC_GetPCLK1Freq>
 8004c5a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c68:	f040 810c 	bne.w	8004e84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c70:	2200      	movs	r2, #0
 8004c72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c76:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c7e:	4622      	mov	r2, r4
 8004c80:	462b      	mov	r3, r5
 8004c82:	1891      	adds	r1, r2, r2
 8004c84:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c86:	415b      	adcs	r3, r3
 8004c88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c8e:	4621      	mov	r1, r4
 8004c90:	eb12 0801 	adds.w	r8, r2, r1
 8004c94:	4629      	mov	r1, r5
 8004c96:	eb43 0901 	adc.w	r9, r3, r1
 8004c9a:	f04f 0200 	mov.w	r2, #0
 8004c9e:	f04f 0300 	mov.w	r3, #0
 8004ca2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ca6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004caa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cae:	4690      	mov	r8, r2
 8004cb0:	4699      	mov	r9, r3
 8004cb2:	4623      	mov	r3, r4
 8004cb4:	eb18 0303 	adds.w	r3, r8, r3
 8004cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004cbc:	462b      	mov	r3, r5
 8004cbe:	eb49 0303 	adc.w	r3, r9, r3
 8004cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004cd2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004cd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004cda:	460b      	mov	r3, r1
 8004cdc:	18db      	adds	r3, r3, r3
 8004cde:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	eb42 0303 	adc.w	r3, r2, r3
 8004ce6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ce8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004cec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004cf0:	f7fb fac6 	bl	8000280 <__aeabi_uldivmod>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4b61      	ldr	r3, [pc, #388]	@ (8004e80 <UART_SetConfig+0x2d4>)
 8004cfa:	fba3 2302 	umull	r2, r3, r3, r2
 8004cfe:	095b      	lsrs	r3, r3, #5
 8004d00:	011c      	lsls	r4, r3, #4
 8004d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d06:	2200      	movs	r2, #0
 8004d08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004d10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004d14:	4642      	mov	r2, r8
 8004d16:	464b      	mov	r3, r9
 8004d18:	1891      	adds	r1, r2, r2
 8004d1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004d1c:	415b      	adcs	r3, r3
 8004d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004d24:	4641      	mov	r1, r8
 8004d26:	eb12 0a01 	adds.w	sl, r2, r1
 8004d2a:	4649      	mov	r1, r9
 8004d2c:	eb43 0b01 	adc.w	fp, r3, r1
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d44:	4692      	mov	sl, r2
 8004d46:	469b      	mov	fp, r3
 8004d48:	4643      	mov	r3, r8
 8004d4a:	eb1a 0303 	adds.w	r3, sl, r3
 8004d4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d52:	464b      	mov	r3, r9
 8004d54:	eb4b 0303 	adc.w	r3, fp, r3
 8004d58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d70:	460b      	mov	r3, r1
 8004d72:	18db      	adds	r3, r3, r3
 8004d74:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d76:	4613      	mov	r3, r2
 8004d78:	eb42 0303 	adc.w	r3, r2, r3
 8004d7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d86:	f7fb fa7b 	bl	8000280 <__aeabi_uldivmod>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	4611      	mov	r1, r2
 8004d90:	4b3b      	ldr	r3, [pc, #236]	@ (8004e80 <UART_SetConfig+0x2d4>)
 8004d92:	fba3 2301 	umull	r2, r3, r3, r1
 8004d96:	095b      	lsrs	r3, r3, #5
 8004d98:	2264      	movs	r2, #100	@ 0x64
 8004d9a:	fb02 f303 	mul.w	r3, r2, r3
 8004d9e:	1acb      	subs	r3, r1, r3
 8004da0:	00db      	lsls	r3, r3, #3
 8004da2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004da6:	4b36      	ldr	r3, [pc, #216]	@ (8004e80 <UART_SetConfig+0x2d4>)
 8004da8:	fba3 2302 	umull	r2, r3, r3, r2
 8004dac:	095b      	lsrs	r3, r3, #5
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004db4:	441c      	add	r4, r3
 8004db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004dc0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004dc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004dc8:	4642      	mov	r2, r8
 8004dca:	464b      	mov	r3, r9
 8004dcc:	1891      	adds	r1, r2, r2
 8004dce:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004dd0:	415b      	adcs	r3, r3
 8004dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004dd8:	4641      	mov	r1, r8
 8004dda:	1851      	adds	r1, r2, r1
 8004ddc:	6339      	str	r1, [r7, #48]	@ 0x30
 8004dde:	4649      	mov	r1, r9
 8004de0:	414b      	adcs	r3, r1
 8004de2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004df0:	4659      	mov	r1, fp
 8004df2:	00cb      	lsls	r3, r1, #3
 8004df4:	4651      	mov	r1, sl
 8004df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dfa:	4651      	mov	r1, sl
 8004dfc:	00ca      	lsls	r2, r1, #3
 8004dfe:	4610      	mov	r0, r2
 8004e00:	4619      	mov	r1, r3
 8004e02:	4603      	mov	r3, r0
 8004e04:	4642      	mov	r2, r8
 8004e06:	189b      	adds	r3, r3, r2
 8004e08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e0c:	464b      	mov	r3, r9
 8004e0e:	460a      	mov	r2, r1
 8004e10:	eb42 0303 	adc.w	r3, r2, r3
 8004e14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e24:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004e28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	18db      	adds	r3, r3, r3
 8004e30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e32:	4613      	mov	r3, r2
 8004e34:	eb42 0303 	adc.w	r3, r2, r3
 8004e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e42:	f7fb fa1d 	bl	8000280 <__aeabi_uldivmod>
 8004e46:	4602      	mov	r2, r0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e80 <UART_SetConfig+0x2d4>)
 8004e4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e50:	095b      	lsrs	r3, r3, #5
 8004e52:	2164      	movs	r1, #100	@ 0x64
 8004e54:	fb01 f303 	mul.w	r3, r1, r3
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	00db      	lsls	r3, r3, #3
 8004e5c:	3332      	adds	r3, #50	@ 0x32
 8004e5e:	4a08      	ldr	r2, [pc, #32]	@ (8004e80 <UART_SetConfig+0x2d4>)
 8004e60:	fba2 2303 	umull	r2, r3, r2, r3
 8004e64:	095b      	lsrs	r3, r3, #5
 8004e66:	f003 0207 	and.w	r2, r3, #7
 8004e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4422      	add	r2, r4
 8004e72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e74:	e106      	b.n	8005084 <UART_SetConfig+0x4d8>
 8004e76:	bf00      	nop
 8004e78:	40011000 	.word	0x40011000
 8004e7c:	40011400 	.word	0x40011400
 8004e80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e8e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e96:	4642      	mov	r2, r8
 8004e98:	464b      	mov	r3, r9
 8004e9a:	1891      	adds	r1, r2, r2
 8004e9c:	6239      	str	r1, [r7, #32]
 8004e9e:	415b      	adcs	r3, r3
 8004ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ea2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ea6:	4641      	mov	r1, r8
 8004ea8:	1854      	adds	r4, r2, r1
 8004eaa:	4649      	mov	r1, r9
 8004eac:	eb43 0501 	adc.w	r5, r3, r1
 8004eb0:	f04f 0200 	mov.w	r2, #0
 8004eb4:	f04f 0300 	mov.w	r3, #0
 8004eb8:	00eb      	lsls	r3, r5, #3
 8004eba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ebe:	00e2      	lsls	r2, r4, #3
 8004ec0:	4614      	mov	r4, r2
 8004ec2:	461d      	mov	r5, r3
 8004ec4:	4643      	mov	r3, r8
 8004ec6:	18e3      	adds	r3, r4, r3
 8004ec8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ecc:	464b      	mov	r3, r9
 8004ece:	eb45 0303 	adc.w	r3, r5, r3
 8004ed2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ee2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ee6:	f04f 0200 	mov.w	r2, #0
 8004eea:	f04f 0300 	mov.w	r3, #0
 8004eee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ef2:	4629      	mov	r1, r5
 8004ef4:	008b      	lsls	r3, r1, #2
 8004ef6:	4621      	mov	r1, r4
 8004ef8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004efc:	4621      	mov	r1, r4
 8004efe:	008a      	lsls	r2, r1, #2
 8004f00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004f04:	f7fb f9bc 	bl	8000280 <__aeabi_uldivmod>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4b60      	ldr	r3, [pc, #384]	@ (8005090 <UART_SetConfig+0x4e4>)
 8004f0e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f12:	095b      	lsrs	r3, r3, #5
 8004f14:	011c      	lsls	r4, r3, #4
 8004f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004f28:	4642      	mov	r2, r8
 8004f2a:	464b      	mov	r3, r9
 8004f2c:	1891      	adds	r1, r2, r2
 8004f2e:	61b9      	str	r1, [r7, #24]
 8004f30:	415b      	adcs	r3, r3
 8004f32:	61fb      	str	r3, [r7, #28]
 8004f34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f38:	4641      	mov	r1, r8
 8004f3a:	1851      	adds	r1, r2, r1
 8004f3c:	6139      	str	r1, [r7, #16]
 8004f3e:	4649      	mov	r1, r9
 8004f40:	414b      	adcs	r3, r1
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	f04f 0200 	mov.w	r2, #0
 8004f48:	f04f 0300 	mov.w	r3, #0
 8004f4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f50:	4659      	mov	r1, fp
 8004f52:	00cb      	lsls	r3, r1, #3
 8004f54:	4651      	mov	r1, sl
 8004f56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f5a:	4651      	mov	r1, sl
 8004f5c:	00ca      	lsls	r2, r1, #3
 8004f5e:	4610      	mov	r0, r2
 8004f60:	4619      	mov	r1, r3
 8004f62:	4603      	mov	r3, r0
 8004f64:	4642      	mov	r2, r8
 8004f66:	189b      	adds	r3, r3, r2
 8004f68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f6c:	464b      	mov	r3, r9
 8004f6e:	460a      	mov	r2, r1
 8004f70:	eb42 0303 	adc.w	r3, r2, r3
 8004f74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f84:	f04f 0200 	mov.w	r2, #0
 8004f88:	f04f 0300 	mov.w	r3, #0
 8004f8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f90:	4649      	mov	r1, r9
 8004f92:	008b      	lsls	r3, r1, #2
 8004f94:	4641      	mov	r1, r8
 8004f96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f9a:	4641      	mov	r1, r8
 8004f9c:	008a      	lsls	r2, r1, #2
 8004f9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004fa2:	f7fb f96d 	bl	8000280 <__aeabi_uldivmod>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4611      	mov	r1, r2
 8004fac:	4b38      	ldr	r3, [pc, #224]	@ (8005090 <UART_SetConfig+0x4e4>)
 8004fae:	fba3 2301 	umull	r2, r3, r3, r1
 8004fb2:	095b      	lsrs	r3, r3, #5
 8004fb4:	2264      	movs	r2, #100	@ 0x64
 8004fb6:	fb02 f303 	mul.w	r3, r2, r3
 8004fba:	1acb      	subs	r3, r1, r3
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	3332      	adds	r3, #50	@ 0x32
 8004fc0:	4a33      	ldr	r2, [pc, #204]	@ (8005090 <UART_SetConfig+0x4e4>)
 8004fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc6:	095b      	lsrs	r3, r3, #5
 8004fc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fcc:	441c      	add	r4, r3
 8004fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	673b      	str	r3, [r7, #112]	@ 0x70
 8004fd6:	677a      	str	r2, [r7, #116]	@ 0x74
 8004fd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004fdc:	4642      	mov	r2, r8
 8004fde:	464b      	mov	r3, r9
 8004fe0:	1891      	adds	r1, r2, r2
 8004fe2:	60b9      	str	r1, [r7, #8]
 8004fe4:	415b      	adcs	r3, r3
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fec:	4641      	mov	r1, r8
 8004fee:	1851      	adds	r1, r2, r1
 8004ff0:	6039      	str	r1, [r7, #0]
 8004ff2:	4649      	mov	r1, r9
 8004ff4:	414b      	adcs	r3, r1
 8004ff6:	607b      	str	r3, [r7, #4]
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	f04f 0300 	mov.w	r3, #0
 8005000:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005004:	4659      	mov	r1, fp
 8005006:	00cb      	lsls	r3, r1, #3
 8005008:	4651      	mov	r1, sl
 800500a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800500e:	4651      	mov	r1, sl
 8005010:	00ca      	lsls	r2, r1, #3
 8005012:	4610      	mov	r0, r2
 8005014:	4619      	mov	r1, r3
 8005016:	4603      	mov	r3, r0
 8005018:	4642      	mov	r2, r8
 800501a:	189b      	adds	r3, r3, r2
 800501c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800501e:	464b      	mov	r3, r9
 8005020:	460a      	mov	r2, r1
 8005022:	eb42 0303 	adc.w	r3, r2, r3
 8005026:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	663b      	str	r3, [r7, #96]	@ 0x60
 8005032:	667a      	str	r2, [r7, #100]	@ 0x64
 8005034:	f04f 0200 	mov.w	r2, #0
 8005038:	f04f 0300 	mov.w	r3, #0
 800503c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005040:	4649      	mov	r1, r9
 8005042:	008b      	lsls	r3, r1, #2
 8005044:	4641      	mov	r1, r8
 8005046:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800504a:	4641      	mov	r1, r8
 800504c:	008a      	lsls	r2, r1, #2
 800504e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005052:	f7fb f915 	bl	8000280 <__aeabi_uldivmod>
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	4b0d      	ldr	r3, [pc, #52]	@ (8005090 <UART_SetConfig+0x4e4>)
 800505c:	fba3 1302 	umull	r1, r3, r3, r2
 8005060:	095b      	lsrs	r3, r3, #5
 8005062:	2164      	movs	r1, #100	@ 0x64
 8005064:	fb01 f303 	mul.w	r3, r1, r3
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	3332      	adds	r3, #50	@ 0x32
 800506e:	4a08      	ldr	r2, [pc, #32]	@ (8005090 <UART_SetConfig+0x4e4>)
 8005070:	fba2 2303 	umull	r2, r3, r2, r3
 8005074:	095b      	lsrs	r3, r3, #5
 8005076:	f003 020f 	and.w	r2, r3, #15
 800507a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4422      	add	r2, r4
 8005082:	609a      	str	r2, [r3, #8]
}
 8005084:	bf00      	nop
 8005086:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800508a:	46bd      	mov	sp, r7
 800508c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005090:	51eb851f 	.word	0x51eb851f

08005094 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	4603      	mov	r3, r0
 800509c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800509e:	2300      	movs	r3, #0
 80050a0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80050a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050a6:	2b84      	cmp	r3, #132	@ 0x84
 80050a8:	d005      	beq.n	80050b6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80050aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	4413      	add	r3, r2
 80050b2:	3303      	adds	r3, #3
 80050b4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80050b6:	68fb      	ldr	r3, [r7, #12]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80050c8:	f000 fafc 	bl	80056c4 <vTaskStartScheduler>
  
  return osOK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80050d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050d4:	b089      	sub	sp, #36	@ 0x24
 80050d6:	af04      	add	r7, sp, #16
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d020      	beq.n	8005126 <osThreadCreate+0x54>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d01c      	beq.n	8005126 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685c      	ldr	r4, [r3, #4]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691e      	ldr	r6, [r3, #16]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff ffc8 	bl	8005094 <makeFreeRtosPriority>
 8005104:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800510e:	9202      	str	r2, [sp, #8]
 8005110:	9301      	str	r3, [sp, #4]
 8005112:	9100      	str	r1, [sp, #0]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	4632      	mov	r2, r6
 8005118:	4629      	mov	r1, r5
 800511a:	4620      	mov	r0, r4
 800511c:	f000 f8ed 	bl	80052fa <xTaskCreateStatic>
 8005120:	4603      	mov	r3, r0
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	e01c      	b.n	8005160 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685c      	ldr	r4, [r3, #4]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005132:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800513a:	4618      	mov	r0, r3
 800513c:	f7ff ffaa 	bl	8005094 <makeFreeRtosPriority>
 8005140:	4602      	mov	r2, r0
 8005142:	f107 030c 	add.w	r3, r7, #12
 8005146:	9301      	str	r3, [sp, #4]
 8005148:	9200      	str	r2, [sp, #0]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	4632      	mov	r2, r6
 800514e:	4629      	mov	r1, r5
 8005150:	4620      	mov	r0, r4
 8005152:	f000 f932 	bl	80053ba <xTaskCreate>
 8005156:	4603      	mov	r3, r0
 8005158:	2b01      	cmp	r3, #1
 800515a:	d001      	beq.n	8005160 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800515c:	2300      	movs	r3, #0
 800515e:	e000      	b.n	8005162 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005160:	68fb      	ldr	r3, [r7, #12]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3714      	adds	r7, #20
 8005166:	46bd      	mov	sp, r7
 8005168:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800516a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b084      	sub	sp, #16
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <osDelay+0x16>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	e000      	b.n	8005182 <osDelay+0x18>
 8005180:	2301      	movs	r3, #1
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fa68 	bl	8005658 <vTaskDelay>
  
  return osOK;
 8005188:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f103 0208 	add.w	r2, r3, #8
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f04f 32ff 	mov.w	r2, #4294967295
 80051aa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f103 0208 	add.w	r2, r3, #8
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f103 0208 	add.w	r2, r3, #8
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80051c6:	bf00      	nop
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80051d2:	b480      	push	{r7}
 80051d4:	b083      	sub	sp, #12
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	1c5a      	adds	r2, r3, #1
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	601a      	str	r2, [r3, #0]
}
 8005228:	bf00      	nop
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524a:	d103      	bne.n	8005254 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	60fb      	str	r3, [r7, #12]
 8005252:	e00c      	b.n	800526e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	3308      	adds	r3, #8
 8005258:	60fb      	str	r3, [r7, #12]
 800525a:	e002      	b.n	8005262 <vListInsert+0x2e>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	60fb      	str	r3, [r7, #12]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	429a      	cmp	r2, r3
 800526c:	d2f6      	bcs.n	800525c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	1c5a      	adds	r2, r3, #1
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	601a      	str	r2, [r3, #0]
}
 800529a:	bf00      	nop
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80052a6:	b480      	push	{r7}
 80052a8:	b085      	sub	sp, #20
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	6892      	ldr	r2, [r2, #8]
 80052bc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	6852      	ldr	r2, [r2, #4]
 80052c6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d103      	bne.n	80052da <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	1e5a      	subs	r2, r3, #1
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3714      	adds	r7, #20
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b08e      	sub	sp, #56	@ 0x38
 80052fe:	af04      	add	r7, sp, #16
 8005300:	60f8      	str	r0, [r7, #12]
 8005302:	60b9      	str	r1, [r7, #8]
 8005304:	607a      	str	r2, [r7, #4]
 8005306:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10b      	bne.n	8005326 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005320:	bf00      	nop
 8005322:	bf00      	nop
 8005324:	e7fd      	b.n	8005322 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10b      	bne.n	8005344 <xTaskCreateStatic+0x4a>
	__asm volatile
 800532c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005330:	f383 8811 	msr	BASEPRI, r3
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	61fb      	str	r3, [r7, #28]
}
 800533e:	bf00      	nop
 8005340:	bf00      	nop
 8005342:	e7fd      	b.n	8005340 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005344:	23a0      	movs	r3, #160	@ 0xa0
 8005346:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	2ba0      	cmp	r3, #160	@ 0xa0
 800534c:	d00b      	beq.n	8005366 <xTaskCreateStatic+0x6c>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	61bb      	str	r3, [r7, #24]
}
 8005360:	bf00      	nop
 8005362:	bf00      	nop
 8005364:	e7fd      	b.n	8005362 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005366:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800536a:	2b00      	cmp	r3, #0
 800536c:	d01e      	beq.n	80053ac <xTaskCreateStatic+0xb2>
 800536e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005370:	2b00      	cmp	r3, #0
 8005372:	d01b      	beq.n	80053ac <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005376:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800537c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800537e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005380:	2202      	movs	r2, #2
 8005382:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005386:	2300      	movs	r3, #0
 8005388:	9303      	str	r3, [sp, #12]
 800538a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538c:	9302      	str	r3, [sp, #8]
 800538e:	f107 0314 	add.w	r3, r7, #20
 8005392:	9301      	str	r3, [sp, #4]
 8005394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	68b9      	ldr	r1, [r7, #8]
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 f850 	bl	8005444 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80053a6:	f000 f8ed 	bl	8005584 <prvAddNewTaskToReadyList>
 80053aa:	e001      	b.n	80053b0 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80053ac:	2300      	movs	r3, #0
 80053ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80053b0:	697b      	ldr	r3, [r7, #20]
	}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3728      	adds	r7, #40	@ 0x28
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b08c      	sub	sp, #48	@ 0x30
 80053be:	af04      	add	r7, sp, #16
 80053c0:	60f8      	str	r0, [r7, #12]
 80053c2:	60b9      	str	r1, [r7, #8]
 80053c4:	603b      	str	r3, [r7, #0]
 80053c6:	4613      	mov	r3, r2
 80053c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80053ca:	88fb      	ldrh	r3, [r7, #6]
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 ff02 	bl	80061d8 <pvPortMalloc>
 80053d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00e      	beq.n	80053fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80053dc:	20a0      	movs	r0, #160	@ 0xa0
 80053de:	f000 fefb 	bl	80061d8 <pvPortMalloc>
 80053e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80053f0:	e005      	b.n	80053fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80053f2:	6978      	ldr	r0, [r7, #20]
 80053f4:	f000 ffbe 	bl	8006374 <vPortFree>
 80053f8:	e001      	b.n	80053fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80053fa:	2300      	movs	r3, #0
 80053fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d017      	beq.n	8005434 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800540c:	88fa      	ldrh	r2, [r7, #6]
 800540e:	2300      	movs	r3, #0
 8005410:	9303      	str	r3, [sp, #12]
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	9302      	str	r3, [sp, #8]
 8005416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005418:	9301      	str	r3, [sp, #4]
 800541a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	68b9      	ldr	r1, [r7, #8]
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f000 f80e 	bl	8005444 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005428:	69f8      	ldr	r0, [r7, #28]
 800542a:	f000 f8ab 	bl	8005584 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800542e:	2301      	movs	r3, #1
 8005430:	61bb      	str	r3, [r7, #24]
 8005432:	e002      	b.n	800543a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005434:	f04f 33ff 	mov.w	r3, #4294967295
 8005438:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800543a:	69bb      	ldr	r3, [r7, #24]
	}
 800543c:	4618      	mov	r0, r3
 800543e:	3720      	adds	r7, #32
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b088      	sub	sp, #32
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
 8005450:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005454:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800545c:	3b01      	subs	r3, #1
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	f023 0307 	bic.w	r3, r3, #7
 800546a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	f003 0307 	and.w	r3, r3, #7
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00b      	beq.n	800548e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800547a:	f383 8811 	msr	BASEPRI, r3
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	f3bf 8f4f 	dsb	sy
 8005486:	617b      	str	r3, [r7, #20]
}
 8005488:	bf00      	nop
 800548a:	bf00      	nop
 800548c:	e7fd      	b.n	800548a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d01f      	beq.n	80054d4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005494:	2300      	movs	r3, #0
 8005496:	61fb      	str	r3, [r7, #28]
 8005498:	e012      	b.n	80054c0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	4413      	add	r3, r2
 80054a0:	7819      	ldrb	r1, [r3, #0]
 80054a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	4413      	add	r3, r2
 80054a8:	3334      	adds	r3, #52	@ 0x34
 80054aa:	460a      	mov	r2, r1
 80054ac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	4413      	add	r3, r2
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d006      	beq.n	80054c8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	3301      	adds	r3, #1
 80054be:	61fb      	str	r3, [r7, #28]
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	2b0f      	cmp	r3, #15
 80054c4:	d9e9      	bls.n	800549a <prvInitialiseNewTask+0x56>
 80054c6:	e000      	b.n	80054ca <prvInitialiseNewTask+0x86>
			{
				break;
 80054c8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80054ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80054d2:	e003      	b.n	80054dc <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80054d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80054dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054de:	2b06      	cmp	r3, #6
 80054e0:	d901      	bls.n	80054e6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80054e2:	2306      	movs	r3, #6
 80054e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80054e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054ea:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80054ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054f0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80054f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f4:	2200      	movs	r2, #0
 80054f6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80054f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fa:	3304      	adds	r3, #4
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7ff fe68 	bl	80051d2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005504:	3318      	adds	r3, #24
 8005506:	4618      	mov	r0, r3
 8005508:	f7ff fe63 	bl	80051d2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800550c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005510:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005514:	f1c3 0207 	rsb	r2, r3, #7
 8005518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800551a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800551c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800551e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005520:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005524:	2200      	movs	r2, #0
 8005526:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800552a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552c:	2200      	movs	r2, #0
 800552e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005534:	334c      	adds	r3, #76	@ 0x4c
 8005536:	224c      	movs	r2, #76	@ 0x4c
 8005538:	2100      	movs	r1, #0
 800553a:	4618      	mov	r0, r3
 800553c:	f001 f9d9 	bl	80068f2 <memset>
 8005540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005542:	4a0d      	ldr	r2, [pc, #52]	@ (8005578 <prvInitialiseNewTask+0x134>)
 8005544:	651a      	str	r2, [r3, #80]	@ 0x50
 8005546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005548:	4a0c      	ldr	r2, [pc, #48]	@ (800557c <prvInitialiseNewTask+0x138>)
 800554a:	655a      	str	r2, [r3, #84]	@ 0x54
 800554c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554e:	4a0c      	ldr	r2, [pc, #48]	@ (8005580 <prvInitialiseNewTask+0x13c>)
 8005550:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	68f9      	ldr	r1, [r7, #12]
 8005556:	69b8      	ldr	r0, [r7, #24]
 8005558:	f000 fc2a 	bl	8005db0 <pxPortInitialiseStack>
 800555c:	4602      	mov	r2, r0
 800555e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005560:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005564:	2b00      	cmp	r3, #0
 8005566:	d002      	beq.n	800556e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800556a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800556c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800556e:	bf00      	nop
 8005570:	3720      	adds	r7, #32
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	20004380 	.word	0x20004380
 800557c:	200043e8 	.word	0x200043e8
 8005580:	20004450 	.word	0x20004450

08005584 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800558c:	f000 fd44 	bl	8006018 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005590:	4b2a      	ldr	r3, [pc, #168]	@ (800563c <prvAddNewTaskToReadyList+0xb8>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3301      	adds	r3, #1
 8005596:	4a29      	ldr	r2, [pc, #164]	@ (800563c <prvAddNewTaskToReadyList+0xb8>)
 8005598:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800559a:	4b29      	ldr	r3, [pc, #164]	@ (8005640 <prvAddNewTaskToReadyList+0xbc>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d109      	bne.n	80055b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80055a2:	4a27      	ldr	r2, [pc, #156]	@ (8005640 <prvAddNewTaskToReadyList+0xbc>)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055a8:	4b24      	ldr	r3, [pc, #144]	@ (800563c <prvAddNewTaskToReadyList+0xb8>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d110      	bne.n	80055d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80055b0:	f000 fad4 	bl	8005b5c <prvInitialiseTaskLists>
 80055b4:	e00d      	b.n	80055d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80055b6:	4b23      	ldr	r3, [pc, #140]	@ (8005644 <prvAddNewTaskToReadyList+0xc0>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d109      	bne.n	80055d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80055be:	4b20      	ldr	r3, [pc, #128]	@ (8005640 <prvAddNewTaskToReadyList+0xbc>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d802      	bhi.n	80055d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80055cc:	4a1c      	ldr	r2, [pc, #112]	@ (8005640 <prvAddNewTaskToReadyList+0xbc>)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80055d2:	4b1d      	ldr	r3, [pc, #116]	@ (8005648 <prvAddNewTaskToReadyList+0xc4>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3301      	adds	r3, #1
 80055d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005648 <prvAddNewTaskToReadyList+0xc4>)
 80055da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e0:	2201      	movs	r2, #1
 80055e2:	409a      	lsls	r2, r3
 80055e4:	4b19      	ldr	r3, [pc, #100]	@ (800564c <prvAddNewTaskToReadyList+0xc8>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	4a18      	ldr	r2, [pc, #96]	@ (800564c <prvAddNewTaskToReadyList+0xc8>)
 80055ec:	6013      	str	r3, [r2, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055f2:	4613      	mov	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4a15      	ldr	r2, [pc, #84]	@ (8005650 <prvAddNewTaskToReadyList+0xcc>)
 80055fc:	441a      	add	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	3304      	adds	r3, #4
 8005602:	4619      	mov	r1, r3
 8005604:	4610      	mov	r0, r2
 8005606:	f7ff fdf1 	bl	80051ec <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800560a:	f000 fd37 	bl	800607c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800560e:	4b0d      	ldr	r3, [pc, #52]	@ (8005644 <prvAddNewTaskToReadyList+0xc0>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00e      	beq.n	8005634 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005616:	4b0a      	ldr	r3, [pc, #40]	@ (8005640 <prvAddNewTaskToReadyList+0xbc>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005620:	429a      	cmp	r2, r3
 8005622:	d207      	bcs.n	8005634 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005624:	4b0b      	ldr	r3, [pc, #44]	@ (8005654 <prvAddNewTaskToReadyList+0xd0>)
 8005626:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800562a:	601a      	str	r2, [r3, #0]
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005634:	bf00      	nop
 8005636:	3708      	adds	r7, #8
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	2000072c 	.word	0x2000072c
 8005640:	2000062c 	.word	0x2000062c
 8005644:	20000738 	.word	0x20000738
 8005648:	20000748 	.word	0x20000748
 800564c:	20000734 	.word	0x20000734
 8005650:	20000630 	.word	0x20000630
 8005654:	e000ed04 	.word	0xe000ed04

08005658 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005660:	2300      	movs	r3, #0
 8005662:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d018      	beq.n	800569c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800566a:	4b14      	ldr	r3, [pc, #80]	@ (80056bc <vTaskDelay+0x64>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00b      	beq.n	800568a <vTaskDelay+0x32>
	__asm volatile
 8005672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005676:	f383 8811 	msr	BASEPRI, r3
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	60bb      	str	r3, [r7, #8]
}
 8005684:	bf00      	nop
 8005686:	bf00      	nop
 8005688:	e7fd      	b.n	8005686 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800568a:	f000 f885 	bl	8005798 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800568e:	2100      	movs	r1, #0
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fb27 	bl	8005ce4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005696:	f000 f88d 	bl	80057b4 <xTaskResumeAll>
 800569a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d107      	bne.n	80056b2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80056a2:	4b07      	ldr	r3, [pc, #28]	@ (80056c0 <vTaskDelay+0x68>)
 80056a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80056b2:	bf00      	nop
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	20000754 	.word	0x20000754
 80056c0:	e000ed04 	.word	0xe000ed04

080056c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b08a      	sub	sp, #40	@ 0x28
 80056c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80056ca:	2300      	movs	r3, #0
 80056cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80056ce:	2300      	movs	r3, #0
 80056d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80056d2:	463a      	mov	r2, r7
 80056d4:	1d39      	adds	r1, r7, #4
 80056d6:	f107 0308 	add.w	r3, r7, #8
 80056da:	4618      	mov	r0, r3
 80056dc:	f7fa ff66 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80056e0:	6839      	ldr	r1, [r7, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	9202      	str	r2, [sp, #8]
 80056e8:	9301      	str	r3, [sp, #4]
 80056ea:	2300      	movs	r3, #0
 80056ec:	9300      	str	r3, [sp, #0]
 80056ee:	2300      	movs	r3, #0
 80056f0:	460a      	mov	r2, r1
 80056f2:	4921      	ldr	r1, [pc, #132]	@ (8005778 <vTaskStartScheduler+0xb4>)
 80056f4:	4821      	ldr	r0, [pc, #132]	@ (800577c <vTaskStartScheduler+0xb8>)
 80056f6:	f7ff fe00 	bl	80052fa <xTaskCreateStatic>
 80056fa:	4603      	mov	r3, r0
 80056fc:	4a20      	ldr	r2, [pc, #128]	@ (8005780 <vTaskStartScheduler+0xbc>)
 80056fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005700:	4b1f      	ldr	r3, [pc, #124]	@ (8005780 <vTaskStartScheduler+0xbc>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d002      	beq.n	800570e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005708:	2301      	movs	r3, #1
 800570a:	617b      	str	r3, [r7, #20]
 800570c:	e001      	b.n	8005712 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800570e:	2300      	movs	r3, #0
 8005710:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d11b      	bne.n	8005750 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	613b      	str	r3, [r7, #16]
}
 800572a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800572c:	4b15      	ldr	r3, [pc, #84]	@ (8005784 <vTaskStartScheduler+0xc0>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	334c      	adds	r3, #76	@ 0x4c
 8005732:	4a15      	ldr	r2, [pc, #84]	@ (8005788 <vTaskStartScheduler+0xc4>)
 8005734:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005736:	4b15      	ldr	r3, [pc, #84]	@ (800578c <vTaskStartScheduler+0xc8>)
 8005738:	f04f 32ff 	mov.w	r2, #4294967295
 800573c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800573e:	4b14      	ldr	r3, [pc, #80]	@ (8005790 <vTaskStartScheduler+0xcc>)
 8005740:	2201      	movs	r2, #1
 8005742:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005744:	4b13      	ldr	r3, [pc, #76]	@ (8005794 <vTaskStartScheduler+0xd0>)
 8005746:	2200      	movs	r2, #0
 8005748:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800574a:	f000 fbc1 	bl	8005ed0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800574e:	e00f      	b.n	8005770 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005756:	d10b      	bne.n	8005770 <vTaskStartScheduler+0xac>
	__asm volatile
 8005758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	60fb      	str	r3, [r7, #12]
}
 800576a:	bf00      	nop
 800576c:	bf00      	nop
 800576e:	e7fd      	b.n	800576c <vTaskStartScheduler+0xa8>
}
 8005770:	bf00      	nop
 8005772:	3718      	adds	r7, #24
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	08007840 	.word	0x08007840
 800577c:	08005b2d 	.word	0x08005b2d
 8005780:	20000750 	.word	0x20000750
 8005784:	2000062c 	.word	0x2000062c
 8005788:	20000020 	.word	0x20000020
 800578c:	2000074c 	.word	0x2000074c
 8005790:	20000738 	.word	0x20000738
 8005794:	20000730 	.word	0x20000730

08005798 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005798:	b480      	push	{r7}
 800579a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800579c:	4b04      	ldr	r3, [pc, #16]	@ (80057b0 <vTaskSuspendAll+0x18>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	3301      	adds	r3, #1
 80057a2:	4a03      	ldr	r2, [pc, #12]	@ (80057b0 <vTaskSuspendAll+0x18>)
 80057a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80057a6:	bf00      	nop
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	20000754 	.word	0x20000754

080057b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80057ba:	2300      	movs	r3, #0
 80057bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80057be:	2300      	movs	r3, #0
 80057c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80057c2:	4b42      	ldr	r3, [pc, #264]	@ (80058cc <xTaskResumeAll+0x118>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10b      	bne.n	80057e2 <xTaskResumeAll+0x2e>
	__asm volatile
 80057ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	603b      	str	r3, [r7, #0]
}
 80057dc:	bf00      	nop
 80057de:	bf00      	nop
 80057e0:	e7fd      	b.n	80057de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80057e2:	f000 fc19 	bl	8006018 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80057e6:	4b39      	ldr	r3, [pc, #228]	@ (80058cc <xTaskResumeAll+0x118>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3b01      	subs	r3, #1
 80057ec:	4a37      	ldr	r2, [pc, #220]	@ (80058cc <xTaskResumeAll+0x118>)
 80057ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057f0:	4b36      	ldr	r3, [pc, #216]	@ (80058cc <xTaskResumeAll+0x118>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d161      	bne.n	80058bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80057f8:	4b35      	ldr	r3, [pc, #212]	@ (80058d0 <xTaskResumeAll+0x11c>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d05d      	beq.n	80058bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005800:	e02e      	b.n	8005860 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005802:	4b34      	ldr	r3, [pc, #208]	@ (80058d4 <xTaskResumeAll+0x120>)
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	3318      	adds	r3, #24
 800580e:	4618      	mov	r0, r3
 8005810:	f7ff fd49 	bl	80052a6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	3304      	adds	r3, #4
 8005818:	4618      	mov	r0, r3
 800581a:	f7ff fd44 	bl	80052a6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005822:	2201      	movs	r2, #1
 8005824:	409a      	lsls	r2, r3
 8005826:	4b2c      	ldr	r3, [pc, #176]	@ (80058d8 <xTaskResumeAll+0x124>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4313      	orrs	r3, r2
 800582c:	4a2a      	ldr	r2, [pc, #168]	@ (80058d8 <xTaskResumeAll+0x124>)
 800582e:	6013      	str	r3, [r2, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005834:	4613      	mov	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4a27      	ldr	r2, [pc, #156]	@ (80058dc <xTaskResumeAll+0x128>)
 800583e:	441a      	add	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	3304      	adds	r3, #4
 8005844:	4619      	mov	r1, r3
 8005846:	4610      	mov	r0, r2
 8005848:	f7ff fcd0 	bl	80051ec <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005850:	4b23      	ldr	r3, [pc, #140]	@ (80058e0 <xTaskResumeAll+0x12c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005856:	429a      	cmp	r2, r3
 8005858:	d302      	bcc.n	8005860 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800585a:	4b22      	ldr	r3, [pc, #136]	@ (80058e4 <xTaskResumeAll+0x130>)
 800585c:	2201      	movs	r2, #1
 800585e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005860:	4b1c      	ldr	r3, [pc, #112]	@ (80058d4 <xTaskResumeAll+0x120>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1cc      	bne.n	8005802 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800586e:	f000 fa19 	bl	8005ca4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005872:	4b1d      	ldr	r3, [pc, #116]	@ (80058e8 <xTaskResumeAll+0x134>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d010      	beq.n	80058a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800587e:	f000 f837 	bl	80058f0 <xTaskIncrementTick>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005888:	4b16      	ldr	r3, [pc, #88]	@ (80058e4 <xTaskResumeAll+0x130>)
 800588a:	2201      	movs	r2, #1
 800588c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	3b01      	subs	r3, #1
 8005892:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1f1      	bne.n	800587e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800589a:	4b13      	ldr	r3, [pc, #76]	@ (80058e8 <xTaskResumeAll+0x134>)
 800589c:	2200      	movs	r2, #0
 800589e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80058a0:	4b10      	ldr	r3, [pc, #64]	@ (80058e4 <xTaskResumeAll+0x130>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d009      	beq.n	80058bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80058a8:	2301      	movs	r3, #1
 80058aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80058ac:	4b0f      	ldr	r3, [pc, #60]	@ (80058ec <xTaskResumeAll+0x138>)
 80058ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	f3bf 8f4f 	dsb	sy
 80058b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80058bc:	f000 fbde 	bl	800607c <vPortExitCritical>

	return xAlreadyYielded;
 80058c0:	68bb      	ldr	r3, [r7, #8]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	20000754 	.word	0x20000754
 80058d0:	2000072c 	.word	0x2000072c
 80058d4:	200006ec 	.word	0x200006ec
 80058d8:	20000734 	.word	0x20000734
 80058dc:	20000630 	.word	0x20000630
 80058e0:	2000062c 	.word	0x2000062c
 80058e4:	20000740 	.word	0x20000740
 80058e8:	2000073c 	.word	0x2000073c
 80058ec:	e000ed04 	.word	0xe000ed04

080058f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80058f6:	2300      	movs	r3, #0
 80058f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058fa:	4b4f      	ldr	r3, [pc, #316]	@ (8005a38 <xTaskIncrementTick+0x148>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f040 808f 	bne.w	8005a22 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005904:	4b4d      	ldr	r3, [pc, #308]	@ (8005a3c <xTaskIncrementTick+0x14c>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	3301      	adds	r3, #1
 800590a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800590c:	4a4b      	ldr	r2, [pc, #300]	@ (8005a3c <xTaskIncrementTick+0x14c>)
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d121      	bne.n	800595c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005918:	4b49      	ldr	r3, [pc, #292]	@ (8005a40 <xTaskIncrementTick+0x150>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00b      	beq.n	800593a <xTaskIncrementTick+0x4a>
	__asm volatile
 8005922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005926:	f383 8811 	msr	BASEPRI, r3
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	603b      	str	r3, [r7, #0]
}
 8005934:	bf00      	nop
 8005936:	bf00      	nop
 8005938:	e7fd      	b.n	8005936 <xTaskIncrementTick+0x46>
 800593a:	4b41      	ldr	r3, [pc, #260]	@ (8005a40 <xTaskIncrementTick+0x150>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	60fb      	str	r3, [r7, #12]
 8005940:	4b40      	ldr	r3, [pc, #256]	@ (8005a44 <xTaskIncrementTick+0x154>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a3e      	ldr	r2, [pc, #248]	@ (8005a40 <xTaskIncrementTick+0x150>)
 8005946:	6013      	str	r3, [r2, #0]
 8005948:	4a3e      	ldr	r2, [pc, #248]	@ (8005a44 <xTaskIncrementTick+0x154>)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6013      	str	r3, [r2, #0]
 800594e:	4b3e      	ldr	r3, [pc, #248]	@ (8005a48 <xTaskIncrementTick+0x158>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3301      	adds	r3, #1
 8005954:	4a3c      	ldr	r2, [pc, #240]	@ (8005a48 <xTaskIncrementTick+0x158>)
 8005956:	6013      	str	r3, [r2, #0]
 8005958:	f000 f9a4 	bl	8005ca4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800595c:	4b3b      	ldr	r3, [pc, #236]	@ (8005a4c <xTaskIncrementTick+0x15c>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	429a      	cmp	r2, r3
 8005964:	d348      	bcc.n	80059f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005966:	4b36      	ldr	r3, [pc, #216]	@ (8005a40 <xTaskIncrementTick+0x150>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d104      	bne.n	800597a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005970:	4b36      	ldr	r3, [pc, #216]	@ (8005a4c <xTaskIncrementTick+0x15c>)
 8005972:	f04f 32ff 	mov.w	r2, #4294967295
 8005976:	601a      	str	r2, [r3, #0]
					break;
 8005978:	e03e      	b.n	80059f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800597a:	4b31      	ldr	r3, [pc, #196]	@ (8005a40 <xTaskIncrementTick+0x150>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	429a      	cmp	r2, r3
 8005990:	d203      	bcs.n	800599a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005992:	4a2e      	ldr	r2, [pc, #184]	@ (8005a4c <xTaskIncrementTick+0x15c>)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005998:	e02e      	b.n	80059f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	3304      	adds	r3, #4
 800599e:	4618      	mov	r0, r3
 80059a0:	f7ff fc81 	bl	80052a6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d004      	beq.n	80059b6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	3318      	adds	r3, #24
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7ff fc78 	bl	80052a6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ba:	2201      	movs	r2, #1
 80059bc:	409a      	lsls	r2, r3
 80059be:	4b24      	ldr	r3, [pc, #144]	@ (8005a50 <xTaskIncrementTick+0x160>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	4a22      	ldr	r2, [pc, #136]	@ (8005a50 <xTaskIncrementTick+0x160>)
 80059c6:	6013      	str	r3, [r2, #0]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059cc:	4613      	mov	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4413      	add	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005a54 <xTaskIncrementTick+0x164>)
 80059d6:	441a      	add	r2, r3
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	3304      	adds	r3, #4
 80059dc:	4619      	mov	r1, r3
 80059de:	4610      	mov	r0, r2
 80059e0:	f7ff fc04 	bl	80051ec <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005a58 <xTaskIncrementTick+0x168>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d3b9      	bcc.n	8005966 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80059f2:	2301      	movs	r3, #1
 80059f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059f6:	e7b6      	b.n	8005966 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059f8:	4b17      	ldr	r3, [pc, #92]	@ (8005a58 <xTaskIncrementTick+0x168>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059fe:	4915      	ldr	r1, [pc, #84]	@ (8005a54 <xTaskIncrementTick+0x164>)
 8005a00:	4613      	mov	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	440b      	add	r3, r1
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d901      	bls.n	8005a14 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005a10:	2301      	movs	r3, #1
 8005a12:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005a14:	4b11      	ldr	r3, [pc, #68]	@ (8005a5c <xTaskIncrementTick+0x16c>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d007      	beq.n	8005a2c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	617b      	str	r3, [r7, #20]
 8005a20:	e004      	b.n	8005a2c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005a22:	4b0f      	ldr	r3, [pc, #60]	@ (8005a60 <xTaskIncrementTick+0x170>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	3301      	adds	r3, #1
 8005a28:	4a0d      	ldr	r2, [pc, #52]	@ (8005a60 <xTaskIncrementTick+0x170>)
 8005a2a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005a2c:	697b      	ldr	r3, [r7, #20]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3718      	adds	r7, #24
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	20000754 	.word	0x20000754
 8005a3c:	20000730 	.word	0x20000730
 8005a40:	200006e4 	.word	0x200006e4
 8005a44:	200006e8 	.word	0x200006e8
 8005a48:	20000744 	.word	0x20000744
 8005a4c:	2000074c 	.word	0x2000074c
 8005a50:	20000734 	.word	0x20000734
 8005a54:	20000630 	.word	0x20000630
 8005a58:	2000062c 	.word	0x2000062c
 8005a5c:	20000740 	.word	0x20000740
 8005a60:	2000073c 	.word	0x2000073c

08005a64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a64:	b480      	push	{r7}
 8005a66:	b087      	sub	sp, #28
 8005a68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a6a:	4b2a      	ldr	r3, [pc, #168]	@ (8005b14 <vTaskSwitchContext+0xb0>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a72:	4b29      	ldr	r3, [pc, #164]	@ (8005b18 <vTaskSwitchContext+0xb4>)
 8005a74:	2201      	movs	r2, #1
 8005a76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a78:	e045      	b.n	8005b06 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005a7a:	4b27      	ldr	r3, [pc, #156]	@ (8005b18 <vTaskSwitchContext+0xb4>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a80:	4b26      	ldr	r3, [pc, #152]	@ (8005b1c <vTaskSwitchContext+0xb8>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	fab3 f383 	clz	r3, r3
 8005a8c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005a8e:	7afb      	ldrb	r3, [r7, #11]
 8005a90:	f1c3 031f 	rsb	r3, r3, #31
 8005a94:	617b      	str	r3, [r7, #20]
 8005a96:	4922      	ldr	r1, [pc, #136]	@ (8005b20 <vTaskSwitchContext+0xbc>)
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4413      	add	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	440b      	add	r3, r1
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10b      	bne.n	8005ac2 <vTaskSwitchContext+0x5e>
	__asm volatile
 8005aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aae:	f383 8811 	msr	BASEPRI, r3
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	f3bf 8f4f 	dsb	sy
 8005aba:	607b      	str	r3, [r7, #4]
}
 8005abc:	bf00      	nop
 8005abe:	bf00      	nop
 8005ac0:	e7fd      	b.n	8005abe <vTaskSwitchContext+0x5a>
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4a14      	ldr	r2, [pc, #80]	@ (8005b20 <vTaskSwitchContext+0xbc>)
 8005ace:	4413      	add	r3, r2
 8005ad0:	613b      	str	r3, [r7, #16]
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	605a      	str	r2, [r3, #4]
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	3308      	adds	r3, #8
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d104      	bne.n	8005af2 <vTaskSwitchContext+0x8e>
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	605a      	str	r2, [r3, #4]
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	4a0a      	ldr	r2, [pc, #40]	@ (8005b24 <vTaskSwitchContext+0xc0>)
 8005afa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005afc:	4b09      	ldr	r3, [pc, #36]	@ (8005b24 <vTaskSwitchContext+0xc0>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	334c      	adds	r3, #76	@ 0x4c
 8005b02:	4a09      	ldr	r2, [pc, #36]	@ (8005b28 <vTaskSwitchContext+0xc4>)
 8005b04:	6013      	str	r3, [r2, #0]
}
 8005b06:	bf00      	nop
 8005b08:	371c      	adds	r7, #28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	20000754 	.word	0x20000754
 8005b18:	20000740 	.word	0x20000740
 8005b1c:	20000734 	.word	0x20000734
 8005b20:	20000630 	.word	0x20000630
 8005b24:	2000062c 	.word	0x2000062c
 8005b28:	20000020 	.word	0x20000020

08005b2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b34:	f000 f852 	bl	8005bdc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b38:	4b06      	ldr	r3, [pc, #24]	@ (8005b54 <prvIdleTask+0x28>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d9f9      	bls.n	8005b34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b40:	4b05      	ldr	r3, [pc, #20]	@ (8005b58 <prvIdleTask+0x2c>)
 8005b42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b46:	601a      	str	r2, [r3, #0]
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b50:	e7f0      	b.n	8005b34 <prvIdleTask+0x8>
 8005b52:	bf00      	nop
 8005b54:	20000630 	.word	0x20000630
 8005b58:	e000ed04 	.word	0xe000ed04

08005b5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b62:	2300      	movs	r3, #0
 8005b64:	607b      	str	r3, [r7, #4]
 8005b66:	e00c      	b.n	8005b82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4413      	add	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4a12      	ldr	r2, [pc, #72]	@ (8005bbc <prvInitialiseTaskLists+0x60>)
 8005b74:	4413      	add	r3, r2
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7ff fb0b 	bl	8005192 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	607b      	str	r3, [r7, #4]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2b06      	cmp	r3, #6
 8005b86:	d9ef      	bls.n	8005b68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b88:	480d      	ldr	r0, [pc, #52]	@ (8005bc0 <prvInitialiseTaskLists+0x64>)
 8005b8a:	f7ff fb02 	bl	8005192 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b8e:	480d      	ldr	r0, [pc, #52]	@ (8005bc4 <prvInitialiseTaskLists+0x68>)
 8005b90:	f7ff faff 	bl	8005192 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b94:	480c      	ldr	r0, [pc, #48]	@ (8005bc8 <prvInitialiseTaskLists+0x6c>)
 8005b96:	f7ff fafc 	bl	8005192 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b9a:	480c      	ldr	r0, [pc, #48]	@ (8005bcc <prvInitialiseTaskLists+0x70>)
 8005b9c:	f7ff faf9 	bl	8005192 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ba0:	480b      	ldr	r0, [pc, #44]	@ (8005bd0 <prvInitialiseTaskLists+0x74>)
 8005ba2:	f7ff faf6 	bl	8005192 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd4 <prvInitialiseTaskLists+0x78>)
 8005ba8:	4a05      	ldr	r2, [pc, #20]	@ (8005bc0 <prvInitialiseTaskLists+0x64>)
 8005baa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005bac:	4b0a      	ldr	r3, [pc, #40]	@ (8005bd8 <prvInitialiseTaskLists+0x7c>)
 8005bae:	4a05      	ldr	r2, [pc, #20]	@ (8005bc4 <prvInitialiseTaskLists+0x68>)
 8005bb0:	601a      	str	r2, [r3, #0]
}
 8005bb2:	bf00      	nop
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	20000630 	.word	0x20000630
 8005bc0:	200006bc 	.word	0x200006bc
 8005bc4:	200006d0 	.word	0x200006d0
 8005bc8:	200006ec 	.word	0x200006ec
 8005bcc:	20000700 	.word	0x20000700
 8005bd0:	20000718 	.word	0x20000718
 8005bd4:	200006e4 	.word	0x200006e4
 8005bd8:	200006e8 	.word	0x200006e8

08005bdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005be2:	e019      	b.n	8005c18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005be4:	f000 fa18 	bl	8006018 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005be8:	4b10      	ldr	r3, [pc, #64]	@ (8005c2c <prvCheckTasksWaitingTermination+0x50>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7ff fb56 	bl	80052a6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8005c30 <prvCheckTasksWaitingTermination+0x54>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	4a0b      	ldr	r2, [pc, #44]	@ (8005c30 <prvCheckTasksWaitingTermination+0x54>)
 8005c02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c04:	4b0b      	ldr	r3, [pc, #44]	@ (8005c34 <prvCheckTasksWaitingTermination+0x58>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8005c34 <prvCheckTasksWaitingTermination+0x58>)
 8005c0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c0e:	f000 fa35 	bl	800607c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f810 	bl	8005c38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c18:	4b06      	ldr	r3, [pc, #24]	@ (8005c34 <prvCheckTasksWaitingTermination+0x58>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1e1      	bne.n	8005be4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c20:	bf00      	nop
 8005c22:	bf00      	nop
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	20000700 	.word	0x20000700
 8005c30:	2000072c 	.word	0x2000072c
 8005c34:	20000714 	.word	0x20000714

08005c38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	334c      	adds	r3, #76	@ 0x4c
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 fec9 	bl	80069dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d108      	bne.n	8005c66 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f000 fb8b 	bl	8006374 <vPortFree>
				vPortFree( pxTCB );
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 fb88 	bl	8006374 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c64:	e019      	b.n	8005c9a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d103      	bne.n	8005c78 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 fb7f 	bl	8006374 <vPortFree>
	}
 8005c76:	e010      	b.n	8005c9a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d00b      	beq.n	8005c9a <prvDeleteTCB+0x62>
	__asm volatile
 8005c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c86:	f383 8811 	msr	BASEPRI, r3
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	60fb      	str	r3, [r7, #12]
}
 8005c94:	bf00      	nop
 8005c96:	bf00      	nop
 8005c98:	e7fd      	b.n	8005c96 <prvDeleteTCB+0x5e>
	}
 8005c9a:	bf00      	nop
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
	...

08005ca4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005caa:	4b0c      	ldr	r3, [pc, #48]	@ (8005cdc <prvResetNextTaskUnblockTime+0x38>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d104      	bne.n	8005cbe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8005ce0 <prvResetNextTaskUnblockTime+0x3c>)
 8005cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8005cba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005cbc:	e008      	b.n	8005cd0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cbe:	4b07      	ldr	r3, [pc, #28]	@ (8005cdc <prvResetNextTaskUnblockTime+0x38>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	4a04      	ldr	r2, [pc, #16]	@ (8005ce0 <prvResetNextTaskUnblockTime+0x3c>)
 8005cce:	6013      	str	r3, [r2, #0]
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	200006e4 	.word	0x200006e4
 8005ce0:	2000074c 	.word	0x2000074c

08005ce4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005cee:	4b29      	ldr	r3, [pc, #164]	@ (8005d94 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cf4:	4b28      	ldr	r3, [pc, #160]	@ (8005d98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	3304      	adds	r3, #4
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7ff fad3 	bl	80052a6 <uxListRemove>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10b      	bne.n	8005d1e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005d06:	4b24      	ldr	r3, [pc, #144]	@ (8005d98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d12:	43da      	mvns	r2, r3
 8005d14:	4b21      	ldr	r3, [pc, #132]	@ (8005d9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4013      	ands	r3, r2
 8005d1a:	4a20      	ldr	r2, [pc, #128]	@ (8005d9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d1c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d24:	d10a      	bne.n	8005d3c <prvAddCurrentTaskToDelayedList+0x58>
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d007      	beq.n	8005d3c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8005d98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3304      	adds	r3, #4
 8005d32:	4619      	mov	r1, r3
 8005d34:	481a      	ldr	r0, [pc, #104]	@ (8005da0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005d36:	f7ff fa59 	bl	80051ec <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d3a:	e026      	b.n	8005d8a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4413      	add	r3, r2
 8005d42:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d44:	4b14      	ldr	r3, [pc, #80]	@ (8005d98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d209      	bcs.n	8005d68 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d54:	4b13      	ldr	r3, [pc, #76]	@ (8005da4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	4b0f      	ldr	r3, [pc, #60]	@ (8005d98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3304      	adds	r3, #4
 8005d5e:	4619      	mov	r1, r3
 8005d60:	4610      	mov	r0, r2
 8005d62:	f7ff fa67 	bl	8005234 <vListInsert>
}
 8005d66:	e010      	b.n	8005d8a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d68:	4b0f      	ldr	r3, [pc, #60]	@ (8005da8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3304      	adds	r3, #4
 8005d72:	4619      	mov	r1, r3
 8005d74:	4610      	mov	r0, r2
 8005d76:	f7ff fa5d 	bl	8005234 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8005dac <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68ba      	ldr	r2, [r7, #8]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d202      	bcs.n	8005d8a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005d84:	4a09      	ldr	r2, [pc, #36]	@ (8005dac <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	6013      	str	r3, [r2, #0]
}
 8005d8a:	bf00      	nop
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	20000730 	.word	0x20000730
 8005d98:	2000062c 	.word	0x2000062c
 8005d9c:	20000734 	.word	0x20000734
 8005da0:	20000718 	.word	0x20000718
 8005da4:	200006e8 	.word	0x200006e8
 8005da8:	200006e4 	.word	0x200006e4
 8005dac:	2000074c 	.word	0x2000074c

08005db0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	3b04      	subs	r3, #4
 8005dc0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005dc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	3b04      	subs	r3, #4
 8005dce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f023 0201 	bic.w	r2, r3, #1
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	3b04      	subs	r3, #4
 8005dde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005de0:	4a0c      	ldr	r2, [pc, #48]	@ (8005e14 <pxPortInitialiseStack+0x64>)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	3b14      	subs	r3, #20
 8005dea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	3b04      	subs	r3, #4
 8005df6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f06f 0202 	mvn.w	r2, #2
 8005dfe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	3b20      	subs	r3, #32
 8005e04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e06:	68fb      	ldr	r3, [r7, #12]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3714      	adds	r7, #20
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr
 8005e14:	08005e19 	.word	0x08005e19

08005e18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e22:	4b13      	ldr	r3, [pc, #76]	@ (8005e70 <prvTaskExitError+0x58>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2a:	d00b      	beq.n	8005e44 <prvTaskExitError+0x2c>
	__asm volatile
 8005e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e30:	f383 8811 	msr	BASEPRI, r3
 8005e34:	f3bf 8f6f 	isb	sy
 8005e38:	f3bf 8f4f 	dsb	sy
 8005e3c:	60fb      	str	r3, [r7, #12]
}
 8005e3e:	bf00      	nop
 8005e40:	bf00      	nop
 8005e42:	e7fd      	b.n	8005e40 <prvTaskExitError+0x28>
	__asm volatile
 8005e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e48:	f383 8811 	msr	BASEPRI, r3
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	60bb      	str	r3, [r7, #8]
}
 8005e56:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005e58:	bf00      	nop
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d0fc      	beq.n	8005e5a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e60:	bf00      	nop
 8005e62:	bf00      	nop
 8005e64:	3714      	adds	r7, #20
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	20000010 	.word	0x20000010
	...

08005e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e80:	4b07      	ldr	r3, [pc, #28]	@ (8005ea0 <pxCurrentTCBConst2>)
 8005e82:	6819      	ldr	r1, [r3, #0]
 8005e84:	6808      	ldr	r0, [r1, #0]
 8005e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e8a:	f380 8809 	msr	PSP, r0
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f04f 0000 	mov.w	r0, #0
 8005e96:	f380 8811 	msr	BASEPRI, r0
 8005e9a:	4770      	bx	lr
 8005e9c:	f3af 8000 	nop.w

08005ea0 <pxCurrentTCBConst2>:
 8005ea0:	2000062c 	.word	0x2000062c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ea4:	bf00      	nop
 8005ea6:	bf00      	nop

08005ea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005ea8:	4808      	ldr	r0, [pc, #32]	@ (8005ecc <prvPortStartFirstTask+0x24>)
 8005eaa:	6800      	ldr	r0, [r0, #0]
 8005eac:	6800      	ldr	r0, [r0, #0]
 8005eae:	f380 8808 	msr	MSP, r0
 8005eb2:	f04f 0000 	mov.w	r0, #0
 8005eb6:	f380 8814 	msr	CONTROL, r0
 8005eba:	b662      	cpsie	i
 8005ebc:	b661      	cpsie	f
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	df00      	svc	0
 8005ec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005eca:	bf00      	nop
 8005ecc:	e000ed08 	.word	0xe000ed08

08005ed0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ed6:	4b47      	ldr	r3, [pc, #284]	@ (8005ff4 <xPortStartScheduler+0x124>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a47      	ldr	r2, [pc, #284]	@ (8005ff8 <xPortStartScheduler+0x128>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d10b      	bne.n	8005ef8 <xPortStartScheduler+0x28>
	__asm volatile
 8005ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	60fb      	str	r3, [r7, #12]
}
 8005ef2:	bf00      	nop
 8005ef4:	bf00      	nop
 8005ef6:	e7fd      	b.n	8005ef4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005ef8:	4b3e      	ldr	r3, [pc, #248]	@ (8005ff4 <xPortStartScheduler+0x124>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a3f      	ldr	r2, [pc, #252]	@ (8005ffc <xPortStartScheduler+0x12c>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d10b      	bne.n	8005f1a <xPortStartScheduler+0x4a>
	__asm volatile
 8005f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f06:	f383 8811 	msr	BASEPRI, r3
 8005f0a:	f3bf 8f6f 	isb	sy
 8005f0e:	f3bf 8f4f 	dsb	sy
 8005f12:	613b      	str	r3, [r7, #16]
}
 8005f14:	bf00      	nop
 8005f16:	bf00      	nop
 8005f18:	e7fd      	b.n	8005f16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f1a:	4b39      	ldr	r3, [pc, #228]	@ (8006000 <xPortStartScheduler+0x130>)
 8005f1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	22ff      	movs	r2, #255	@ 0xff
 8005f2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f34:	78fb      	ldrb	r3, [r7, #3]
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005f3c:	b2da      	uxtb	r2, r3
 8005f3e:	4b31      	ldr	r3, [pc, #196]	@ (8006004 <xPortStartScheduler+0x134>)
 8005f40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f42:	4b31      	ldr	r3, [pc, #196]	@ (8006008 <xPortStartScheduler+0x138>)
 8005f44:	2207      	movs	r2, #7
 8005f46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f48:	e009      	b.n	8005f5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8006008 <xPortStartScheduler+0x138>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	4a2d      	ldr	r2, [pc, #180]	@ (8006008 <xPortStartScheduler+0x138>)
 8005f52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f54:	78fb      	ldrb	r3, [r7, #3]
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	005b      	lsls	r3, r3, #1
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f5e:	78fb      	ldrb	r3, [r7, #3]
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f66:	2b80      	cmp	r3, #128	@ 0x80
 8005f68:	d0ef      	beq.n	8005f4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f6a:	4b27      	ldr	r3, [pc, #156]	@ (8006008 <xPortStartScheduler+0x138>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f1c3 0307 	rsb	r3, r3, #7
 8005f72:	2b04      	cmp	r3, #4
 8005f74:	d00b      	beq.n	8005f8e <xPortStartScheduler+0xbe>
	__asm volatile
 8005f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f7a:	f383 8811 	msr	BASEPRI, r3
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	60bb      	str	r3, [r7, #8]
}
 8005f88:	bf00      	nop
 8005f8a:	bf00      	nop
 8005f8c:	e7fd      	b.n	8005f8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8006008 <xPortStartScheduler+0x138>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	021b      	lsls	r3, r3, #8
 8005f94:	4a1c      	ldr	r2, [pc, #112]	@ (8006008 <xPortStartScheduler+0x138>)
 8005f96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f98:	4b1b      	ldr	r3, [pc, #108]	@ (8006008 <xPortStartScheduler+0x138>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005fa0:	4a19      	ldr	r2, [pc, #100]	@ (8006008 <xPortStartScheduler+0x138>)
 8005fa2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	b2da      	uxtb	r2, r3
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005fac:	4b17      	ldr	r3, [pc, #92]	@ (800600c <xPortStartScheduler+0x13c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a16      	ldr	r2, [pc, #88]	@ (800600c <xPortStartScheduler+0x13c>)
 8005fb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005fb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005fb8:	4b14      	ldr	r3, [pc, #80]	@ (800600c <xPortStartScheduler+0x13c>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a13      	ldr	r2, [pc, #76]	@ (800600c <xPortStartScheduler+0x13c>)
 8005fbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005fc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005fc4:	f000 f8da 	bl	800617c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005fc8:	4b11      	ldr	r3, [pc, #68]	@ (8006010 <xPortStartScheduler+0x140>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005fce:	f000 f8f9 	bl	80061c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005fd2:	4b10      	ldr	r3, [pc, #64]	@ (8006014 <xPortStartScheduler+0x144>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a0f      	ldr	r2, [pc, #60]	@ (8006014 <xPortStartScheduler+0x144>)
 8005fd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005fdc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005fde:	f7ff ff63 	bl	8005ea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005fe2:	f7ff fd3f 	bl	8005a64 <vTaskSwitchContext>
	prvTaskExitError();
 8005fe6:	f7ff ff17 	bl	8005e18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3718      	adds	r7, #24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	e000ed00 	.word	0xe000ed00
 8005ff8:	410fc271 	.word	0x410fc271
 8005ffc:	410fc270 	.word	0x410fc270
 8006000:	e000e400 	.word	0xe000e400
 8006004:	20000758 	.word	0x20000758
 8006008:	2000075c 	.word	0x2000075c
 800600c:	e000ed20 	.word	0xe000ed20
 8006010:	20000010 	.word	0x20000010
 8006014:	e000ef34 	.word	0xe000ef34

08006018 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
	__asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	607b      	str	r3, [r7, #4]
}
 8006030:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006032:	4b10      	ldr	r3, [pc, #64]	@ (8006074 <vPortEnterCritical+0x5c>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	3301      	adds	r3, #1
 8006038:	4a0e      	ldr	r2, [pc, #56]	@ (8006074 <vPortEnterCritical+0x5c>)
 800603a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800603c:	4b0d      	ldr	r3, [pc, #52]	@ (8006074 <vPortEnterCritical+0x5c>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d110      	bne.n	8006066 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006044:	4b0c      	ldr	r3, [pc, #48]	@ (8006078 <vPortEnterCritical+0x60>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00b      	beq.n	8006066 <vPortEnterCritical+0x4e>
	__asm volatile
 800604e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006052:	f383 8811 	msr	BASEPRI, r3
 8006056:	f3bf 8f6f 	isb	sy
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	603b      	str	r3, [r7, #0]
}
 8006060:	bf00      	nop
 8006062:	bf00      	nop
 8006064:	e7fd      	b.n	8006062 <vPortEnterCritical+0x4a>
	}
}
 8006066:	bf00      	nop
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	20000010 	.word	0x20000010
 8006078:	e000ed04 	.word	0xe000ed04

0800607c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006082:	4b12      	ldr	r3, [pc, #72]	@ (80060cc <vPortExitCritical+0x50>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10b      	bne.n	80060a2 <vPortExitCritical+0x26>
	__asm volatile
 800608a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800608e:	f383 8811 	msr	BASEPRI, r3
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	f3bf 8f4f 	dsb	sy
 800609a:	607b      	str	r3, [r7, #4]
}
 800609c:	bf00      	nop
 800609e:	bf00      	nop
 80060a0:	e7fd      	b.n	800609e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80060a2:	4b0a      	ldr	r3, [pc, #40]	@ (80060cc <vPortExitCritical+0x50>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	3b01      	subs	r3, #1
 80060a8:	4a08      	ldr	r2, [pc, #32]	@ (80060cc <vPortExitCritical+0x50>)
 80060aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80060ac:	4b07      	ldr	r3, [pc, #28]	@ (80060cc <vPortExitCritical+0x50>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d105      	bne.n	80060c0 <vPortExitCritical+0x44>
 80060b4:	2300      	movs	r3, #0
 80060b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80060be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr
 80060cc:	20000010 	.word	0x20000010

080060d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80060d0:	f3ef 8009 	mrs	r0, PSP
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	4b15      	ldr	r3, [pc, #84]	@ (8006130 <pxCurrentTCBConst>)
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	f01e 0f10 	tst.w	lr, #16
 80060e0:	bf08      	it	eq
 80060e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80060e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ea:	6010      	str	r0, [r2, #0]
 80060ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80060f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80060f4:	f380 8811 	msr	BASEPRI, r0
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f7ff fcb0 	bl	8005a64 <vTaskSwitchContext>
 8006104:	f04f 0000 	mov.w	r0, #0
 8006108:	f380 8811 	msr	BASEPRI, r0
 800610c:	bc09      	pop	{r0, r3}
 800610e:	6819      	ldr	r1, [r3, #0]
 8006110:	6808      	ldr	r0, [r1, #0]
 8006112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006116:	f01e 0f10 	tst.w	lr, #16
 800611a:	bf08      	it	eq
 800611c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006120:	f380 8809 	msr	PSP, r0
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	f3af 8000 	nop.w

08006130 <pxCurrentTCBConst>:
 8006130:	2000062c 	.word	0x2000062c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006134:	bf00      	nop
 8006136:	bf00      	nop

08006138 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
	__asm volatile
 800613e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	607b      	str	r3, [r7, #4]
}
 8006150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006152:	f7ff fbcd 	bl	80058f0 <xTaskIncrementTick>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800615c:	4b06      	ldr	r3, [pc, #24]	@ (8006178 <SysTick_Handler+0x40>)
 800615e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	2300      	movs	r3, #0
 8006166:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	f383 8811 	msr	BASEPRI, r3
}
 800616e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006170:	bf00      	nop
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	e000ed04 	.word	0xe000ed04

0800617c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800617c:	b480      	push	{r7}
 800617e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006180:	4b0b      	ldr	r3, [pc, #44]	@ (80061b0 <vPortSetupTimerInterrupt+0x34>)
 8006182:	2200      	movs	r2, #0
 8006184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006186:	4b0b      	ldr	r3, [pc, #44]	@ (80061b4 <vPortSetupTimerInterrupt+0x38>)
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800618c:	4b0a      	ldr	r3, [pc, #40]	@ (80061b8 <vPortSetupTimerInterrupt+0x3c>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a0a      	ldr	r2, [pc, #40]	@ (80061bc <vPortSetupTimerInterrupt+0x40>)
 8006192:	fba2 2303 	umull	r2, r3, r2, r3
 8006196:	099b      	lsrs	r3, r3, #6
 8006198:	4a09      	ldr	r2, [pc, #36]	@ (80061c0 <vPortSetupTimerInterrupt+0x44>)
 800619a:	3b01      	subs	r3, #1
 800619c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800619e:	4b04      	ldr	r3, [pc, #16]	@ (80061b0 <vPortSetupTimerInterrupt+0x34>)
 80061a0:	2207      	movs	r2, #7
 80061a2:	601a      	str	r2, [r3, #0]
}
 80061a4:	bf00      	nop
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	e000e010 	.word	0xe000e010
 80061b4:	e000e018 	.word	0xe000e018
 80061b8:	20000004 	.word	0x20000004
 80061bc:	10624dd3 	.word	0x10624dd3
 80061c0:	e000e014 	.word	0xe000e014

080061c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80061c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80061d4 <vPortEnableVFP+0x10>
 80061c8:	6801      	ldr	r1, [r0, #0]
 80061ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80061ce:	6001      	str	r1, [r0, #0]
 80061d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80061d2:	bf00      	nop
 80061d4:	e000ed88 	.word	0xe000ed88

080061d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b08a      	sub	sp, #40	@ 0x28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80061e0:	2300      	movs	r3, #0
 80061e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80061e4:	f7ff fad8 	bl	8005798 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80061e8:	4b5c      	ldr	r3, [pc, #368]	@ (800635c <pvPortMalloc+0x184>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80061f0:	f000 f924 	bl	800643c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80061f4:	4b5a      	ldr	r3, [pc, #360]	@ (8006360 <pvPortMalloc+0x188>)
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4013      	ands	r3, r2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f040 8095 	bne.w	800632c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d01e      	beq.n	8006246 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006208:	2208      	movs	r2, #8
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4413      	add	r3, r2
 800620e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f003 0307 	and.w	r3, r3, #7
 8006216:	2b00      	cmp	r3, #0
 8006218:	d015      	beq.n	8006246 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f023 0307 	bic.w	r3, r3, #7
 8006220:	3308      	adds	r3, #8
 8006222:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f003 0307 	and.w	r3, r3, #7
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00b      	beq.n	8006246 <pvPortMalloc+0x6e>
	__asm volatile
 800622e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	617b      	str	r3, [r7, #20]
}
 8006240:	bf00      	nop
 8006242:	bf00      	nop
 8006244:	e7fd      	b.n	8006242 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d06f      	beq.n	800632c <pvPortMalloc+0x154>
 800624c:	4b45      	ldr	r3, [pc, #276]	@ (8006364 <pvPortMalloc+0x18c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	429a      	cmp	r2, r3
 8006254:	d86a      	bhi.n	800632c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006256:	4b44      	ldr	r3, [pc, #272]	@ (8006368 <pvPortMalloc+0x190>)
 8006258:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800625a:	4b43      	ldr	r3, [pc, #268]	@ (8006368 <pvPortMalloc+0x190>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006260:	e004      	b.n	800626c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006264:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800626c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	429a      	cmp	r2, r3
 8006274:	d903      	bls.n	800627e <pvPortMalloc+0xa6>
 8006276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1f1      	bne.n	8006262 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800627e:	4b37      	ldr	r3, [pc, #220]	@ (800635c <pvPortMalloc+0x184>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006284:	429a      	cmp	r2, r3
 8006286:	d051      	beq.n	800632c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006288:	6a3b      	ldr	r3, [r7, #32]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2208      	movs	r2, #8
 800628e:	4413      	add	r3, r2
 8006290:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	6a3b      	ldr	r3, [r7, #32]
 8006298:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800629a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	1ad2      	subs	r2, r2, r3
 80062a2:	2308      	movs	r3, #8
 80062a4:	005b      	lsls	r3, r3, #1
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d920      	bls.n	80062ec <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80062aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4413      	add	r3, r2
 80062b0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	f003 0307 	and.w	r3, r3, #7
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00b      	beq.n	80062d4 <pvPortMalloc+0xfc>
	__asm volatile
 80062bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c0:	f383 8811 	msr	BASEPRI, r3
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	613b      	str	r3, [r7, #16]
}
 80062ce:	bf00      	nop
 80062d0:	bf00      	nop
 80062d2:	e7fd      	b.n	80062d0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80062d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	1ad2      	subs	r2, r2, r3
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80062e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80062e6:	69b8      	ldr	r0, [r7, #24]
 80062e8:	f000 f90a 	bl	8006500 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80062ec:	4b1d      	ldr	r3, [pc, #116]	@ (8006364 <pvPortMalloc+0x18c>)
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	4a1b      	ldr	r2, [pc, #108]	@ (8006364 <pvPortMalloc+0x18c>)
 80062f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80062fa:	4b1a      	ldr	r3, [pc, #104]	@ (8006364 <pvPortMalloc+0x18c>)
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	4b1b      	ldr	r3, [pc, #108]	@ (800636c <pvPortMalloc+0x194>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	429a      	cmp	r2, r3
 8006304:	d203      	bcs.n	800630e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006306:	4b17      	ldr	r3, [pc, #92]	@ (8006364 <pvPortMalloc+0x18c>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a18      	ldr	r2, [pc, #96]	@ (800636c <pvPortMalloc+0x194>)
 800630c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800630e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006310:	685a      	ldr	r2, [r3, #4]
 8006312:	4b13      	ldr	r3, [pc, #76]	@ (8006360 <pvPortMalloc+0x188>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	431a      	orrs	r2, r3
 8006318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800631c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631e:	2200      	movs	r2, #0
 8006320:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006322:	4b13      	ldr	r3, [pc, #76]	@ (8006370 <pvPortMalloc+0x198>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3301      	adds	r3, #1
 8006328:	4a11      	ldr	r2, [pc, #68]	@ (8006370 <pvPortMalloc+0x198>)
 800632a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800632c:	f7ff fa42 	bl	80057b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	f003 0307 	and.w	r3, r3, #7
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00b      	beq.n	8006352 <pvPortMalloc+0x17a>
	__asm volatile
 800633a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800633e:	f383 8811 	msr	BASEPRI, r3
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	f3bf 8f4f 	dsb	sy
 800634a:	60fb      	str	r3, [r7, #12]
}
 800634c:	bf00      	nop
 800634e:	bf00      	nop
 8006350:	e7fd      	b.n	800634e <pvPortMalloc+0x176>
	return pvReturn;
 8006352:	69fb      	ldr	r3, [r7, #28]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3728      	adds	r7, #40	@ 0x28
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	20004368 	.word	0x20004368
 8006360:	2000437c 	.word	0x2000437c
 8006364:	2000436c 	.word	0x2000436c
 8006368:	20004360 	.word	0x20004360
 800636c:	20004370 	.word	0x20004370
 8006370:	20004374 	.word	0x20004374

08006374 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b086      	sub	sp, #24
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d04f      	beq.n	8006426 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006386:	2308      	movs	r3, #8
 8006388:	425b      	negs	r3, r3
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	4413      	add	r3, r2
 800638e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	4b25      	ldr	r3, [pc, #148]	@ (8006430 <vPortFree+0xbc>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4013      	ands	r3, r2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10b      	bne.n	80063ba <vPortFree+0x46>
	__asm volatile
 80063a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	60fb      	str	r3, [r7, #12]
}
 80063b4:	bf00      	nop
 80063b6:	bf00      	nop
 80063b8:	e7fd      	b.n	80063b6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00b      	beq.n	80063da <vPortFree+0x66>
	__asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	60bb      	str	r3, [r7, #8]
}
 80063d4:	bf00      	nop
 80063d6:	bf00      	nop
 80063d8:	e7fd      	b.n	80063d6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	4b14      	ldr	r3, [pc, #80]	@ (8006430 <vPortFree+0xbc>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4013      	ands	r3, r2
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d01e      	beq.n	8006426 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d11a      	bne.n	8006426 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	4b0e      	ldr	r3, [pc, #56]	@ (8006430 <vPortFree+0xbc>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	43db      	mvns	r3, r3
 80063fa:	401a      	ands	r2, r3
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006400:	f7ff f9ca 	bl	8005798 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	4b0a      	ldr	r3, [pc, #40]	@ (8006434 <vPortFree+0xc0>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4413      	add	r3, r2
 800640e:	4a09      	ldr	r2, [pc, #36]	@ (8006434 <vPortFree+0xc0>)
 8006410:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006412:	6938      	ldr	r0, [r7, #16]
 8006414:	f000 f874 	bl	8006500 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006418:	4b07      	ldr	r3, [pc, #28]	@ (8006438 <vPortFree+0xc4>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3301      	adds	r3, #1
 800641e:	4a06      	ldr	r2, [pc, #24]	@ (8006438 <vPortFree+0xc4>)
 8006420:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006422:	f7ff f9c7 	bl	80057b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006426:	bf00      	nop
 8006428:	3718      	adds	r7, #24
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	2000437c 	.word	0x2000437c
 8006434:	2000436c 	.word	0x2000436c
 8006438:	20004378 	.word	0x20004378

0800643c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006442:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006446:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006448:	4b27      	ldr	r3, [pc, #156]	@ (80064e8 <prvHeapInit+0xac>)
 800644a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f003 0307 	and.w	r3, r3, #7
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00c      	beq.n	8006470 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	3307      	adds	r3, #7
 800645a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f023 0307 	bic.w	r3, r3, #7
 8006462:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	4a1f      	ldr	r2, [pc, #124]	@ (80064e8 <prvHeapInit+0xac>)
 800646c:	4413      	add	r3, r2
 800646e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006474:	4a1d      	ldr	r2, [pc, #116]	@ (80064ec <prvHeapInit+0xb0>)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800647a:	4b1c      	ldr	r3, [pc, #112]	@ (80064ec <prvHeapInit+0xb0>)
 800647c:	2200      	movs	r2, #0
 800647e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	4413      	add	r3, r2
 8006486:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006488:	2208      	movs	r2, #8
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	1a9b      	subs	r3, r3, r2
 800648e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f023 0307 	bic.w	r3, r3, #7
 8006496:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	4a15      	ldr	r2, [pc, #84]	@ (80064f0 <prvHeapInit+0xb4>)
 800649c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800649e:	4b14      	ldr	r3, [pc, #80]	@ (80064f0 <prvHeapInit+0xb4>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2200      	movs	r2, #0
 80064a4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80064a6:	4b12      	ldr	r3, [pc, #72]	@ (80064f0 <prvHeapInit+0xb4>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2200      	movs	r2, #0
 80064ac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	1ad2      	subs	r2, r2, r3
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80064bc:	4b0c      	ldr	r3, [pc, #48]	@ (80064f0 <prvHeapInit+0xb4>)
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	4a0a      	ldr	r2, [pc, #40]	@ (80064f4 <prvHeapInit+0xb8>)
 80064ca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	4a09      	ldr	r2, [pc, #36]	@ (80064f8 <prvHeapInit+0xbc>)
 80064d2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80064d4:	4b09      	ldr	r3, [pc, #36]	@ (80064fc <prvHeapInit+0xc0>)
 80064d6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80064da:	601a      	str	r2, [r3, #0]
}
 80064dc:	bf00      	nop
 80064de:	3714      	adds	r7, #20
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr
 80064e8:	20000760 	.word	0x20000760
 80064ec:	20004360 	.word	0x20004360
 80064f0:	20004368 	.word	0x20004368
 80064f4:	20004370 	.word	0x20004370
 80064f8:	2000436c 	.word	0x2000436c
 80064fc:	2000437c 	.word	0x2000437c

08006500 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006508:	4b28      	ldr	r3, [pc, #160]	@ (80065ac <prvInsertBlockIntoFreeList+0xac>)
 800650a:	60fb      	str	r3, [r7, #12]
 800650c:	e002      	b.n	8006514 <prvInsertBlockIntoFreeList+0x14>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	60fb      	str	r3, [r7, #12]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	429a      	cmp	r2, r3
 800651c:	d8f7      	bhi.n	800650e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	4413      	add	r3, r2
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	429a      	cmp	r2, r3
 800652e:	d108      	bne.n	8006542 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	441a      	add	r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	441a      	add	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	429a      	cmp	r2, r3
 8006554:	d118      	bne.n	8006588 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	4b15      	ldr	r3, [pc, #84]	@ (80065b0 <prvInsertBlockIntoFreeList+0xb0>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	429a      	cmp	r2, r3
 8006560:	d00d      	beq.n	800657e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	441a      	add	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	601a      	str	r2, [r3, #0]
 800657c:	e008      	b.n	8006590 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800657e:	4b0c      	ldr	r3, [pc, #48]	@ (80065b0 <prvInsertBlockIntoFreeList+0xb0>)
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	601a      	str	r2, [r3, #0]
 8006586:	e003      	b.n	8006590 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	429a      	cmp	r2, r3
 8006596:	d002      	beq.n	800659e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800659e:	bf00      	nop
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	20004360 	.word	0x20004360
 80065b0:	20004368 	.word	0x20004368

080065b4 <atoi>:
 80065b4:	220a      	movs	r2, #10
 80065b6:	2100      	movs	r1, #0
 80065b8:	f000 b87a 	b.w	80066b0 <strtol>

080065bc <_strtol_l.isra.0>:
 80065bc:	2b24      	cmp	r3, #36	@ 0x24
 80065be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065c2:	4686      	mov	lr, r0
 80065c4:	4690      	mov	r8, r2
 80065c6:	d801      	bhi.n	80065cc <_strtol_l.isra.0+0x10>
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d106      	bne.n	80065da <_strtol_l.isra.0+0x1e>
 80065cc:	f000 fa9a 	bl	8006b04 <__errno>
 80065d0:	2316      	movs	r3, #22
 80065d2:	6003      	str	r3, [r0, #0]
 80065d4:	2000      	movs	r0, #0
 80065d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065da:	4834      	ldr	r0, [pc, #208]	@ (80066ac <_strtol_l.isra.0+0xf0>)
 80065dc:	460d      	mov	r5, r1
 80065de:	462a      	mov	r2, r5
 80065e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80065e4:	5d06      	ldrb	r6, [r0, r4]
 80065e6:	f016 0608 	ands.w	r6, r6, #8
 80065ea:	d1f8      	bne.n	80065de <_strtol_l.isra.0+0x22>
 80065ec:	2c2d      	cmp	r4, #45	@ 0x2d
 80065ee:	d110      	bne.n	8006612 <_strtol_l.isra.0+0x56>
 80065f0:	782c      	ldrb	r4, [r5, #0]
 80065f2:	2601      	movs	r6, #1
 80065f4:	1c95      	adds	r5, r2, #2
 80065f6:	f033 0210 	bics.w	r2, r3, #16
 80065fa:	d115      	bne.n	8006628 <_strtol_l.isra.0+0x6c>
 80065fc:	2c30      	cmp	r4, #48	@ 0x30
 80065fe:	d10d      	bne.n	800661c <_strtol_l.isra.0+0x60>
 8006600:	782a      	ldrb	r2, [r5, #0]
 8006602:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006606:	2a58      	cmp	r2, #88	@ 0x58
 8006608:	d108      	bne.n	800661c <_strtol_l.isra.0+0x60>
 800660a:	786c      	ldrb	r4, [r5, #1]
 800660c:	3502      	adds	r5, #2
 800660e:	2310      	movs	r3, #16
 8006610:	e00a      	b.n	8006628 <_strtol_l.isra.0+0x6c>
 8006612:	2c2b      	cmp	r4, #43	@ 0x2b
 8006614:	bf04      	itt	eq
 8006616:	782c      	ldrbeq	r4, [r5, #0]
 8006618:	1c95      	addeq	r5, r2, #2
 800661a:	e7ec      	b.n	80065f6 <_strtol_l.isra.0+0x3a>
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1f6      	bne.n	800660e <_strtol_l.isra.0+0x52>
 8006620:	2c30      	cmp	r4, #48	@ 0x30
 8006622:	bf14      	ite	ne
 8006624:	230a      	movne	r3, #10
 8006626:	2308      	moveq	r3, #8
 8006628:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800662c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006630:	2200      	movs	r2, #0
 8006632:	fbbc f9f3 	udiv	r9, ip, r3
 8006636:	4610      	mov	r0, r2
 8006638:	fb03 ca19 	mls	sl, r3, r9, ip
 800663c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006640:	2f09      	cmp	r7, #9
 8006642:	d80f      	bhi.n	8006664 <_strtol_l.isra.0+0xa8>
 8006644:	463c      	mov	r4, r7
 8006646:	42a3      	cmp	r3, r4
 8006648:	dd1b      	ble.n	8006682 <_strtol_l.isra.0+0xc6>
 800664a:	1c57      	adds	r7, r2, #1
 800664c:	d007      	beq.n	800665e <_strtol_l.isra.0+0xa2>
 800664e:	4581      	cmp	r9, r0
 8006650:	d314      	bcc.n	800667c <_strtol_l.isra.0+0xc0>
 8006652:	d101      	bne.n	8006658 <_strtol_l.isra.0+0x9c>
 8006654:	45a2      	cmp	sl, r4
 8006656:	db11      	blt.n	800667c <_strtol_l.isra.0+0xc0>
 8006658:	fb00 4003 	mla	r0, r0, r3, r4
 800665c:	2201      	movs	r2, #1
 800665e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006662:	e7eb      	b.n	800663c <_strtol_l.isra.0+0x80>
 8006664:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006668:	2f19      	cmp	r7, #25
 800666a:	d801      	bhi.n	8006670 <_strtol_l.isra.0+0xb4>
 800666c:	3c37      	subs	r4, #55	@ 0x37
 800666e:	e7ea      	b.n	8006646 <_strtol_l.isra.0+0x8a>
 8006670:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006674:	2f19      	cmp	r7, #25
 8006676:	d804      	bhi.n	8006682 <_strtol_l.isra.0+0xc6>
 8006678:	3c57      	subs	r4, #87	@ 0x57
 800667a:	e7e4      	b.n	8006646 <_strtol_l.isra.0+0x8a>
 800667c:	f04f 32ff 	mov.w	r2, #4294967295
 8006680:	e7ed      	b.n	800665e <_strtol_l.isra.0+0xa2>
 8006682:	1c53      	adds	r3, r2, #1
 8006684:	d108      	bne.n	8006698 <_strtol_l.isra.0+0xdc>
 8006686:	2322      	movs	r3, #34	@ 0x22
 8006688:	f8ce 3000 	str.w	r3, [lr]
 800668c:	4660      	mov	r0, ip
 800668e:	f1b8 0f00 	cmp.w	r8, #0
 8006692:	d0a0      	beq.n	80065d6 <_strtol_l.isra.0+0x1a>
 8006694:	1e69      	subs	r1, r5, #1
 8006696:	e006      	b.n	80066a6 <_strtol_l.isra.0+0xea>
 8006698:	b106      	cbz	r6, 800669c <_strtol_l.isra.0+0xe0>
 800669a:	4240      	negs	r0, r0
 800669c:	f1b8 0f00 	cmp.w	r8, #0
 80066a0:	d099      	beq.n	80065d6 <_strtol_l.isra.0+0x1a>
 80066a2:	2a00      	cmp	r2, #0
 80066a4:	d1f6      	bne.n	8006694 <_strtol_l.isra.0+0xd8>
 80066a6:	f8c8 1000 	str.w	r1, [r8]
 80066aa:	e794      	b.n	80065d6 <_strtol_l.isra.0+0x1a>
 80066ac:	08007869 	.word	0x08007869

080066b0 <strtol>:
 80066b0:	4613      	mov	r3, r2
 80066b2:	460a      	mov	r2, r1
 80066b4:	4601      	mov	r1, r0
 80066b6:	4802      	ldr	r0, [pc, #8]	@ (80066c0 <strtol+0x10>)
 80066b8:	6800      	ldr	r0, [r0, #0]
 80066ba:	f7ff bf7f 	b.w	80065bc <_strtol_l.isra.0>
 80066be:	bf00      	nop
 80066c0:	20000020 	.word	0x20000020

080066c4 <std>:
 80066c4:	2300      	movs	r3, #0
 80066c6:	b510      	push	{r4, lr}
 80066c8:	4604      	mov	r4, r0
 80066ca:	e9c0 3300 	strd	r3, r3, [r0]
 80066ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066d2:	6083      	str	r3, [r0, #8]
 80066d4:	8181      	strh	r1, [r0, #12]
 80066d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80066d8:	81c2      	strh	r2, [r0, #14]
 80066da:	6183      	str	r3, [r0, #24]
 80066dc:	4619      	mov	r1, r3
 80066de:	2208      	movs	r2, #8
 80066e0:	305c      	adds	r0, #92	@ 0x5c
 80066e2:	f000 f906 	bl	80068f2 <memset>
 80066e6:	4b0d      	ldr	r3, [pc, #52]	@ (800671c <std+0x58>)
 80066e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80066ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006720 <std+0x5c>)
 80066ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80066ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006724 <std+0x60>)
 80066f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80066f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006728 <std+0x64>)
 80066f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80066f6:	4b0d      	ldr	r3, [pc, #52]	@ (800672c <std+0x68>)
 80066f8:	6224      	str	r4, [r4, #32]
 80066fa:	429c      	cmp	r4, r3
 80066fc:	d006      	beq.n	800670c <std+0x48>
 80066fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006702:	4294      	cmp	r4, r2
 8006704:	d002      	beq.n	800670c <std+0x48>
 8006706:	33d0      	adds	r3, #208	@ 0xd0
 8006708:	429c      	cmp	r4, r3
 800670a:	d105      	bne.n	8006718 <std+0x54>
 800670c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006714:	f000 ba20 	b.w	8006b58 <__retarget_lock_init_recursive>
 8006718:	bd10      	pop	{r4, pc}
 800671a:	bf00      	nop
 800671c:	0800686d 	.word	0x0800686d
 8006720:	0800688f 	.word	0x0800688f
 8006724:	080068c7 	.word	0x080068c7
 8006728:	080068eb 	.word	0x080068eb
 800672c:	20004380 	.word	0x20004380

08006730 <stdio_exit_handler>:
 8006730:	4a02      	ldr	r2, [pc, #8]	@ (800673c <stdio_exit_handler+0xc>)
 8006732:	4903      	ldr	r1, [pc, #12]	@ (8006740 <stdio_exit_handler+0x10>)
 8006734:	4803      	ldr	r0, [pc, #12]	@ (8006744 <stdio_exit_handler+0x14>)
 8006736:	f000 b869 	b.w	800680c <_fwalk_sglue>
 800673a:	bf00      	nop
 800673c:	20000014 	.word	0x20000014
 8006740:	08007441 	.word	0x08007441
 8006744:	20000024 	.word	0x20000024

08006748 <cleanup_stdio>:
 8006748:	6841      	ldr	r1, [r0, #4]
 800674a:	4b0c      	ldr	r3, [pc, #48]	@ (800677c <cleanup_stdio+0x34>)
 800674c:	4299      	cmp	r1, r3
 800674e:	b510      	push	{r4, lr}
 8006750:	4604      	mov	r4, r0
 8006752:	d001      	beq.n	8006758 <cleanup_stdio+0x10>
 8006754:	f000 fe74 	bl	8007440 <_fflush_r>
 8006758:	68a1      	ldr	r1, [r4, #8]
 800675a:	4b09      	ldr	r3, [pc, #36]	@ (8006780 <cleanup_stdio+0x38>)
 800675c:	4299      	cmp	r1, r3
 800675e:	d002      	beq.n	8006766 <cleanup_stdio+0x1e>
 8006760:	4620      	mov	r0, r4
 8006762:	f000 fe6d 	bl	8007440 <_fflush_r>
 8006766:	68e1      	ldr	r1, [r4, #12]
 8006768:	4b06      	ldr	r3, [pc, #24]	@ (8006784 <cleanup_stdio+0x3c>)
 800676a:	4299      	cmp	r1, r3
 800676c:	d004      	beq.n	8006778 <cleanup_stdio+0x30>
 800676e:	4620      	mov	r0, r4
 8006770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006774:	f000 be64 	b.w	8007440 <_fflush_r>
 8006778:	bd10      	pop	{r4, pc}
 800677a:	bf00      	nop
 800677c:	20004380 	.word	0x20004380
 8006780:	200043e8 	.word	0x200043e8
 8006784:	20004450 	.word	0x20004450

08006788 <global_stdio_init.part.0>:
 8006788:	b510      	push	{r4, lr}
 800678a:	4b0b      	ldr	r3, [pc, #44]	@ (80067b8 <global_stdio_init.part.0+0x30>)
 800678c:	4c0b      	ldr	r4, [pc, #44]	@ (80067bc <global_stdio_init.part.0+0x34>)
 800678e:	4a0c      	ldr	r2, [pc, #48]	@ (80067c0 <global_stdio_init.part.0+0x38>)
 8006790:	601a      	str	r2, [r3, #0]
 8006792:	4620      	mov	r0, r4
 8006794:	2200      	movs	r2, #0
 8006796:	2104      	movs	r1, #4
 8006798:	f7ff ff94 	bl	80066c4 <std>
 800679c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80067a0:	2201      	movs	r2, #1
 80067a2:	2109      	movs	r1, #9
 80067a4:	f7ff ff8e 	bl	80066c4 <std>
 80067a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80067ac:	2202      	movs	r2, #2
 80067ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067b2:	2112      	movs	r1, #18
 80067b4:	f7ff bf86 	b.w	80066c4 <std>
 80067b8:	200044b8 	.word	0x200044b8
 80067bc:	20004380 	.word	0x20004380
 80067c0:	08006731 	.word	0x08006731

080067c4 <__sfp_lock_acquire>:
 80067c4:	4801      	ldr	r0, [pc, #4]	@ (80067cc <__sfp_lock_acquire+0x8>)
 80067c6:	f000 b9c8 	b.w	8006b5a <__retarget_lock_acquire_recursive>
 80067ca:	bf00      	nop
 80067cc:	200044c1 	.word	0x200044c1

080067d0 <__sfp_lock_release>:
 80067d0:	4801      	ldr	r0, [pc, #4]	@ (80067d8 <__sfp_lock_release+0x8>)
 80067d2:	f000 b9c3 	b.w	8006b5c <__retarget_lock_release_recursive>
 80067d6:	bf00      	nop
 80067d8:	200044c1 	.word	0x200044c1

080067dc <__sinit>:
 80067dc:	b510      	push	{r4, lr}
 80067de:	4604      	mov	r4, r0
 80067e0:	f7ff fff0 	bl	80067c4 <__sfp_lock_acquire>
 80067e4:	6a23      	ldr	r3, [r4, #32]
 80067e6:	b11b      	cbz	r3, 80067f0 <__sinit+0x14>
 80067e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067ec:	f7ff bff0 	b.w	80067d0 <__sfp_lock_release>
 80067f0:	4b04      	ldr	r3, [pc, #16]	@ (8006804 <__sinit+0x28>)
 80067f2:	6223      	str	r3, [r4, #32]
 80067f4:	4b04      	ldr	r3, [pc, #16]	@ (8006808 <__sinit+0x2c>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1f5      	bne.n	80067e8 <__sinit+0xc>
 80067fc:	f7ff ffc4 	bl	8006788 <global_stdio_init.part.0>
 8006800:	e7f2      	b.n	80067e8 <__sinit+0xc>
 8006802:	bf00      	nop
 8006804:	08006749 	.word	0x08006749
 8006808:	200044b8 	.word	0x200044b8

0800680c <_fwalk_sglue>:
 800680c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006810:	4607      	mov	r7, r0
 8006812:	4688      	mov	r8, r1
 8006814:	4614      	mov	r4, r2
 8006816:	2600      	movs	r6, #0
 8006818:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800681c:	f1b9 0901 	subs.w	r9, r9, #1
 8006820:	d505      	bpl.n	800682e <_fwalk_sglue+0x22>
 8006822:	6824      	ldr	r4, [r4, #0]
 8006824:	2c00      	cmp	r4, #0
 8006826:	d1f7      	bne.n	8006818 <_fwalk_sglue+0xc>
 8006828:	4630      	mov	r0, r6
 800682a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800682e:	89ab      	ldrh	r3, [r5, #12]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d907      	bls.n	8006844 <_fwalk_sglue+0x38>
 8006834:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006838:	3301      	adds	r3, #1
 800683a:	d003      	beq.n	8006844 <_fwalk_sglue+0x38>
 800683c:	4629      	mov	r1, r5
 800683e:	4638      	mov	r0, r7
 8006840:	47c0      	blx	r8
 8006842:	4306      	orrs	r6, r0
 8006844:	3568      	adds	r5, #104	@ 0x68
 8006846:	e7e9      	b.n	800681c <_fwalk_sglue+0x10>

08006848 <iprintf>:
 8006848:	b40f      	push	{r0, r1, r2, r3}
 800684a:	b507      	push	{r0, r1, r2, lr}
 800684c:	4906      	ldr	r1, [pc, #24]	@ (8006868 <iprintf+0x20>)
 800684e:	ab04      	add	r3, sp, #16
 8006850:	6808      	ldr	r0, [r1, #0]
 8006852:	f853 2b04 	ldr.w	r2, [r3], #4
 8006856:	6881      	ldr	r1, [r0, #8]
 8006858:	9301      	str	r3, [sp, #4]
 800685a:	f000 fac9 	bl	8006df0 <_vfiprintf_r>
 800685e:	b003      	add	sp, #12
 8006860:	f85d eb04 	ldr.w	lr, [sp], #4
 8006864:	b004      	add	sp, #16
 8006866:	4770      	bx	lr
 8006868:	20000020 	.word	0x20000020

0800686c <__sread>:
 800686c:	b510      	push	{r4, lr}
 800686e:	460c      	mov	r4, r1
 8006870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006874:	f000 f922 	bl	8006abc <_read_r>
 8006878:	2800      	cmp	r0, #0
 800687a:	bfab      	itete	ge
 800687c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800687e:	89a3      	ldrhlt	r3, [r4, #12]
 8006880:	181b      	addge	r3, r3, r0
 8006882:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006886:	bfac      	ite	ge
 8006888:	6563      	strge	r3, [r4, #84]	@ 0x54
 800688a:	81a3      	strhlt	r3, [r4, #12]
 800688c:	bd10      	pop	{r4, pc}

0800688e <__swrite>:
 800688e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006892:	461f      	mov	r7, r3
 8006894:	898b      	ldrh	r3, [r1, #12]
 8006896:	05db      	lsls	r3, r3, #23
 8006898:	4605      	mov	r5, r0
 800689a:	460c      	mov	r4, r1
 800689c:	4616      	mov	r6, r2
 800689e:	d505      	bpl.n	80068ac <__swrite+0x1e>
 80068a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068a4:	2302      	movs	r3, #2
 80068a6:	2200      	movs	r2, #0
 80068a8:	f000 f8f6 	bl	8006a98 <_lseek_r>
 80068ac:	89a3      	ldrh	r3, [r4, #12]
 80068ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068b6:	81a3      	strh	r3, [r4, #12]
 80068b8:	4632      	mov	r2, r6
 80068ba:	463b      	mov	r3, r7
 80068bc:	4628      	mov	r0, r5
 80068be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068c2:	f000 b90d 	b.w	8006ae0 <_write_r>

080068c6 <__sseek>:
 80068c6:	b510      	push	{r4, lr}
 80068c8:	460c      	mov	r4, r1
 80068ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068ce:	f000 f8e3 	bl	8006a98 <_lseek_r>
 80068d2:	1c43      	adds	r3, r0, #1
 80068d4:	89a3      	ldrh	r3, [r4, #12]
 80068d6:	bf15      	itete	ne
 80068d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80068da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80068de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80068e2:	81a3      	strheq	r3, [r4, #12]
 80068e4:	bf18      	it	ne
 80068e6:	81a3      	strhne	r3, [r4, #12]
 80068e8:	bd10      	pop	{r4, pc}

080068ea <__sclose>:
 80068ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068ee:	f000 b865 	b.w	80069bc <_close_r>

080068f2 <memset>:
 80068f2:	4402      	add	r2, r0
 80068f4:	4603      	mov	r3, r0
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d100      	bne.n	80068fc <memset+0xa>
 80068fa:	4770      	bx	lr
 80068fc:	f803 1b01 	strb.w	r1, [r3], #1
 8006900:	e7f9      	b.n	80068f6 <memset+0x4>
	...

08006904 <strtok>:
 8006904:	4b16      	ldr	r3, [pc, #88]	@ (8006960 <strtok+0x5c>)
 8006906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800690a:	681f      	ldr	r7, [r3, #0]
 800690c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800690e:	4605      	mov	r5, r0
 8006910:	460e      	mov	r6, r1
 8006912:	b9ec      	cbnz	r4, 8006950 <strtok+0x4c>
 8006914:	2050      	movs	r0, #80	@ 0x50
 8006916:	f000 f98b 	bl	8006c30 <malloc>
 800691a:	4602      	mov	r2, r0
 800691c:	6478      	str	r0, [r7, #68]	@ 0x44
 800691e:	b920      	cbnz	r0, 800692a <strtok+0x26>
 8006920:	4b10      	ldr	r3, [pc, #64]	@ (8006964 <strtok+0x60>)
 8006922:	4811      	ldr	r0, [pc, #68]	@ (8006968 <strtok+0x64>)
 8006924:	215b      	movs	r1, #91	@ 0x5b
 8006926:	f000 f91b 	bl	8006b60 <__assert_func>
 800692a:	e9c0 4400 	strd	r4, r4, [r0]
 800692e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006932:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006936:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800693a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800693e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8006942:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8006946:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800694a:	6184      	str	r4, [r0, #24]
 800694c:	7704      	strb	r4, [r0, #28]
 800694e:	6244      	str	r4, [r0, #36]	@ 0x24
 8006950:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006952:	4631      	mov	r1, r6
 8006954:	4628      	mov	r0, r5
 8006956:	2301      	movs	r3, #1
 8006958:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800695c:	f000 b806 	b.w	800696c <__strtok_r>
 8006960:	20000020 	.word	0x20000020
 8006964:	08007969 	.word	0x08007969
 8006968:	08007980 	.word	0x08007980

0800696c <__strtok_r>:
 800696c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800696e:	4604      	mov	r4, r0
 8006970:	b908      	cbnz	r0, 8006976 <__strtok_r+0xa>
 8006972:	6814      	ldr	r4, [r2, #0]
 8006974:	b144      	cbz	r4, 8006988 <__strtok_r+0x1c>
 8006976:	4620      	mov	r0, r4
 8006978:	f814 5b01 	ldrb.w	r5, [r4], #1
 800697c:	460f      	mov	r7, r1
 800697e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006982:	b91e      	cbnz	r6, 800698c <__strtok_r+0x20>
 8006984:	b965      	cbnz	r5, 80069a0 <__strtok_r+0x34>
 8006986:	6015      	str	r5, [r2, #0]
 8006988:	2000      	movs	r0, #0
 800698a:	e005      	b.n	8006998 <__strtok_r+0x2c>
 800698c:	42b5      	cmp	r5, r6
 800698e:	d1f6      	bne.n	800697e <__strtok_r+0x12>
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1f0      	bne.n	8006976 <__strtok_r+0xa>
 8006994:	6014      	str	r4, [r2, #0]
 8006996:	7003      	strb	r3, [r0, #0]
 8006998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800699a:	461c      	mov	r4, r3
 800699c:	e00c      	b.n	80069b8 <__strtok_r+0x4c>
 800699e:	b91d      	cbnz	r5, 80069a8 <__strtok_r+0x3c>
 80069a0:	4627      	mov	r7, r4
 80069a2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80069a6:	460e      	mov	r6, r1
 80069a8:	f816 5b01 	ldrb.w	r5, [r6], #1
 80069ac:	42ab      	cmp	r3, r5
 80069ae:	d1f6      	bne.n	800699e <__strtok_r+0x32>
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d0f2      	beq.n	800699a <__strtok_r+0x2e>
 80069b4:	2300      	movs	r3, #0
 80069b6:	703b      	strb	r3, [r7, #0]
 80069b8:	6014      	str	r4, [r2, #0]
 80069ba:	e7ed      	b.n	8006998 <__strtok_r+0x2c>

080069bc <_close_r>:
 80069bc:	b538      	push	{r3, r4, r5, lr}
 80069be:	4d06      	ldr	r5, [pc, #24]	@ (80069d8 <_close_r+0x1c>)
 80069c0:	2300      	movs	r3, #0
 80069c2:	4604      	mov	r4, r0
 80069c4:	4608      	mov	r0, r1
 80069c6:	602b      	str	r3, [r5, #0]
 80069c8:	f7fa fd44 	bl	8001454 <_close>
 80069cc:	1c43      	adds	r3, r0, #1
 80069ce:	d102      	bne.n	80069d6 <_close_r+0x1a>
 80069d0:	682b      	ldr	r3, [r5, #0]
 80069d2:	b103      	cbz	r3, 80069d6 <_close_r+0x1a>
 80069d4:	6023      	str	r3, [r4, #0]
 80069d6:	bd38      	pop	{r3, r4, r5, pc}
 80069d8:	200044bc 	.word	0x200044bc

080069dc <_reclaim_reent>:
 80069dc:	4b2d      	ldr	r3, [pc, #180]	@ (8006a94 <_reclaim_reent+0xb8>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4283      	cmp	r3, r0
 80069e2:	b570      	push	{r4, r5, r6, lr}
 80069e4:	4604      	mov	r4, r0
 80069e6:	d053      	beq.n	8006a90 <_reclaim_reent+0xb4>
 80069e8:	69c3      	ldr	r3, [r0, #28]
 80069ea:	b31b      	cbz	r3, 8006a34 <_reclaim_reent+0x58>
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	b163      	cbz	r3, 8006a0a <_reclaim_reent+0x2e>
 80069f0:	2500      	movs	r5, #0
 80069f2:	69e3      	ldr	r3, [r4, #28]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	5959      	ldr	r1, [r3, r5]
 80069f8:	b9b1      	cbnz	r1, 8006a28 <_reclaim_reent+0x4c>
 80069fa:	3504      	adds	r5, #4
 80069fc:	2d80      	cmp	r5, #128	@ 0x80
 80069fe:	d1f8      	bne.n	80069f2 <_reclaim_reent+0x16>
 8006a00:	69e3      	ldr	r3, [r4, #28]
 8006a02:	4620      	mov	r0, r4
 8006a04:	68d9      	ldr	r1, [r3, #12]
 8006a06:	f000 f8c9 	bl	8006b9c <_free_r>
 8006a0a:	69e3      	ldr	r3, [r4, #28]
 8006a0c:	6819      	ldr	r1, [r3, #0]
 8006a0e:	b111      	cbz	r1, 8006a16 <_reclaim_reent+0x3a>
 8006a10:	4620      	mov	r0, r4
 8006a12:	f000 f8c3 	bl	8006b9c <_free_r>
 8006a16:	69e3      	ldr	r3, [r4, #28]
 8006a18:	689d      	ldr	r5, [r3, #8]
 8006a1a:	b15d      	cbz	r5, 8006a34 <_reclaim_reent+0x58>
 8006a1c:	4629      	mov	r1, r5
 8006a1e:	4620      	mov	r0, r4
 8006a20:	682d      	ldr	r5, [r5, #0]
 8006a22:	f000 f8bb 	bl	8006b9c <_free_r>
 8006a26:	e7f8      	b.n	8006a1a <_reclaim_reent+0x3e>
 8006a28:	680e      	ldr	r6, [r1, #0]
 8006a2a:	4620      	mov	r0, r4
 8006a2c:	f000 f8b6 	bl	8006b9c <_free_r>
 8006a30:	4631      	mov	r1, r6
 8006a32:	e7e1      	b.n	80069f8 <_reclaim_reent+0x1c>
 8006a34:	6961      	ldr	r1, [r4, #20]
 8006a36:	b111      	cbz	r1, 8006a3e <_reclaim_reent+0x62>
 8006a38:	4620      	mov	r0, r4
 8006a3a:	f000 f8af 	bl	8006b9c <_free_r>
 8006a3e:	69e1      	ldr	r1, [r4, #28]
 8006a40:	b111      	cbz	r1, 8006a48 <_reclaim_reent+0x6c>
 8006a42:	4620      	mov	r0, r4
 8006a44:	f000 f8aa 	bl	8006b9c <_free_r>
 8006a48:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006a4a:	b111      	cbz	r1, 8006a52 <_reclaim_reent+0x76>
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	f000 f8a5 	bl	8006b9c <_free_r>
 8006a52:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a54:	b111      	cbz	r1, 8006a5c <_reclaim_reent+0x80>
 8006a56:	4620      	mov	r0, r4
 8006a58:	f000 f8a0 	bl	8006b9c <_free_r>
 8006a5c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006a5e:	b111      	cbz	r1, 8006a66 <_reclaim_reent+0x8a>
 8006a60:	4620      	mov	r0, r4
 8006a62:	f000 f89b 	bl	8006b9c <_free_r>
 8006a66:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006a68:	b111      	cbz	r1, 8006a70 <_reclaim_reent+0x94>
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	f000 f896 	bl	8006b9c <_free_r>
 8006a70:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006a72:	b111      	cbz	r1, 8006a7a <_reclaim_reent+0x9e>
 8006a74:	4620      	mov	r0, r4
 8006a76:	f000 f891 	bl	8006b9c <_free_r>
 8006a7a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006a7c:	b111      	cbz	r1, 8006a84 <_reclaim_reent+0xa8>
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f000 f88c 	bl	8006b9c <_free_r>
 8006a84:	6a23      	ldr	r3, [r4, #32]
 8006a86:	b11b      	cbz	r3, 8006a90 <_reclaim_reent+0xb4>
 8006a88:	4620      	mov	r0, r4
 8006a8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006a8e:	4718      	bx	r3
 8006a90:	bd70      	pop	{r4, r5, r6, pc}
 8006a92:	bf00      	nop
 8006a94:	20000020 	.word	0x20000020

08006a98 <_lseek_r>:
 8006a98:	b538      	push	{r3, r4, r5, lr}
 8006a9a:	4d07      	ldr	r5, [pc, #28]	@ (8006ab8 <_lseek_r+0x20>)
 8006a9c:	4604      	mov	r4, r0
 8006a9e:	4608      	mov	r0, r1
 8006aa0:	4611      	mov	r1, r2
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	602a      	str	r2, [r5, #0]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	f7fa fcfb 	bl	80014a2 <_lseek>
 8006aac:	1c43      	adds	r3, r0, #1
 8006aae:	d102      	bne.n	8006ab6 <_lseek_r+0x1e>
 8006ab0:	682b      	ldr	r3, [r5, #0]
 8006ab2:	b103      	cbz	r3, 8006ab6 <_lseek_r+0x1e>
 8006ab4:	6023      	str	r3, [r4, #0]
 8006ab6:	bd38      	pop	{r3, r4, r5, pc}
 8006ab8:	200044bc 	.word	0x200044bc

08006abc <_read_r>:
 8006abc:	b538      	push	{r3, r4, r5, lr}
 8006abe:	4d07      	ldr	r5, [pc, #28]	@ (8006adc <_read_r+0x20>)
 8006ac0:	4604      	mov	r4, r0
 8006ac2:	4608      	mov	r0, r1
 8006ac4:	4611      	mov	r1, r2
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	602a      	str	r2, [r5, #0]
 8006aca:	461a      	mov	r2, r3
 8006acc:	f7fa fc89 	bl	80013e2 <_read>
 8006ad0:	1c43      	adds	r3, r0, #1
 8006ad2:	d102      	bne.n	8006ada <_read_r+0x1e>
 8006ad4:	682b      	ldr	r3, [r5, #0]
 8006ad6:	b103      	cbz	r3, 8006ada <_read_r+0x1e>
 8006ad8:	6023      	str	r3, [r4, #0]
 8006ada:	bd38      	pop	{r3, r4, r5, pc}
 8006adc:	200044bc 	.word	0x200044bc

08006ae0 <_write_r>:
 8006ae0:	b538      	push	{r3, r4, r5, lr}
 8006ae2:	4d07      	ldr	r5, [pc, #28]	@ (8006b00 <_write_r+0x20>)
 8006ae4:	4604      	mov	r4, r0
 8006ae6:	4608      	mov	r0, r1
 8006ae8:	4611      	mov	r1, r2
 8006aea:	2200      	movs	r2, #0
 8006aec:	602a      	str	r2, [r5, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	f7fa fc94 	bl	800141c <_write>
 8006af4:	1c43      	adds	r3, r0, #1
 8006af6:	d102      	bne.n	8006afe <_write_r+0x1e>
 8006af8:	682b      	ldr	r3, [r5, #0]
 8006afa:	b103      	cbz	r3, 8006afe <_write_r+0x1e>
 8006afc:	6023      	str	r3, [r4, #0]
 8006afe:	bd38      	pop	{r3, r4, r5, pc}
 8006b00:	200044bc 	.word	0x200044bc

08006b04 <__errno>:
 8006b04:	4b01      	ldr	r3, [pc, #4]	@ (8006b0c <__errno+0x8>)
 8006b06:	6818      	ldr	r0, [r3, #0]
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	20000020 	.word	0x20000020

08006b10 <__libc_init_array>:
 8006b10:	b570      	push	{r4, r5, r6, lr}
 8006b12:	4d0d      	ldr	r5, [pc, #52]	@ (8006b48 <__libc_init_array+0x38>)
 8006b14:	4c0d      	ldr	r4, [pc, #52]	@ (8006b4c <__libc_init_array+0x3c>)
 8006b16:	1b64      	subs	r4, r4, r5
 8006b18:	10a4      	asrs	r4, r4, #2
 8006b1a:	2600      	movs	r6, #0
 8006b1c:	42a6      	cmp	r6, r4
 8006b1e:	d109      	bne.n	8006b34 <__libc_init_array+0x24>
 8006b20:	4d0b      	ldr	r5, [pc, #44]	@ (8006b50 <__libc_init_array+0x40>)
 8006b22:	4c0c      	ldr	r4, [pc, #48]	@ (8006b54 <__libc_init_array+0x44>)
 8006b24:	f000 fe3a 	bl	800779c <_init>
 8006b28:	1b64      	subs	r4, r4, r5
 8006b2a:	10a4      	asrs	r4, r4, #2
 8006b2c:	2600      	movs	r6, #0
 8006b2e:	42a6      	cmp	r6, r4
 8006b30:	d105      	bne.n	8006b3e <__libc_init_array+0x2e>
 8006b32:	bd70      	pop	{r4, r5, r6, pc}
 8006b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b38:	4798      	blx	r3
 8006b3a:	3601      	adds	r6, #1
 8006b3c:	e7ee      	b.n	8006b1c <__libc_init_array+0xc>
 8006b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b42:	4798      	blx	r3
 8006b44:	3601      	adds	r6, #1
 8006b46:	e7f2      	b.n	8006b2e <__libc_init_array+0x1e>
 8006b48:	08007a54 	.word	0x08007a54
 8006b4c:	08007a54 	.word	0x08007a54
 8006b50:	08007a54 	.word	0x08007a54
 8006b54:	08007a58 	.word	0x08007a58

08006b58 <__retarget_lock_init_recursive>:
 8006b58:	4770      	bx	lr

08006b5a <__retarget_lock_acquire_recursive>:
 8006b5a:	4770      	bx	lr

08006b5c <__retarget_lock_release_recursive>:
 8006b5c:	4770      	bx	lr
	...

08006b60 <__assert_func>:
 8006b60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b62:	4614      	mov	r4, r2
 8006b64:	461a      	mov	r2, r3
 8006b66:	4b09      	ldr	r3, [pc, #36]	@ (8006b8c <__assert_func+0x2c>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4605      	mov	r5, r0
 8006b6c:	68d8      	ldr	r0, [r3, #12]
 8006b6e:	b14c      	cbz	r4, 8006b84 <__assert_func+0x24>
 8006b70:	4b07      	ldr	r3, [pc, #28]	@ (8006b90 <__assert_func+0x30>)
 8006b72:	9100      	str	r1, [sp, #0]
 8006b74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b78:	4906      	ldr	r1, [pc, #24]	@ (8006b94 <__assert_func+0x34>)
 8006b7a:	462b      	mov	r3, r5
 8006b7c:	f000 fc88 	bl	8007490 <fiprintf>
 8006b80:	f000 fd3c 	bl	80075fc <abort>
 8006b84:	4b04      	ldr	r3, [pc, #16]	@ (8006b98 <__assert_func+0x38>)
 8006b86:	461c      	mov	r4, r3
 8006b88:	e7f3      	b.n	8006b72 <__assert_func+0x12>
 8006b8a:	bf00      	nop
 8006b8c:	20000020 	.word	0x20000020
 8006b90:	080079da 	.word	0x080079da
 8006b94:	080079e7 	.word	0x080079e7
 8006b98:	08007a15 	.word	0x08007a15

08006b9c <_free_r>:
 8006b9c:	b538      	push	{r3, r4, r5, lr}
 8006b9e:	4605      	mov	r5, r0
 8006ba0:	2900      	cmp	r1, #0
 8006ba2:	d041      	beq.n	8006c28 <_free_r+0x8c>
 8006ba4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ba8:	1f0c      	subs	r4, r1, #4
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	bfb8      	it	lt
 8006bae:	18e4      	addlt	r4, r4, r3
 8006bb0:	f000 f8e8 	bl	8006d84 <__malloc_lock>
 8006bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8006c2c <_free_r+0x90>)
 8006bb6:	6813      	ldr	r3, [r2, #0]
 8006bb8:	b933      	cbnz	r3, 8006bc8 <_free_r+0x2c>
 8006bba:	6063      	str	r3, [r4, #4]
 8006bbc:	6014      	str	r4, [r2, #0]
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bc4:	f000 b8e4 	b.w	8006d90 <__malloc_unlock>
 8006bc8:	42a3      	cmp	r3, r4
 8006bca:	d908      	bls.n	8006bde <_free_r+0x42>
 8006bcc:	6820      	ldr	r0, [r4, #0]
 8006bce:	1821      	adds	r1, r4, r0
 8006bd0:	428b      	cmp	r3, r1
 8006bd2:	bf01      	itttt	eq
 8006bd4:	6819      	ldreq	r1, [r3, #0]
 8006bd6:	685b      	ldreq	r3, [r3, #4]
 8006bd8:	1809      	addeq	r1, r1, r0
 8006bda:	6021      	streq	r1, [r4, #0]
 8006bdc:	e7ed      	b.n	8006bba <_free_r+0x1e>
 8006bde:	461a      	mov	r2, r3
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	b10b      	cbz	r3, 8006be8 <_free_r+0x4c>
 8006be4:	42a3      	cmp	r3, r4
 8006be6:	d9fa      	bls.n	8006bde <_free_r+0x42>
 8006be8:	6811      	ldr	r1, [r2, #0]
 8006bea:	1850      	adds	r0, r2, r1
 8006bec:	42a0      	cmp	r0, r4
 8006bee:	d10b      	bne.n	8006c08 <_free_r+0x6c>
 8006bf0:	6820      	ldr	r0, [r4, #0]
 8006bf2:	4401      	add	r1, r0
 8006bf4:	1850      	adds	r0, r2, r1
 8006bf6:	4283      	cmp	r3, r0
 8006bf8:	6011      	str	r1, [r2, #0]
 8006bfa:	d1e0      	bne.n	8006bbe <_free_r+0x22>
 8006bfc:	6818      	ldr	r0, [r3, #0]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	6053      	str	r3, [r2, #4]
 8006c02:	4408      	add	r0, r1
 8006c04:	6010      	str	r0, [r2, #0]
 8006c06:	e7da      	b.n	8006bbe <_free_r+0x22>
 8006c08:	d902      	bls.n	8006c10 <_free_r+0x74>
 8006c0a:	230c      	movs	r3, #12
 8006c0c:	602b      	str	r3, [r5, #0]
 8006c0e:	e7d6      	b.n	8006bbe <_free_r+0x22>
 8006c10:	6820      	ldr	r0, [r4, #0]
 8006c12:	1821      	adds	r1, r4, r0
 8006c14:	428b      	cmp	r3, r1
 8006c16:	bf04      	itt	eq
 8006c18:	6819      	ldreq	r1, [r3, #0]
 8006c1a:	685b      	ldreq	r3, [r3, #4]
 8006c1c:	6063      	str	r3, [r4, #4]
 8006c1e:	bf04      	itt	eq
 8006c20:	1809      	addeq	r1, r1, r0
 8006c22:	6021      	streq	r1, [r4, #0]
 8006c24:	6054      	str	r4, [r2, #4]
 8006c26:	e7ca      	b.n	8006bbe <_free_r+0x22>
 8006c28:	bd38      	pop	{r3, r4, r5, pc}
 8006c2a:	bf00      	nop
 8006c2c:	200044c8 	.word	0x200044c8

08006c30 <malloc>:
 8006c30:	4b02      	ldr	r3, [pc, #8]	@ (8006c3c <malloc+0xc>)
 8006c32:	4601      	mov	r1, r0
 8006c34:	6818      	ldr	r0, [r3, #0]
 8006c36:	f000 b825 	b.w	8006c84 <_malloc_r>
 8006c3a:	bf00      	nop
 8006c3c:	20000020 	.word	0x20000020

08006c40 <sbrk_aligned>:
 8006c40:	b570      	push	{r4, r5, r6, lr}
 8006c42:	4e0f      	ldr	r6, [pc, #60]	@ (8006c80 <sbrk_aligned+0x40>)
 8006c44:	460c      	mov	r4, r1
 8006c46:	6831      	ldr	r1, [r6, #0]
 8006c48:	4605      	mov	r5, r0
 8006c4a:	b911      	cbnz	r1, 8006c52 <sbrk_aligned+0x12>
 8006c4c:	f000 fcc6 	bl	80075dc <_sbrk_r>
 8006c50:	6030      	str	r0, [r6, #0]
 8006c52:	4621      	mov	r1, r4
 8006c54:	4628      	mov	r0, r5
 8006c56:	f000 fcc1 	bl	80075dc <_sbrk_r>
 8006c5a:	1c43      	adds	r3, r0, #1
 8006c5c:	d103      	bne.n	8006c66 <sbrk_aligned+0x26>
 8006c5e:	f04f 34ff 	mov.w	r4, #4294967295
 8006c62:	4620      	mov	r0, r4
 8006c64:	bd70      	pop	{r4, r5, r6, pc}
 8006c66:	1cc4      	adds	r4, r0, #3
 8006c68:	f024 0403 	bic.w	r4, r4, #3
 8006c6c:	42a0      	cmp	r0, r4
 8006c6e:	d0f8      	beq.n	8006c62 <sbrk_aligned+0x22>
 8006c70:	1a21      	subs	r1, r4, r0
 8006c72:	4628      	mov	r0, r5
 8006c74:	f000 fcb2 	bl	80075dc <_sbrk_r>
 8006c78:	3001      	adds	r0, #1
 8006c7a:	d1f2      	bne.n	8006c62 <sbrk_aligned+0x22>
 8006c7c:	e7ef      	b.n	8006c5e <sbrk_aligned+0x1e>
 8006c7e:	bf00      	nop
 8006c80:	200044c4 	.word	0x200044c4

08006c84 <_malloc_r>:
 8006c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c88:	1ccd      	adds	r5, r1, #3
 8006c8a:	f025 0503 	bic.w	r5, r5, #3
 8006c8e:	3508      	adds	r5, #8
 8006c90:	2d0c      	cmp	r5, #12
 8006c92:	bf38      	it	cc
 8006c94:	250c      	movcc	r5, #12
 8006c96:	2d00      	cmp	r5, #0
 8006c98:	4606      	mov	r6, r0
 8006c9a:	db01      	blt.n	8006ca0 <_malloc_r+0x1c>
 8006c9c:	42a9      	cmp	r1, r5
 8006c9e:	d904      	bls.n	8006caa <_malloc_r+0x26>
 8006ca0:	230c      	movs	r3, #12
 8006ca2:	6033      	str	r3, [r6, #0]
 8006ca4:	2000      	movs	r0, #0
 8006ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006caa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d80 <_malloc_r+0xfc>
 8006cae:	f000 f869 	bl	8006d84 <__malloc_lock>
 8006cb2:	f8d8 3000 	ldr.w	r3, [r8]
 8006cb6:	461c      	mov	r4, r3
 8006cb8:	bb44      	cbnz	r4, 8006d0c <_malloc_r+0x88>
 8006cba:	4629      	mov	r1, r5
 8006cbc:	4630      	mov	r0, r6
 8006cbe:	f7ff ffbf 	bl	8006c40 <sbrk_aligned>
 8006cc2:	1c43      	adds	r3, r0, #1
 8006cc4:	4604      	mov	r4, r0
 8006cc6:	d158      	bne.n	8006d7a <_malloc_r+0xf6>
 8006cc8:	f8d8 4000 	ldr.w	r4, [r8]
 8006ccc:	4627      	mov	r7, r4
 8006cce:	2f00      	cmp	r7, #0
 8006cd0:	d143      	bne.n	8006d5a <_malloc_r+0xd6>
 8006cd2:	2c00      	cmp	r4, #0
 8006cd4:	d04b      	beq.n	8006d6e <_malloc_r+0xea>
 8006cd6:	6823      	ldr	r3, [r4, #0]
 8006cd8:	4639      	mov	r1, r7
 8006cda:	4630      	mov	r0, r6
 8006cdc:	eb04 0903 	add.w	r9, r4, r3
 8006ce0:	f000 fc7c 	bl	80075dc <_sbrk_r>
 8006ce4:	4581      	cmp	r9, r0
 8006ce6:	d142      	bne.n	8006d6e <_malloc_r+0xea>
 8006ce8:	6821      	ldr	r1, [r4, #0]
 8006cea:	1a6d      	subs	r5, r5, r1
 8006cec:	4629      	mov	r1, r5
 8006cee:	4630      	mov	r0, r6
 8006cf0:	f7ff ffa6 	bl	8006c40 <sbrk_aligned>
 8006cf4:	3001      	adds	r0, #1
 8006cf6:	d03a      	beq.n	8006d6e <_malloc_r+0xea>
 8006cf8:	6823      	ldr	r3, [r4, #0]
 8006cfa:	442b      	add	r3, r5
 8006cfc:	6023      	str	r3, [r4, #0]
 8006cfe:	f8d8 3000 	ldr.w	r3, [r8]
 8006d02:	685a      	ldr	r2, [r3, #4]
 8006d04:	bb62      	cbnz	r2, 8006d60 <_malloc_r+0xdc>
 8006d06:	f8c8 7000 	str.w	r7, [r8]
 8006d0a:	e00f      	b.n	8006d2c <_malloc_r+0xa8>
 8006d0c:	6822      	ldr	r2, [r4, #0]
 8006d0e:	1b52      	subs	r2, r2, r5
 8006d10:	d420      	bmi.n	8006d54 <_malloc_r+0xd0>
 8006d12:	2a0b      	cmp	r2, #11
 8006d14:	d917      	bls.n	8006d46 <_malloc_r+0xc2>
 8006d16:	1961      	adds	r1, r4, r5
 8006d18:	42a3      	cmp	r3, r4
 8006d1a:	6025      	str	r5, [r4, #0]
 8006d1c:	bf18      	it	ne
 8006d1e:	6059      	strne	r1, [r3, #4]
 8006d20:	6863      	ldr	r3, [r4, #4]
 8006d22:	bf08      	it	eq
 8006d24:	f8c8 1000 	streq.w	r1, [r8]
 8006d28:	5162      	str	r2, [r4, r5]
 8006d2a:	604b      	str	r3, [r1, #4]
 8006d2c:	4630      	mov	r0, r6
 8006d2e:	f000 f82f 	bl	8006d90 <__malloc_unlock>
 8006d32:	f104 000b 	add.w	r0, r4, #11
 8006d36:	1d23      	adds	r3, r4, #4
 8006d38:	f020 0007 	bic.w	r0, r0, #7
 8006d3c:	1ac2      	subs	r2, r0, r3
 8006d3e:	bf1c      	itt	ne
 8006d40:	1a1b      	subne	r3, r3, r0
 8006d42:	50a3      	strne	r3, [r4, r2]
 8006d44:	e7af      	b.n	8006ca6 <_malloc_r+0x22>
 8006d46:	6862      	ldr	r2, [r4, #4]
 8006d48:	42a3      	cmp	r3, r4
 8006d4a:	bf0c      	ite	eq
 8006d4c:	f8c8 2000 	streq.w	r2, [r8]
 8006d50:	605a      	strne	r2, [r3, #4]
 8006d52:	e7eb      	b.n	8006d2c <_malloc_r+0xa8>
 8006d54:	4623      	mov	r3, r4
 8006d56:	6864      	ldr	r4, [r4, #4]
 8006d58:	e7ae      	b.n	8006cb8 <_malloc_r+0x34>
 8006d5a:	463c      	mov	r4, r7
 8006d5c:	687f      	ldr	r7, [r7, #4]
 8006d5e:	e7b6      	b.n	8006cce <_malloc_r+0x4a>
 8006d60:	461a      	mov	r2, r3
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	42a3      	cmp	r3, r4
 8006d66:	d1fb      	bne.n	8006d60 <_malloc_r+0xdc>
 8006d68:	2300      	movs	r3, #0
 8006d6a:	6053      	str	r3, [r2, #4]
 8006d6c:	e7de      	b.n	8006d2c <_malloc_r+0xa8>
 8006d6e:	230c      	movs	r3, #12
 8006d70:	6033      	str	r3, [r6, #0]
 8006d72:	4630      	mov	r0, r6
 8006d74:	f000 f80c 	bl	8006d90 <__malloc_unlock>
 8006d78:	e794      	b.n	8006ca4 <_malloc_r+0x20>
 8006d7a:	6005      	str	r5, [r0, #0]
 8006d7c:	e7d6      	b.n	8006d2c <_malloc_r+0xa8>
 8006d7e:	bf00      	nop
 8006d80:	200044c8 	.word	0x200044c8

08006d84 <__malloc_lock>:
 8006d84:	4801      	ldr	r0, [pc, #4]	@ (8006d8c <__malloc_lock+0x8>)
 8006d86:	f7ff bee8 	b.w	8006b5a <__retarget_lock_acquire_recursive>
 8006d8a:	bf00      	nop
 8006d8c:	200044c0 	.word	0x200044c0

08006d90 <__malloc_unlock>:
 8006d90:	4801      	ldr	r0, [pc, #4]	@ (8006d98 <__malloc_unlock+0x8>)
 8006d92:	f7ff bee3 	b.w	8006b5c <__retarget_lock_release_recursive>
 8006d96:	bf00      	nop
 8006d98:	200044c0 	.word	0x200044c0

08006d9c <__sfputc_r>:
 8006d9c:	6893      	ldr	r3, [r2, #8]
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	b410      	push	{r4}
 8006da4:	6093      	str	r3, [r2, #8]
 8006da6:	da08      	bge.n	8006dba <__sfputc_r+0x1e>
 8006da8:	6994      	ldr	r4, [r2, #24]
 8006daa:	42a3      	cmp	r3, r4
 8006dac:	db01      	blt.n	8006db2 <__sfputc_r+0x16>
 8006dae:	290a      	cmp	r1, #10
 8006db0:	d103      	bne.n	8006dba <__sfputc_r+0x1e>
 8006db2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006db6:	f000 bb7d 	b.w	80074b4 <__swbuf_r>
 8006dba:	6813      	ldr	r3, [r2, #0]
 8006dbc:	1c58      	adds	r0, r3, #1
 8006dbe:	6010      	str	r0, [r2, #0]
 8006dc0:	7019      	strb	r1, [r3, #0]
 8006dc2:	4608      	mov	r0, r1
 8006dc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <__sfputs_r>:
 8006dca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dcc:	4606      	mov	r6, r0
 8006dce:	460f      	mov	r7, r1
 8006dd0:	4614      	mov	r4, r2
 8006dd2:	18d5      	adds	r5, r2, r3
 8006dd4:	42ac      	cmp	r4, r5
 8006dd6:	d101      	bne.n	8006ddc <__sfputs_r+0x12>
 8006dd8:	2000      	movs	r0, #0
 8006dda:	e007      	b.n	8006dec <__sfputs_r+0x22>
 8006ddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006de0:	463a      	mov	r2, r7
 8006de2:	4630      	mov	r0, r6
 8006de4:	f7ff ffda 	bl	8006d9c <__sfputc_r>
 8006de8:	1c43      	adds	r3, r0, #1
 8006dea:	d1f3      	bne.n	8006dd4 <__sfputs_r+0xa>
 8006dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006df0 <_vfiprintf_r>:
 8006df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df4:	460d      	mov	r5, r1
 8006df6:	b09d      	sub	sp, #116	@ 0x74
 8006df8:	4614      	mov	r4, r2
 8006dfa:	4698      	mov	r8, r3
 8006dfc:	4606      	mov	r6, r0
 8006dfe:	b118      	cbz	r0, 8006e08 <_vfiprintf_r+0x18>
 8006e00:	6a03      	ldr	r3, [r0, #32]
 8006e02:	b90b      	cbnz	r3, 8006e08 <_vfiprintf_r+0x18>
 8006e04:	f7ff fcea 	bl	80067dc <__sinit>
 8006e08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e0a:	07d9      	lsls	r1, r3, #31
 8006e0c:	d405      	bmi.n	8006e1a <_vfiprintf_r+0x2a>
 8006e0e:	89ab      	ldrh	r3, [r5, #12]
 8006e10:	059a      	lsls	r2, r3, #22
 8006e12:	d402      	bmi.n	8006e1a <_vfiprintf_r+0x2a>
 8006e14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e16:	f7ff fea0 	bl	8006b5a <__retarget_lock_acquire_recursive>
 8006e1a:	89ab      	ldrh	r3, [r5, #12]
 8006e1c:	071b      	lsls	r3, r3, #28
 8006e1e:	d501      	bpl.n	8006e24 <_vfiprintf_r+0x34>
 8006e20:	692b      	ldr	r3, [r5, #16]
 8006e22:	b99b      	cbnz	r3, 8006e4c <_vfiprintf_r+0x5c>
 8006e24:	4629      	mov	r1, r5
 8006e26:	4630      	mov	r0, r6
 8006e28:	f000 fb82 	bl	8007530 <__swsetup_r>
 8006e2c:	b170      	cbz	r0, 8006e4c <_vfiprintf_r+0x5c>
 8006e2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e30:	07dc      	lsls	r4, r3, #31
 8006e32:	d504      	bpl.n	8006e3e <_vfiprintf_r+0x4e>
 8006e34:	f04f 30ff 	mov.w	r0, #4294967295
 8006e38:	b01d      	add	sp, #116	@ 0x74
 8006e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e3e:	89ab      	ldrh	r3, [r5, #12]
 8006e40:	0598      	lsls	r0, r3, #22
 8006e42:	d4f7      	bmi.n	8006e34 <_vfiprintf_r+0x44>
 8006e44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e46:	f7ff fe89 	bl	8006b5c <__retarget_lock_release_recursive>
 8006e4a:	e7f3      	b.n	8006e34 <_vfiprintf_r+0x44>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e50:	2320      	movs	r3, #32
 8006e52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e56:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e5a:	2330      	movs	r3, #48	@ 0x30
 8006e5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800700c <_vfiprintf_r+0x21c>
 8006e60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e64:	f04f 0901 	mov.w	r9, #1
 8006e68:	4623      	mov	r3, r4
 8006e6a:	469a      	mov	sl, r3
 8006e6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e70:	b10a      	cbz	r2, 8006e76 <_vfiprintf_r+0x86>
 8006e72:	2a25      	cmp	r2, #37	@ 0x25
 8006e74:	d1f9      	bne.n	8006e6a <_vfiprintf_r+0x7a>
 8006e76:	ebba 0b04 	subs.w	fp, sl, r4
 8006e7a:	d00b      	beq.n	8006e94 <_vfiprintf_r+0xa4>
 8006e7c:	465b      	mov	r3, fp
 8006e7e:	4622      	mov	r2, r4
 8006e80:	4629      	mov	r1, r5
 8006e82:	4630      	mov	r0, r6
 8006e84:	f7ff ffa1 	bl	8006dca <__sfputs_r>
 8006e88:	3001      	adds	r0, #1
 8006e8a:	f000 80a7 	beq.w	8006fdc <_vfiprintf_r+0x1ec>
 8006e8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e90:	445a      	add	r2, fp
 8006e92:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e94:	f89a 3000 	ldrb.w	r3, [sl]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 809f 	beq.w	8006fdc <_vfiprintf_r+0x1ec>
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ea8:	f10a 0a01 	add.w	sl, sl, #1
 8006eac:	9304      	str	r3, [sp, #16]
 8006eae:	9307      	str	r3, [sp, #28]
 8006eb0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006eb4:	931a      	str	r3, [sp, #104]	@ 0x68
 8006eb6:	4654      	mov	r4, sl
 8006eb8:	2205      	movs	r2, #5
 8006eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ebe:	4853      	ldr	r0, [pc, #332]	@ (800700c <_vfiprintf_r+0x21c>)
 8006ec0:	f7f9 f98e 	bl	80001e0 <memchr>
 8006ec4:	9a04      	ldr	r2, [sp, #16]
 8006ec6:	b9d8      	cbnz	r0, 8006f00 <_vfiprintf_r+0x110>
 8006ec8:	06d1      	lsls	r1, r2, #27
 8006eca:	bf44      	itt	mi
 8006ecc:	2320      	movmi	r3, #32
 8006ece:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ed2:	0713      	lsls	r3, r2, #28
 8006ed4:	bf44      	itt	mi
 8006ed6:	232b      	movmi	r3, #43	@ 0x2b
 8006ed8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006edc:	f89a 3000 	ldrb.w	r3, [sl]
 8006ee0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ee2:	d015      	beq.n	8006f10 <_vfiprintf_r+0x120>
 8006ee4:	9a07      	ldr	r2, [sp, #28]
 8006ee6:	4654      	mov	r4, sl
 8006ee8:	2000      	movs	r0, #0
 8006eea:	f04f 0c0a 	mov.w	ip, #10
 8006eee:	4621      	mov	r1, r4
 8006ef0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ef4:	3b30      	subs	r3, #48	@ 0x30
 8006ef6:	2b09      	cmp	r3, #9
 8006ef8:	d94b      	bls.n	8006f92 <_vfiprintf_r+0x1a2>
 8006efa:	b1b0      	cbz	r0, 8006f2a <_vfiprintf_r+0x13a>
 8006efc:	9207      	str	r2, [sp, #28]
 8006efe:	e014      	b.n	8006f2a <_vfiprintf_r+0x13a>
 8006f00:	eba0 0308 	sub.w	r3, r0, r8
 8006f04:	fa09 f303 	lsl.w	r3, r9, r3
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	9304      	str	r3, [sp, #16]
 8006f0c:	46a2      	mov	sl, r4
 8006f0e:	e7d2      	b.n	8006eb6 <_vfiprintf_r+0xc6>
 8006f10:	9b03      	ldr	r3, [sp, #12]
 8006f12:	1d19      	adds	r1, r3, #4
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	9103      	str	r1, [sp, #12]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	bfbb      	ittet	lt
 8006f1c:	425b      	neglt	r3, r3
 8006f1e:	f042 0202 	orrlt.w	r2, r2, #2
 8006f22:	9307      	strge	r3, [sp, #28]
 8006f24:	9307      	strlt	r3, [sp, #28]
 8006f26:	bfb8      	it	lt
 8006f28:	9204      	strlt	r2, [sp, #16]
 8006f2a:	7823      	ldrb	r3, [r4, #0]
 8006f2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f2e:	d10a      	bne.n	8006f46 <_vfiprintf_r+0x156>
 8006f30:	7863      	ldrb	r3, [r4, #1]
 8006f32:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f34:	d132      	bne.n	8006f9c <_vfiprintf_r+0x1ac>
 8006f36:	9b03      	ldr	r3, [sp, #12]
 8006f38:	1d1a      	adds	r2, r3, #4
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	9203      	str	r2, [sp, #12]
 8006f3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f42:	3402      	adds	r4, #2
 8006f44:	9305      	str	r3, [sp, #20]
 8006f46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800701c <_vfiprintf_r+0x22c>
 8006f4a:	7821      	ldrb	r1, [r4, #0]
 8006f4c:	2203      	movs	r2, #3
 8006f4e:	4650      	mov	r0, sl
 8006f50:	f7f9 f946 	bl	80001e0 <memchr>
 8006f54:	b138      	cbz	r0, 8006f66 <_vfiprintf_r+0x176>
 8006f56:	9b04      	ldr	r3, [sp, #16]
 8006f58:	eba0 000a 	sub.w	r0, r0, sl
 8006f5c:	2240      	movs	r2, #64	@ 0x40
 8006f5e:	4082      	lsls	r2, r0
 8006f60:	4313      	orrs	r3, r2
 8006f62:	3401      	adds	r4, #1
 8006f64:	9304      	str	r3, [sp, #16]
 8006f66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f6a:	4829      	ldr	r0, [pc, #164]	@ (8007010 <_vfiprintf_r+0x220>)
 8006f6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f70:	2206      	movs	r2, #6
 8006f72:	f7f9 f935 	bl	80001e0 <memchr>
 8006f76:	2800      	cmp	r0, #0
 8006f78:	d03f      	beq.n	8006ffa <_vfiprintf_r+0x20a>
 8006f7a:	4b26      	ldr	r3, [pc, #152]	@ (8007014 <_vfiprintf_r+0x224>)
 8006f7c:	bb1b      	cbnz	r3, 8006fc6 <_vfiprintf_r+0x1d6>
 8006f7e:	9b03      	ldr	r3, [sp, #12]
 8006f80:	3307      	adds	r3, #7
 8006f82:	f023 0307 	bic.w	r3, r3, #7
 8006f86:	3308      	adds	r3, #8
 8006f88:	9303      	str	r3, [sp, #12]
 8006f8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f8c:	443b      	add	r3, r7
 8006f8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f90:	e76a      	b.n	8006e68 <_vfiprintf_r+0x78>
 8006f92:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f96:	460c      	mov	r4, r1
 8006f98:	2001      	movs	r0, #1
 8006f9a:	e7a8      	b.n	8006eee <_vfiprintf_r+0xfe>
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	3401      	adds	r4, #1
 8006fa0:	9305      	str	r3, [sp, #20]
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	f04f 0c0a 	mov.w	ip, #10
 8006fa8:	4620      	mov	r0, r4
 8006faa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fae:	3a30      	subs	r2, #48	@ 0x30
 8006fb0:	2a09      	cmp	r2, #9
 8006fb2:	d903      	bls.n	8006fbc <_vfiprintf_r+0x1cc>
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d0c6      	beq.n	8006f46 <_vfiprintf_r+0x156>
 8006fb8:	9105      	str	r1, [sp, #20]
 8006fba:	e7c4      	b.n	8006f46 <_vfiprintf_r+0x156>
 8006fbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fc0:	4604      	mov	r4, r0
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e7f0      	b.n	8006fa8 <_vfiprintf_r+0x1b8>
 8006fc6:	ab03      	add	r3, sp, #12
 8006fc8:	9300      	str	r3, [sp, #0]
 8006fca:	462a      	mov	r2, r5
 8006fcc:	4b12      	ldr	r3, [pc, #72]	@ (8007018 <_vfiprintf_r+0x228>)
 8006fce:	a904      	add	r1, sp, #16
 8006fd0:	4630      	mov	r0, r6
 8006fd2:	f3af 8000 	nop.w
 8006fd6:	4607      	mov	r7, r0
 8006fd8:	1c78      	adds	r0, r7, #1
 8006fda:	d1d6      	bne.n	8006f8a <_vfiprintf_r+0x19a>
 8006fdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006fde:	07d9      	lsls	r1, r3, #31
 8006fe0:	d405      	bmi.n	8006fee <_vfiprintf_r+0x1fe>
 8006fe2:	89ab      	ldrh	r3, [r5, #12]
 8006fe4:	059a      	lsls	r2, r3, #22
 8006fe6:	d402      	bmi.n	8006fee <_vfiprintf_r+0x1fe>
 8006fe8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006fea:	f7ff fdb7 	bl	8006b5c <__retarget_lock_release_recursive>
 8006fee:	89ab      	ldrh	r3, [r5, #12]
 8006ff0:	065b      	lsls	r3, r3, #25
 8006ff2:	f53f af1f 	bmi.w	8006e34 <_vfiprintf_r+0x44>
 8006ff6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ff8:	e71e      	b.n	8006e38 <_vfiprintf_r+0x48>
 8006ffa:	ab03      	add	r3, sp, #12
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	462a      	mov	r2, r5
 8007000:	4b05      	ldr	r3, [pc, #20]	@ (8007018 <_vfiprintf_r+0x228>)
 8007002:	a904      	add	r1, sp, #16
 8007004:	4630      	mov	r0, r6
 8007006:	f000 f879 	bl	80070fc <_printf_i>
 800700a:	e7e4      	b.n	8006fd6 <_vfiprintf_r+0x1e6>
 800700c:	08007a16 	.word	0x08007a16
 8007010:	08007a20 	.word	0x08007a20
 8007014:	00000000 	.word	0x00000000
 8007018:	08006dcb 	.word	0x08006dcb
 800701c:	08007a1c 	.word	0x08007a1c

08007020 <_printf_common>:
 8007020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007024:	4616      	mov	r6, r2
 8007026:	4698      	mov	r8, r3
 8007028:	688a      	ldr	r2, [r1, #8]
 800702a:	690b      	ldr	r3, [r1, #16]
 800702c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007030:	4293      	cmp	r3, r2
 8007032:	bfb8      	it	lt
 8007034:	4613      	movlt	r3, r2
 8007036:	6033      	str	r3, [r6, #0]
 8007038:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800703c:	4607      	mov	r7, r0
 800703e:	460c      	mov	r4, r1
 8007040:	b10a      	cbz	r2, 8007046 <_printf_common+0x26>
 8007042:	3301      	adds	r3, #1
 8007044:	6033      	str	r3, [r6, #0]
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	0699      	lsls	r1, r3, #26
 800704a:	bf42      	ittt	mi
 800704c:	6833      	ldrmi	r3, [r6, #0]
 800704e:	3302      	addmi	r3, #2
 8007050:	6033      	strmi	r3, [r6, #0]
 8007052:	6825      	ldr	r5, [r4, #0]
 8007054:	f015 0506 	ands.w	r5, r5, #6
 8007058:	d106      	bne.n	8007068 <_printf_common+0x48>
 800705a:	f104 0a19 	add.w	sl, r4, #25
 800705e:	68e3      	ldr	r3, [r4, #12]
 8007060:	6832      	ldr	r2, [r6, #0]
 8007062:	1a9b      	subs	r3, r3, r2
 8007064:	42ab      	cmp	r3, r5
 8007066:	dc26      	bgt.n	80070b6 <_printf_common+0x96>
 8007068:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800706c:	6822      	ldr	r2, [r4, #0]
 800706e:	3b00      	subs	r3, #0
 8007070:	bf18      	it	ne
 8007072:	2301      	movne	r3, #1
 8007074:	0692      	lsls	r2, r2, #26
 8007076:	d42b      	bmi.n	80070d0 <_printf_common+0xb0>
 8007078:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800707c:	4641      	mov	r1, r8
 800707e:	4638      	mov	r0, r7
 8007080:	47c8      	blx	r9
 8007082:	3001      	adds	r0, #1
 8007084:	d01e      	beq.n	80070c4 <_printf_common+0xa4>
 8007086:	6823      	ldr	r3, [r4, #0]
 8007088:	6922      	ldr	r2, [r4, #16]
 800708a:	f003 0306 	and.w	r3, r3, #6
 800708e:	2b04      	cmp	r3, #4
 8007090:	bf02      	ittt	eq
 8007092:	68e5      	ldreq	r5, [r4, #12]
 8007094:	6833      	ldreq	r3, [r6, #0]
 8007096:	1aed      	subeq	r5, r5, r3
 8007098:	68a3      	ldr	r3, [r4, #8]
 800709a:	bf0c      	ite	eq
 800709c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070a0:	2500      	movne	r5, #0
 80070a2:	4293      	cmp	r3, r2
 80070a4:	bfc4      	itt	gt
 80070a6:	1a9b      	subgt	r3, r3, r2
 80070a8:	18ed      	addgt	r5, r5, r3
 80070aa:	2600      	movs	r6, #0
 80070ac:	341a      	adds	r4, #26
 80070ae:	42b5      	cmp	r5, r6
 80070b0:	d11a      	bne.n	80070e8 <_printf_common+0xc8>
 80070b2:	2000      	movs	r0, #0
 80070b4:	e008      	b.n	80070c8 <_printf_common+0xa8>
 80070b6:	2301      	movs	r3, #1
 80070b8:	4652      	mov	r2, sl
 80070ba:	4641      	mov	r1, r8
 80070bc:	4638      	mov	r0, r7
 80070be:	47c8      	blx	r9
 80070c0:	3001      	adds	r0, #1
 80070c2:	d103      	bne.n	80070cc <_printf_common+0xac>
 80070c4:	f04f 30ff 	mov.w	r0, #4294967295
 80070c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070cc:	3501      	adds	r5, #1
 80070ce:	e7c6      	b.n	800705e <_printf_common+0x3e>
 80070d0:	18e1      	adds	r1, r4, r3
 80070d2:	1c5a      	adds	r2, r3, #1
 80070d4:	2030      	movs	r0, #48	@ 0x30
 80070d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80070da:	4422      	add	r2, r4
 80070dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80070e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80070e4:	3302      	adds	r3, #2
 80070e6:	e7c7      	b.n	8007078 <_printf_common+0x58>
 80070e8:	2301      	movs	r3, #1
 80070ea:	4622      	mov	r2, r4
 80070ec:	4641      	mov	r1, r8
 80070ee:	4638      	mov	r0, r7
 80070f0:	47c8      	blx	r9
 80070f2:	3001      	adds	r0, #1
 80070f4:	d0e6      	beq.n	80070c4 <_printf_common+0xa4>
 80070f6:	3601      	adds	r6, #1
 80070f8:	e7d9      	b.n	80070ae <_printf_common+0x8e>
	...

080070fc <_printf_i>:
 80070fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007100:	7e0f      	ldrb	r7, [r1, #24]
 8007102:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007104:	2f78      	cmp	r7, #120	@ 0x78
 8007106:	4691      	mov	r9, r2
 8007108:	4680      	mov	r8, r0
 800710a:	460c      	mov	r4, r1
 800710c:	469a      	mov	sl, r3
 800710e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007112:	d807      	bhi.n	8007124 <_printf_i+0x28>
 8007114:	2f62      	cmp	r7, #98	@ 0x62
 8007116:	d80a      	bhi.n	800712e <_printf_i+0x32>
 8007118:	2f00      	cmp	r7, #0
 800711a:	f000 80d1 	beq.w	80072c0 <_printf_i+0x1c4>
 800711e:	2f58      	cmp	r7, #88	@ 0x58
 8007120:	f000 80b8 	beq.w	8007294 <_printf_i+0x198>
 8007124:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007128:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800712c:	e03a      	b.n	80071a4 <_printf_i+0xa8>
 800712e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007132:	2b15      	cmp	r3, #21
 8007134:	d8f6      	bhi.n	8007124 <_printf_i+0x28>
 8007136:	a101      	add	r1, pc, #4	@ (adr r1, 800713c <_printf_i+0x40>)
 8007138:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800713c:	08007195 	.word	0x08007195
 8007140:	080071a9 	.word	0x080071a9
 8007144:	08007125 	.word	0x08007125
 8007148:	08007125 	.word	0x08007125
 800714c:	08007125 	.word	0x08007125
 8007150:	08007125 	.word	0x08007125
 8007154:	080071a9 	.word	0x080071a9
 8007158:	08007125 	.word	0x08007125
 800715c:	08007125 	.word	0x08007125
 8007160:	08007125 	.word	0x08007125
 8007164:	08007125 	.word	0x08007125
 8007168:	080072a7 	.word	0x080072a7
 800716c:	080071d3 	.word	0x080071d3
 8007170:	08007261 	.word	0x08007261
 8007174:	08007125 	.word	0x08007125
 8007178:	08007125 	.word	0x08007125
 800717c:	080072c9 	.word	0x080072c9
 8007180:	08007125 	.word	0x08007125
 8007184:	080071d3 	.word	0x080071d3
 8007188:	08007125 	.word	0x08007125
 800718c:	08007125 	.word	0x08007125
 8007190:	08007269 	.word	0x08007269
 8007194:	6833      	ldr	r3, [r6, #0]
 8007196:	1d1a      	adds	r2, r3, #4
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	6032      	str	r2, [r6, #0]
 800719c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80071a4:	2301      	movs	r3, #1
 80071a6:	e09c      	b.n	80072e2 <_printf_i+0x1e6>
 80071a8:	6833      	ldr	r3, [r6, #0]
 80071aa:	6820      	ldr	r0, [r4, #0]
 80071ac:	1d19      	adds	r1, r3, #4
 80071ae:	6031      	str	r1, [r6, #0]
 80071b0:	0606      	lsls	r6, r0, #24
 80071b2:	d501      	bpl.n	80071b8 <_printf_i+0xbc>
 80071b4:	681d      	ldr	r5, [r3, #0]
 80071b6:	e003      	b.n	80071c0 <_printf_i+0xc4>
 80071b8:	0645      	lsls	r5, r0, #25
 80071ba:	d5fb      	bpl.n	80071b4 <_printf_i+0xb8>
 80071bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071c0:	2d00      	cmp	r5, #0
 80071c2:	da03      	bge.n	80071cc <_printf_i+0xd0>
 80071c4:	232d      	movs	r3, #45	@ 0x2d
 80071c6:	426d      	negs	r5, r5
 80071c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071cc:	4858      	ldr	r0, [pc, #352]	@ (8007330 <_printf_i+0x234>)
 80071ce:	230a      	movs	r3, #10
 80071d0:	e011      	b.n	80071f6 <_printf_i+0xfa>
 80071d2:	6821      	ldr	r1, [r4, #0]
 80071d4:	6833      	ldr	r3, [r6, #0]
 80071d6:	0608      	lsls	r0, r1, #24
 80071d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80071dc:	d402      	bmi.n	80071e4 <_printf_i+0xe8>
 80071de:	0649      	lsls	r1, r1, #25
 80071e0:	bf48      	it	mi
 80071e2:	b2ad      	uxthmi	r5, r5
 80071e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80071e6:	4852      	ldr	r0, [pc, #328]	@ (8007330 <_printf_i+0x234>)
 80071e8:	6033      	str	r3, [r6, #0]
 80071ea:	bf14      	ite	ne
 80071ec:	230a      	movne	r3, #10
 80071ee:	2308      	moveq	r3, #8
 80071f0:	2100      	movs	r1, #0
 80071f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80071f6:	6866      	ldr	r6, [r4, #4]
 80071f8:	60a6      	str	r6, [r4, #8]
 80071fa:	2e00      	cmp	r6, #0
 80071fc:	db05      	blt.n	800720a <_printf_i+0x10e>
 80071fe:	6821      	ldr	r1, [r4, #0]
 8007200:	432e      	orrs	r6, r5
 8007202:	f021 0104 	bic.w	r1, r1, #4
 8007206:	6021      	str	r1, [r4, #0]
 8007208:	d04b      	beq.n	80072a2 <_printf_i+0x1a6>
 800720a:	4616      	mov	r6, r2
 800720c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007210:	fb03 5711 	mls	r7, r3, r1, r5
 8007214:	5dc7      	ldrb	r7, [r0, r7]
 8007216:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800721a:	462f      	mov	r7, r5
 800721c:	42bb      	cmp	r3, r7
 800721e:	460d      	mov	r5, r1
 8007220:	d9f4      	bls.n	800720c <_printf_i+0x110>
 8007222:	2b08      	cmp	r3, #8
 8007224:	d10b      	bne.n	800723e <_printf_i+0x142>
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	07df      	lsls	r7, r3, #31
 800722a:	d508      	bpl.n	800723e <_printf_i+0x142>
 800722c:	6923      	ldr	r3, [r4, #16]
 800722e:	6861      	ldr	r1, [r4, #4]
 8007230:	4299      	cmp	r1, r3
 8007232:	bfde      	ittt	le
 8007234:	2330      	movle	r3, #48	@ 0x30
 8007236:	f806 3c01 	strble.w	r3, [r6, #-1]
 800723a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800723e:	1b92      	subs	r2, r2, r6
 8007240:	6122      	str	r2, [r4, #16]
 8007242:	f8cd a000 	str.w	sl, [sp]
 8007246:	464b      	mov	r3, r9
 8007248:	aa03      	add	r2, sp, #12
 800724a:	4621      	mov	r1, r4
 800724c:	4640      	mov	r0, r8
 800724e:	f7ff fee7 	bl	8007020 <_printf_common>
 8007252:	3001      	adds	r0, #1
 8007254:	d14a      	bne.n	80072ec <_printf_i+0x1f0>
 8007256:	f04f 30ff 	mov.w	r0, #4294967295
 800725a:	b004      	add	sp, #16
 800725c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007260:	6823      	ldr	r3, [r4, #0]
 8007262:	f043 0320 	orr.w	r3, r3, #32
 8007266:	6023      	str	r3, [r4, #0]
 8007268:	4832      	ldr	r0, [pc, #200]	@ (8007334 <_printf_i+0x238>)
 800726a:	2778      	movs	r7, #120	@ 0x78
 800726c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007270:	6823      	ldr	r3, [r4, #0]
 8007272:	6831      	ldr	r1, [r6, #0]
 8007274:	061f      	lsls	r7, r3, #24
 8007276:	f851 5b04 	ldr.w	r5, [r1], #4
 800727a:	d402      	bmi.n	8007282 <_printf_i+0x186>
 800727c:	065f      	lsls	r7, r3, #25
 800727e:	bf48      	it	mi
 8007280:	b2ad      	uxthmi	r5, r5
 8007282:	6031      	str	r1, [r6, #0]
 8007284:	07d9      	lsls	r1, r3, #31
 8007286:	bf44      	itt	mi
 8007288:	f043 0320 	orrmi.w	r3, r3, #32
 800728c:	6023      	strmi	r3, [r4, #0]
 800728e:	b11d      	cbz	r5, 8007298 <_printf_i+0x19c>
 8007290:	2310      	movs	r3, #16
 8007292:	e7ad      	b.n	80071f0 <_printf_i+0xf4>
 8007294:	4826      	ldr	r0, [pc, #152]	@ (8007330 <_printf_i+0x234>)
 8007296:	e7e9      	b.n	800726c <_printf_i+0x170>
 8007298:	6823      	ldr	r3, [r4, #0]
 800729a:	f023 0320 	bic.w	r3, r3, #32
 800729e:	6023      	str	r3, [r4, #0]
 80072a0:	e7f6      	b.n	8007290 <_printf_i+0x194>
 80072a2:	4616      	mov	r6, r2
 80072a4:	e7bd      	b.n	8007222 <_printf_i+0x126>
 80072a6:	6833      	ldr	r3, [r6, #0]
 80072a8:	6825      	ldr	r5, [r4, #0]
 80072aa:	6961      	ldr	r1, [r4, #20]
 80072ac:	1d18      	adds	r0, r3, #4
 80072ae:	6030      	str	r0, [r6, #0]
 80072b0:	062e      	lsls	r6, r5, #24
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	d501      	bpl.n	80072ba <_printf_i+0x1be>
 80072b6:	6019      	str	r1, [r3, #0]
 80072b8:	e002      	b.n	80072c0 <_printf_i+0x1c4>
 80072ba:	0668      	lsls	r0, r5, #25
 80072bc:	d5fb      	bpl.n	80072b6 <_printf_i+0x1ba>
 80072be:	8019      	strh	r1, [r3, #0]
 80072c0:	2300      	movs	r3, #0
 80072c2:	6123      	str	r3, [r4, #16]
 80072c4:	4616      	mov	r6, r2
 80072c6:	e7bc      	b.n	8007242 <_printf_i+0x146>
 80072c8:	6833      	ldr	r3, [r6, #0]
 80072ca:	1d1a      	adds	r2, r3, #4
 80072cc:	6032      	str	r2, [r6, #0]
 80072ce:	681e      	ldr	r6, [r3, #0]
 80072d0:	6862      	ldr	r2, [r4, #4]
 80072d2:	2100      	movs	r1, #0
 80072d4:	4630      	mov	r0, r6
 80072d6:	f7f8 ff83 	bl	80001e0 <memchr>
 80072da:	b108      	cbz	r0, 80072e0 <_printf_i+0x1e4>
 80072dc:	1b80      	subs	r0, r0, r6
 80072de:	6060      	str	r0, [r4, #4]
 80072e0:	6863      	ldr	r3, [r4, #4]
 80072e2:	6123      	str	r3, [r4, #16]
 80072e4:	2300      	movs	r3, #0
 80072e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072ea:	e7aa      	b.n	8007242 <_printf_i+0x146>
 80072ec:	6923      	ldr	r3, [r4, #16]
 80072ee:	4632      	mov	r2, r6
 80072f0:	4649      	mov	r1, r9
 80072f2:	4640      	mov	r0, r8
 80072f4:	47d0      	blx	sl
 80072f6:	3001      	adds	r0, #1
 80072f8:	d0ad      	beq.n	8007256 <_printf_i+0x15a>
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	079b      	lsls	r3, r3, #30
 80072fe:	d413      	bmi.n	8007328 <_printf_i+0x22c>
 8007300:	68e0      	ldr	r0, [r4, #12]
 8007302:	9b03      	ldr	r3, [sp, #12]
 8007304:	4298      	cmp	r0, r3
 8007306:	bfb8      	it	lt
 8007308:	4618      	movlt	r0, r3
 800730a:	e7a6      	b.n	800725a <_printf_i+0x15e>
 800730c:	2301      	movs	r3, #1
 800730e:	4632      	mov	r2, r6
 8007310:	4649      	mov	r1, r9
 8007312:	4640      	mov	r0, r8
 8007314:	47d0      	blx	sl
 8007316:	3001      	adds	r0, #1
 8007318:	d09d      	beq.n	8007256 <_printf_i+0x15a>
 800731a:	3501      	adds	r5, #1
 800731c:	68e3      	ldr	r3, [r4, #12]
 800731e:	9903      	ldr	r1, [sp, #12]
 8007320:	1a5b      	subs	r3, r3, r1
 8007322:	42ab      	cmp	r3, r5
 8007324:	dcf2      	bgt.n	800730c <_printf_i+0x210>
 8007326:	e7eb      	b.n	8007300 <_printf_i+0x204>
 8007328:	2500      	movs	r5, #0
 800732a:	f104 0619 	add.w	r6, r4, #25
 800732e:	e7f5      	b.n	800731c <_printf_i+0x220>
 8007330:	08007a27 	.word	0x08007a27
 8007334:	08007a38 	.word	0x08007a38

08007338 <__sflush_r>:
 8007338:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800733c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007340:	0716      	lsls	r6, r2, #28
 8007342:	4605      	mov	r5, r0
 8007344:	460c      	mov	r4, r1
 8007346:	d454      	bmi.n	80073f2 <__sflush_r+0xba>
 8007348:	684b      	ldr	r3, [r1, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	dc02      	bgt.n	8007354 <__sflush_r+0x1c>
 800734e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007350:	2b00      	cmp	r3, #0
 8007352:	dd48      	ble.n	80073e6 <__sflush_r+0xae>
 8007354:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007356:	2e00      	cmp	r6, #0
 8007358:	d045      	beq.n	80073e6 <__sflush_r+0xae>
 800735a:	2300      	movs	r3, #0
 800735c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007360:	682f      	ldr	r7, [r5, #0]
 8007362:	6a21      	ldr	r1, [r4, #32]
 8007364:	602b      	str	r3, [r5, #0]
 8007366:	d030      	beq.n	80073ca <__sflush_r+0x92>
 8007368:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800736a:	89a3      	ldrh	r3, [r4, #12]
 800736c:	0759      	lsls	r1, r3, #29
 800736e:	d505      	bpl.n	800737c <__sflush_r+0x44>
 8007370:	6863      	ldr	r3, [r4, #4]
 8007372:	1ad2      	subs	r2, r2, r3
 8007374:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007376:	b10b      	cbz	r3, 800737c <__sflush_r+0x44>
 8007378:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800737a:	1ad2      	subs	r2, r2, r3
 800737c:	2300      	movs	r3, #0
 800737e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007380:	6a21      	ldr	r1, [r4, #32]
 8007382:	4628      	mov	r0, r5
 8007384:	47b0      	blx	r6
 8007386:	1c43      	adds	r3, r0, #1
 8007388:	89a3      	ldrh	r3, [r4, #12]
 800738a:	d106      	bne.n	800739a <__sflush_r+0x62>
 800738c:	6829      	ldr	r1, [r5, #0]
 800738e:	291d      	cmp	r1, #29
 8007390:	d82b      	bhi.n	80073ea <__sflush_r+0xb2>
 8007392:	4a2a      	ldr	r2, [pc, #168]	@ (800743c <__sflush_r+0x104>)
 8007394:	40ca      	lsrs	r2, r1
 8007396:	07d6      	lsls	r6, r2, #31
 8007398:	d527      	bpl.n	80073ea <__sflush_r+0xb2>
 800739a:	2200      	movs	r2, #0
 800739c:	6062      	str	r2, [r4, #4]
 800739e:	04d9      	lsls	r1, r3, #19
 80073a0:	6922      	ldr	r2, [r4, #16]
 80073a2:	6022      	str	r2, [r4, #0]
 80073a4:	d504      	bpl.n	80073b0 <__sflush_r+0x78>
 80073a6:	1c42      	adds	r2, r0, #1
 80073a8:	d101      	bne.n	80073ae <__sflush_r+0x76>
 80073aa:	682b      	ldr	r3, [r5, #0]
 80073ac:	b903      	cbnz	r3, 80073b0 <__sflush_r+0x78>
 80073ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80073b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80073b2:	602f      	str	r7, [r5, #0]
 80073b4:	b1b9      	cbz	r1, 80073e6 <__sflush_r+0xae>
 80073b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80073ba:	4299      	cmp	r1, r3
 80073bc:	d002      	beq.n	80073c4 <__sflush_r+0x8c>
 80073be:	4628      	mov	r0, r5
 80073c0:	f7ff fbec 	bl	8006b9c <_free_r>
 80073c4:	2300      	movs	r3, #0
 80073c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80073c8:	e00d      	b.n	80073e6 <__sflush_r+0xae>
 80073ca:	2301      	movs	r3, #1
 80073cc:	4628      	mov	r0, r5
 80073ce:	47b0      	blx	r6
 80073d0:	4602      	mov	r2, r0
 80073d2:	1c50      	adds	r0, r2, #1
 80073d4:	d1c9      	bne.n	800736a <__sflush_r+0x32>
 80073d6:	682b      	ldr	r3, [r5, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d0c6      	beq.n	800736a <__sflush_r+0x32>
 80073dc:	2b1d      	cmp	r3, #29
 80073de:	d001      	beq.n	80073e4 <__sflush_r+0xac>
 80073e0:	2b16      	cmp	r3, #22
 80073e2:	d11e      	bne.n	8007422 <__sflush_r+0xea>
 80073e4:	602f      	str	r7, [r5, #0]
 80073e6:	2000      	movs	r0, #0
 80073e8:	e022      	b.n	8007430 <__sflush_r+0xf8>
 80073ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073ee:	b21b      	sxth	r3, r3
 80073f0:	e01b      	b.n	800742a <__sflush_r+0xf2>
 80073f2:	690f      	ldr	r7, [r1, #16]
 80073f4:	2f00      	cmp	r7, #0
 80073f6:	d0f6      	beq.n	80073e6 <__sflush_r+0xae>
 80073f8:	0793      	lsls	r3, r2, #30
 80073fa:	680e      	ldr	r6, [r1, #0]
 80073fc:	bf08      	it	eq
 80073fe:	694b      	ldreq	r3, [r1, #20]
 8007400:	600f      	str	r7, [r1, #0]
 8007402:	bf18      	it	ne
 8007404:	2300      	movne	r3, #0
 8007406:	eba6 0807 	sub.w	r8, r6, r7
 800740a:	608b      	str	r3, [r1, #8]
 800740c:	f1b8 0f00 	cmp.w	r8, #0
 8007410:	dde9      	ble.n	80073e6 <__sflush_r+0xae>
 8007412:	6a21      	ldr	r1, [r4, #32]
 8007414:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007416:	4643      	mov	r3, r8
 8007418:	463a      	mov	r2, r7
 800741a:	4628      	mov	r0, r5
 800741c:	47b0      	blx	r6
 800741e:	2800      	cmp	r0, #0
 8007420:	dc08      	bgt.n	8007434 <__sflush_r+0xfc>
 8007422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007426:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800742a:	81a3      	strh	r3, [r4, #12]
 800742c:	f04f 30ff 	mov.w	r0, #4294967295
 8007430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007434:	4407      	add	r7, r0
 8007436:	eba8 0800 	sub.w	r8, r8, r0
 800743a:	e7e7      	b.n	800740c <__sflush_r+0xd4>
 800743c:	20400001 	.word	0x20400001

08007440 <_fflush_r>:
 8007440:	b538      	push	{r3, r4, r5, lr}
 8007442:	690b      	ldr	r3, [r1, #16]
 8007444:	4605      	mov	r5, r0
 8007446:	460c      	mov	r4, r1
 8007448:	b913      	cbnz	r3, 8007450 <_fflush_r+0x10>
 800744a:	2500      	movs	r5, #0
 800744c:	4628      	mov	r0, r5
 800744e:	bd38      	pop	{r3, r4, r5, pc}
 8007450:	b118      	cbz	r0, 800745a <_fflush_r+0x1a>
 8007452:	6a03      	ldr	r3, [r0, #32]
 8007454:	b90b      	cbnz	r3, 800745a <_fflush_r+0x1a>
 8007456:	f7ff f9c1 	bl	80067dc <__sinit>
 800745a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d0f3      	beq.n	800744a <_fflush_r+0xa>
 8007462:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007464:	07d0      	lsls	r0, r2, #31
 8007466:	d404      	bmi.n	8007472 <_fflush_r+0x32>
 8007468:	0599      	lsls	r1, r3, #22
 800746a:	d402      	bmi.n	8007472 <_fflush_r+0x32>
 800746c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800746e:	f7ff fb74 	bl	8006b5a <__retarget_lock_acquire_recursive>
 8007472:	4628      	mov	r0, r5
 8007474:	4621      	mov	r1, r4
 8007476:	f7ff ff5f 	bl	8007338 <__sflush_r>
 800747a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800747c:	07da      	lsls	r2, r3, #31
 800747e:	4605      	mov	r5, r0
 8007480:	d4e4      	bmi.n	800744c <_fflush_r+0xc>
 8007482:	89a3      	ldrh	r3, [r4, #12]
 8007484:	059b      	lsls	r3, r3, #22
 8007486:	d4e1      	bmi.n	800744c <_fflush_r+0xc>
 8007488:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800748a:	f7ff fb67 	bl	8006b5c <__retarget_lock_release_recursive>
 800748e:	e7dd      	b.n	800744c <_fflush_r+0xc>

08007490 <fiprintf>:
 8007490:	b40e      	push	{r1, r2, r3}
 8007492:	b503      	push	{r0, r1, lr}
 8007494:	4601      	mov	r1, r0
 8007496:	ab03      	add	r3, sp, #12
 8007498:	4805      	ldr	r0, [pc, #20]	@ (80074b0 <fiprintf+0x20>)
 800749a:	f853 2b04 	ldr.w	r2, [r3], #4
 800749e:	6800      	ldr	r0, [r0, #0]
 80074a0:	9301      	str	r3, [sp, #4]
 80074a2:	f7ff fca5 	bl	8006df0 <_vfiprintf_r>
 80074a6:	b002      	add	sp, #8
 80074a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80074ac:	b003      	add	sp, #12
 80074ae:	4770      	bx	lr
 80074b0:	20000020 	.word	0x20000020

080074b4 <__swbuf_r>:
 80074b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074b6:	460e      	mov	r6, r1
 80074b8:	4614      	mov	r4, r2
 80074ba:	4605      	mov	r5, r0
 80074bc:	b118      	cbz	r0, 80074c6 <__swbuf_r+0x12>
 80074be:	6a03      	ldr	r3, [r0, #32]
 80074c0:	b90b      	cbnz	r3, 80074c6 <__swbuf_r+0x12>
 80074c2:	f7ff f98b 	bl	80067dc <__sinit>
 80074c6:	69a3      	ldr	r3, [r4, #24]
 80074c8:	60a3      	str	r3, [r4, #8]
 80074ca:	89a3      	ldrh	r3, [r4, #12]
 80074cc:	071a      	lsls	r2, r3, #28
 80074ce:	d501      	bpl.n	80074d4 <__swbuf_r+0x20>
 80074d0:	6923      	ldr	r3, [r4, #16]
 80074d2:	b943      	cbnz	r3, 80074e6 <__swbuf_r+0x32>
 80074d4:	4621      	mov	r1, r4
 80074d6:	4628      	mov	r0, r5
 80074d8:	f000 f82a 	bl	8007530 <__swsetup_r>
 80074dc:	b118      	cbz	r0, 80074e6 <__swbuf_r+0x32>
 80074de:	f04f 37ff 	mov.w	r7, #4294967295
 80074e2:	4638      	mov	r0, r7
 80074e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074e6:	6823      	ldr	r3, [r4, #0]
 80074e8:	6922      	ldr	r2, [r4, #16]
 80074ea:	1a98      	subs	r0, r3, r2
 80074ec:	6963      	ldr	r3, [r4, #20]
 80074ee:	b2f6      	uxtb	r6, r6
 80074f0:	4283      	cmp	r3, r0
 80074f2:	4637      	mov	r7, r6
 80074f4:	dc05      	bgt.n	8007502 <__swbuf_r+0x4e>
 80074f6:	4621      	mov	r1, r4
 80074f8:	4628      	mov	r0, r5
 80074fa:	f7ff ffa1 	bl	8007440 <_fflush_r>
 80074fe:	2800      	cmp	r0, #0
 8007500:	d1ed      	bne.n	80074de <__swbuf_r+0x2a>
 8007502:	68a3      	ldr	r3, [r4, #8]
 8007504:	3b01      	subs	r3, #1
 8007506:	60a3      	str	r3, [r4, #8]
 8007508:	6823      	ldr	r3, [r4, #0]
 800750a:	1c5a      	adds	r2, r3, #1
 800750c:	6022      	str	r2, [r4, #0]
 800750e:	701e      	strb	r6, [r3, #0]
 8007510:	6962      	ldr	r2, [r4, #20]
 8007512:	1c43      	adds	r3, r0, #1
 8007514:	429a      	cmp	r2, r3
 8007516:	d004      	beq.n	8007522 <__swbuf_r+0x6e>
 8007518:	89a3      	ldrh	r3, [r4, #12]
 800751a:	07db      	lsls	r3, r3, #31
 800751c:	d5e1      	bpl.n	80074e2 <__swbuf_r+0x2e>
 800751e:	2e0a      	cmp	r6, #10
 8007520:	d1df      	bne.n	80074e2 <__swbuf_r+0x2e>
 8007522:	4621      	mov	r1, r4
 8007524:	4628      	mov	r0, r5
 8007526:	f7ff ff8b 	bl	8007440 <_fflush_r>
 800752a:	2800      	cmp	r0, #0
 800752c:	d0d9      	beq.n	80074e2 <__swbuf_r+0x2e>
 800752e:	e7d6      	b.n	80074de <__swbuf_r+0x2a>

08007530 <__swsetup_r>:
 8007530:	b538      	push	{r3, r4, r5, lr}
 8007532:	4b29      	ldr	r3, [pc, #164]	@ (80075d8 <__swsetup_r+0xa8>)
 8007534:	4605      	mov	r5, r0
 8007536:	6818      	ldr	r0, [r3, #0]
 8007538:	460c      	mov	r4, r1
 800753a:	b118      	cbz	r0, 8007544 <__swsetup_r+0x14>
 800753c:	6a03      	ldr	r3, [r0, #32]
 800753e:	b90b      	cbnz	r3, 8007544 <__swsetup_r+0x14>
 8007540:	f7ff f94c 	bl	80067dc <__sinit>
 8007544:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007548:	0719      	lsls	r1, r3, #28
 800754a:	d422      	bmi.n	8007592 <__swsetup_r+0x62>
 800754c:	06da      	lsls	r2, r3, #27
 800754e:	d407      	bmi.n	8007560 <__swsetup_r+0x30>
 8007550:	2209      	movs	r2, #9
 8007552:	602a      	str	r2, [r5, #0]
 8007554:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007558:	81a3      	strh	r3, [r4, #12]
 800755a:	f04f 30ff 	mov.w	r0, #4294967295
 800755e:	e033      	b.n	80075c8 <__swsetup_r+0x98>
 8007560:	0758      	lsls	r0, r3, #29
 8007562:	d512      	bpl.n	800758a <__swsetup_r+0x5a>
 8007564:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007566:	b141      	cbz	r1, 800757a <__swsetup_r+0x4a>
 8007568:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800756c:	4299      	cmp	r1, r3
 800756e:	d002      	beq.n	8007576 <__swsetup_r+0x46>
 8007570:	4628      	mov	r0, r5
 8007572:	f7ff fb13 	bl	8006b9c <_free_r>
 8007576:	2300      	movs	r3, #0
 8007578:	6363      	str	r3, [r4, #52]	@ 0x34
 800757a:	89a3      	ldrh	r3, [r4, #12]
 800757c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007580:	81a3      	strh	r3, [r4, #12]
 8007582:	2300      	movs	r3, #0
 8007584:	6063      	str	r3, [r4, #4]
 8007586:	6923      	ldr	r3, [r4, #16]
 8007588:	6023      	str	r3, [r4, #0]
 800758a:	89a3      	ldrh	r3, [r4, #12]
 800758c:	f043 0308 	orr.w	r3, r3, #8
 8007590:	81a3      	strh	r3, [r4, #12]
 8007592:	6923      	ldr	r3, [r4, #16]
 8007594:	b94b      	cbnz	r3, 80075aa <__swsetup_r+0x7a>
 8007596:	89a3      	ldrh	r3, [r4, #12]
 8007598:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800759c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075a0:	d003      	beq.n	80075aa <__swsetup_r+0x7a>
 80075a2:	4621      	mov	r1, r4
 80075a4:	4628      	mov	r0, r5
 80075a6:	f000 f856 	bl	8007656 <__smakebuf_r>
 80075aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075ae:	f013 0201 	ands.w	r2, r3, #1
 80075b2:	d00a      	beq.n	80075ca <__swsetup_r+0x9a>
 80075b4:	2200      	movs	r2, #0
 80075b6:	60a2      	str	r2, [r4, #8]
 80075b8:	6962      	ldr	r2, [r4, #20]
 80075ba:	4252      	negs	r2, r2
 80075bc:	61a2      	str	r2, [r4, #24]
 80075be:	6922      	ldr	r2, [r4, #16]
 80075c0:	b942      	cbnz	r2, 80075d4 <__swsetup_r+0xa4>
 80075c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80075c6:	d1c5      	bne.n	8007554 <__swsetup_r+0x24>
 80075c8:	bd38      	pop	{r3, r4, r5, pc}
 80075ca:	0799      	lsls	r1, r3, #30
 80075cc:	bf58      	it	pl
 80075ce:	6962      	ldrpl	r2, [r4, #20]
 80075d0:	60a2      	str	r2, [r4, #8]
 80075d2:	e7f4      	b.n	80075be <__swsetup_r+0x8e>
 80075d4:	2000      	movs	r0, #0
 80075d6:	e7f7      	b.n	80075c8 <__swsetup_r+0x98>
 80075d8:	20000020 	.word	0x20000020

080075dc <_sbrk_r>:
 80075dc:	b538      	push	{r3, r4, r5, lr}
 80075de:	4d06      	ldr	r5, [pc, #24]	@ (80075f8 <_sbrk_r+0x1c>)
 80075e0:	2300      	movs	r3, #0
 80075e2:	4604      	mov	r4, r0
 80075e4:	4608      	mov	r0, r1
 80075e6:	602b      	str	r3, [r5, #0]
 80075e8:	f7f9 ff68 	bl	80014bc <_sbrk>
 80075ec:	1c43      	adds	r3, r0, #1
 80075ee:	d102      	bne.n	80075f6 <_sbrk_r+0x1a>
 80075f0:	682b      	ldr	r3, [r5, #0]
 80075f2:	b103      	cbz	r3, 80075f6 <_sbrk_r+0x1a>
 80075f4:	6023      	str	r3, [r4, #0]
 80075f6:	bd38      	pop	{r3, r4, r5, pc}
 80075f8:	200044bc 	.word	0x200044bc

080075fc <abort>:
 80075fc:	b508      	push	{r3, lr}
 80075fe:	2006      	movs	r0, #6
 8007600:	f000 f88e 	bl	8007720 <raise>
 8007604:	2001      	movs	r0, #1
 8007606:	f7f9 fee1 	bl	80013cc <_exit>

0800760a <__swhatbuf_r>:
 800760a:	b570      	push	{r4, r5, r6, lr}
 800760c:	460c      	mov	r4, r1
 800760e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007612:	2900      	cmp	r1, #0
 8007614:	b096      	sub	sp, #88	@ 0x58
 8007616:	4615      	mov	r5, r2
 8007618:	461e      	mov	r6, r3
 800761a:	da0d      	bge.n	8007638 <__swhatbuf_r+0x2e>
 800761c:	89a3      	ldrh	r3, [r4, #12]
 800761e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007622:	f04f 0100 	mov.w	r1, #0
 8007626:	bf14      	ite	ne
 8007628:	2340      	movne	r3, #64	@ 0x40
 800762a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800762e:	2000      	movs	r0, #0
 8007630:	6031      	str	r1, [r6, #0]
 8007632:	602b      	str	r3, [r5, #0]
 8007634:	b016      	add	sp, #88	@ 0x58
 8007636:	bd70      	pop	{r4, r5, r6, pc}
 8007638:	466a      	mov	r2, sp
 800763a:	f000 f879 	bl	8007730 <_fstat_r>
 800763e:	2800      	cmp	r0, #0
 8007640:	dbec      	blt.n	800761c <__swhatbuf_r+0x12>
 8007642:	9901      	ldr	r1, [sp, #4]
 8007644:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007648:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800764c:	4259      	negs	r1, r3
 800764e:	4159      	adcs	r1, r3
 8007650:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007654:	e7eb      	b.n	800762e <__swhatbuf_r+0x24>

08007656 <__smakebuf_r>:
 8007656:	898b      	ldrh	r3, [r1, #12]
 8007658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800765a:	079d      	lsls	r5, r3, #30
 800765c:	4606      	mov	r6, r0
 800765e:	460c      	mov	r4, r1
 8007660:	d507      	bpl.n	8007672 <__smakebuf_r+0x1c>
 8007662:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007666:	6023      	str	r3, [r4, #0]
 8007668:	6123      	str	r3, [r4, #16]
 800766a:	2301      	movs	r3, #1
 800766c:	6163      	str	r3, [r4, #20]
 800766e:	b003      	add	sp, #12
 8007670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007672:	ab01      	add	r3, sp, #4
 8007674:	466a      	mov	r2, sp
 8007676:	f7ff ffc8 	bl	800760a <__swhatbuf_r>
 800767a:	9f00      	ldr	r7, [sp, #0]
 800767c:	4605      	mov	r5, r0
 800767e:	4639      	mov	r1, r7
 8007680:	4630      	mov	r0, r6
 8007682:	f7ff faff 	bl	8006c84 <_malloc_r>
 8007686:	b948      	cbnz	r0, 800769c <__smakebuf_r+0x46>
 8007688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800768c:	059a      	lsls	r2, r3, #22
 800768e:	d4ee      	bmi.n	800766e <__smakebuf_r+0x18>
 8007690:	f023 0303 	bic.w	r3, r3, #3
 8007694:	f043 0302 	orr.w	r3, r3, #2
 8007698:	81a3      	strh	r3, [r4, #12]
 800769a:	e7e2      	b.n	8007662 <__smakebuf_r+0xc>
 800769c:	89a3      	ldrh	r3, [r4, #12]
 800769e:	6020      	str	r0, [r4, #0]
 80076a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076a4:	81a3      	strh	r3, [r4, #12]
 80076a6:	9b01      	ldr	r3, [sp, #4]
 80076a8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80076ac:	b15b      	cbz	r3, 80076c6 <__smakebuf_r+0x70>
 80076ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076b2:	4630      	mov	r0, r6
 80076b4:	f000 f84e 	bl	8007754 <_isatty_r>
 80076b8:	b128      	cbz	r0, 80076c6 <__smakebuf_r+0x70>
 80076ba:	89a3      	ldrh	r3, [r4, #12]
 80076bc:	f023 0303 	bic.w	r3, r3, #3
 80076c0:	f043 0301 	orr.w	r3, r3, #1
 80076c4:	81a3      	strh	r3, [r4, #12]
 80076c6:	89a3      	ldrh	r3, [r4, #12]
 80076c8:	431d      	orrs	r5, r3
 80076ca:	81a5      	strh	r5, [r4, #12]
 80076cc:	e7cf      	b.n	800766e <__smakebuf_r+0x18>

080076ce <_raise_r>:
 80076ce:	291f      	cmp	r1, #31
 80076d0:	b538      	push	{r3, r4, r5, lr}
 80076d2:	4605      	mov	r5, r0
 80076d4:	460c      	mov	r4, r1
 80076d6:	d904      	bls.n	80076e2 <_raise_r+0x14>
 80076d8:	2316      	movs	r3, #22
 80076da:	6003      	str	r3, [r0, #0]
 80076dc:	f04f 30ff 	mov.w	r0, #4294967295
 80076e0:	bd38      	pop	{r3, r4, r5, pc}
 80076e2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80076e4:	b112      	cbz	r2, 80076ec <_raise_r+0x1e>
 80076e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80076ea:	b94b      	cbnz	r3, 8007700 <_raise_r+0x32>
 80076ec:	4628      	mov	r0, r5
 80076ee:	f000 f853 	bl	8007798 <_getpid_r>
 80076f2:	4622      	mov	r2, r4
 80076f4:	4601      	mov	r1, r0
 80076f6:	4628      	mov	r0, r5
 80076f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076fc:	f000 b83a 	b.w	8007774 <_kill_r>
 8007700:	2b01      	cmp	r3, #1
 8007702:	d00a      	beq.n	800771a <_raise_r+0x4c>
 8007704:	1c59      	adds	r1, r3, #1
 8007706:	d103      	bne.n	8007710 <_raise_r+0x42>
 8007708:	2316      	movs	r3, #22
 800770a:	6003      	str	r3, [r0, #0]
 800770c:	2001      	movs	r0, #1
 800770e:	e7e7      	b.n	80076e0 <_raise_r+0x12>
 8007710:	2100      	movs	r1, #0
 8007712:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007716:	4620      	mov	r0, r4
 8007718:	4798      	blx	r3
 800771a:	2000      	movs	r0, #0
 800771c:	e7e0      	b.n	80076e0 <_raise_r+0x12>
	...

08007720 <raise>:
 8007720:	4b02      	ldr	r3, [pc, #8]	@ (800772c <raise+0xc>)
 8007722:	4601      	mov	r1, r0
 8007724:	6818      	ldr	r0, [r3, #0]
 8007726:	f7ff bfd2 	b.w	80076ce <_raise_r>
 800772a:	bf00      	nop
 800772c:	20000020 	.word	0x20000020

08007730 <_fstat_r>:
 8007730:	b538      	push	{r3, r4, r5, lr}
 8007732:	4d07      	ldr	r5, [pc, #28]	@ (8007750 <_fstat_r+0x20>)
 8007734:	2300      	movs	r3, #0
 8007736:	4604      	mov	r4, r0
 8007738:	4608      	mov	r0, r1
 800773a:	4611      	mov	r1, r2
 800773c:	602b      	str	r3, [r5, #0]
 800773e:	f7f9 fe95 	bl	800146c <_fstat>
 8007742:	1c43      	adds	r3, r0, #1
 8007744:	d102      	bne.n	800774c <_fstat_r+0x1c>
 8007746:	682b      	ldr	r3, [r5, #0]
 8007748:	b103      	cbz	r3, 800774c <_fstat_r+0x1c>
 800774a:	6023      	str	r3, [r4, #0]
 800774c:	bd38      	pop	{r3, r4, r5, pc}
 800774e:	bf00      	nop
 8007750:	200044bc 	.word	0x200044bc

08007754 <_isatty_r>:
 8007754:	b538      	push	{r3, r4, r5, lr}
 8007756:	4d06      	ldr	r5, [pc, #24]	@ (8007770 <_isatty_r+0x1c>)
 8007758:	2300      	movs	r3, #0
 800775a:	4604      	mov	r4, r0
 800775c:	4608      	mov	r0, r1
 800775e:	602b      	str	r3, [r5, #0]
 8007760:	f7f9 fe94 	bl	800148c <_isatty>
 8007764:	1c43      	adds	r3, r0, #1
 8007766:	d102      	bne.n	800776e <_isatty_r+0x1a>
 8007768:	682b      	ldr	r3, [r5, #0]
 800776a:	b103      	cbz	r3, 800776e <_isatty_r+0x1a>
 800776c:	6023      	str	r3, [r4, #0]
 800776e:	bd38      	pop	{r3, r4, r5, pc}
 8007770:	200044bc 	.word	0x200044bc

08007774 <_kill_r>:
 8007774:	b538      	push	{r3, r4, r5, lr}
 8007776:	4d07      	ldr	r5, [pc, #28]	@ (8007794 <_kill_r+0x20>)
 8007778:	2300      	movs	r3, #0
 800777a:	4604      	mov	r4, r0
 800777c:	4608      	mov	r0, r1
 800777e:	4611      	mov	r1, r2
 8007780:	602b      	str	r3, [r5, #0]
 8007782:	f7f9 fe13 	bl	80013ac <_kill>
 8007786:	1c43      	adds	r3, r0, #1
 8007788:	d102      	bne.n	8007790 <_kill_r+0x1c>
 800778a:	682b      	ldr	r3, [r5, #0]
 800778c:	b103      	cbz	r3, 8007790 <_kill_r+0x1c>
 800778e:	6023      	str	r3, [r4, #0]
 8007790:	bd38      	pop	{r3, r4, r5, pc}
 8007792:	bf00      	nop
 8007794:	200044bc 	.word	0x200044bc

08007798 <_getpid_r>:
 8007798:	f7f9 be00 	b.w	800139c <_getpid>

0800779c <_init>:
 800779c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800779e:	bf00      	nop
 80077a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077a2:	bc08      	pop	{r3}
 80077a4:	469e      	mov	lr, r3
 80077a6:	4770      	bx	lr

080077a8 <_fini>:
 80077a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077aa:	bf00      	nop
 80077ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ae:	bc08      	pop	{r3}
 80077b0:	469e      	mov	lr, r3
 80077b2:	4770      	bx	lr
