
rtostest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a20  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004bc0  08004bc0  00005bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c58  08004c58  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004c58  08004c58  00005c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c60  08004c60  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c60  08004c60  00005c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c64  08004c64  00005c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004c68  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000423c  20000068  08004cd0  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200042a4  08004cd0  000062a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013507  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b3b  00000000  00000000  0001959f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  0001c0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d09  00000000  00000000  0001d1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017dbc  00000000  00000000  0001dea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001227e  00000000  00000000  00035c65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009688f  00000000  00000000  00047ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de772  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048b4  00000000  00000000  000de7b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000e306c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ba8 	.word	0x08004ba8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004ba8 	.word	0x08004ba8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	@ (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	@ (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	@ 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000084 	.word	0x20000084
 800053c:	20000124 	.word	0x20000124

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b096      	sub	sp, #88	@ 0x58
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000546:	f000 fda3 	bl	8001090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f861 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054e:	f000 f969 	bl	8000824 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000552:	f000 f93d 	bl	80007d0 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000556:	f000 f8c5 	bl	80006e4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_TIM_Base_Start_IT(&htim4) != HAL_OK) //인터럽트 시작
 800055a:	4826      	ldr	r0, [pc, #152]	@ (80005f4 <main+0xb4>)
 800055c:	f001 fd8c 	bl	8002078 <HAL_TIM_Base_Start_IT>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <main+0x2a>
  	Error_Handler();
 8000566:	f000 fbc1 	bl	8000cec <Error_Handler>

  if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) != HAL_OK)
 800056a:	2100      	movs	r1, #0
 800056c:	4821      	ldr	r0, [pc, #132]	@ (80005f4 <main+0xb4>)
 800056e:	f001 fe3f 	bl	80021f0 <HAL_TIM_PWM_Start>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <main+0x3c>
	Error_Handler();
 8000578:	f000 fbb8 	bl	8000cec <Error_Handler>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of motorTask */
  osThreadDef(motorTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800057c:	4b1e      	ldr	r3, [pc, #120]	@ (80005f8 <main+0xb8>)
 800057e:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000582:	461d      	mov	r5, r3
 8000584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000588:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800058c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorTaskHandle = osThreadCreate(osThread(motorTask), NULL);
 8000590:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f002 ffb3 	bl	8003502 <osThreadCreate>
 800059c:	4603      	mov	r3, r0
 800059e:	4a17      	ldr	r2, [pc, #92]	@ (80005fc <main+0xbc>)
 80005a0:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 80005a2:	4b17      	ldr	r3, [pc, #92]	@ (8000600 <main+0xc0>)
 80005a4:	f107 0420 	add.w	r4, r7, #32
 80005a8:	461d      	mov	r5, r3
 80005aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 ffa0 	bl	8003502 <osThreadCreate>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a0f      	ldr	r2, [pc, #60]	@ (8000604 <main+0xc4>)
 80005c6:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 80005c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <main+0xc8>)
 80005ca:	1d3c      	adds	r4, r7, #4
 80005cc:	461d      	mov	r5, r3
 80005ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 ff8f 	bl	8003502 <osThreadCreate>
 80005e4:	4603      	mov	r3, r0
 80005e6:	4a09      	ldr	r2, [pc, #36]	@ (800060c <main+0xcc>)
 80005e8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005ea:	f002 ff83 	bl	80034f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ee:	bf00      	nop
 80005f0:	e7fd      	b.n	80005ee <main+0xae>
 80005f2:	bf00      	nop
 80005f4:	20000324 	.word	0x20000324
 80005f8:	08004bcc 	.word	0x08004bcc
 80005fc:	200003b4 	.word	0x200003b4
 8000600:	08004bf4 	.word	0x08004bf4
 8000604:	200003b8 	.word	0x200003b8
 8000608:	08004c1c 	.word	0x08004c1c
 800060c:	200003bc 	.word	0x200003bc

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	@ 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	2230      	movs	r2, #48	@ 0x30
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f004 f9e0 	bl	80049e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	4b28      	ldr	r3, [pc, #160]	@ (80006dc <SystemClock_Config+0xcc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063c:	4a27      	ldr	r2, [pc, #156]	@ (80006dc <SystemClock_Config+0xcc>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	@ 0x40
 8000644:	4b25      	ldr	r3, [pc, #148]	@ (80006dc <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b22      	ldr	r3, [pc, #136]	@ (80006e0 <SystemClock_Config+0xd0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a21      	ldr	r2, [pc, #132]	@ (80006e0 <SystemClock_Config+0xd0>)
 800065a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b1f      	ldr	r3, [pc, #124]	@ (80006e0 <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066c:	2302      	movs	r3, #2
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000674:	2310      	movs	r3, #16
 8000676:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000678:	2302      	movs	r3, #2
 800067a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067c:	2300      	movs	r3, #0
 800067e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000680:	2310      	movs	r3, #16
 8000682:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000684:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000688:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800068a:	2304      	movs	r3, #4
 800068c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800068e:	2304      	movs	r3, #4
 8000690:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	4618      	mov	r0, r3
 8000698:	f000 ffd4 	bl	8001644 <HAL_RCC_OscConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006a2:	f000 fb23 	bl	8000cec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	230f      	movs	r3, #15
 80006a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2302      	movs	r3, #2
 80006ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2102      	movs	r1, #2
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 fa36 	bl	8001b34 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ce:	f000 fb0d 	bl	8000cec <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3750      	adds	r7, #80	@ 0x50
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08e      	sub	sp, #56	@ 0x38
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f8:	f107 0320 	add.w	r3, r7, #32
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
 8000710:	615a      	str	r2, [r3, #20]
 8000712:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000714:	4b2c      	ldr	r3, [pc, #176]	@ (80007c8 <MX_TIM4_Init+0xe4>)
 8000716:	4a2d      	ldr	r2, [pc, #180]	@ (80007cc <MX_TIM4_Init+0xe8>)
 8000718:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 800071a:	4b2b      	ldr	r3, [pc, #172]	@ (80007c8 <MX_TIM4_Init+0xe4>)
 800071c:	2253      	movs	r2, #83	@ 0x53
 800071e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000720:	4b29      	ldr	r3, [pc, #164]	@ (80007c8 <MX_TIM4_Init+0xe4>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8000726:	4b28      	ldr	r3, [pc, #160]	@ (80007c8 <MX_TIM4_Init+0xe4>)
 8000728:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800072c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800072e:	4b26      	ldr	r3, [pc, #152]	@ (80007c8 <MX_TIM4_Init+0xe4>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000734:	4b24      	ldr	r3, [pc, #144]	@ (80007c8 <MX_TIM4_Init+0xe4>)
 8000736:	2200      	movs	r2, #0
 8000738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800073a:	4823      	ldr	r0, [pc, #140]	@ (80007c8 <MX_TIM4_Init+0xe4>)
 800073c:	f001 fc4c 	bl	8001fd8 <HAL_TIM_Base_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000746:	f000 fad1 	bl	8000cec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800074a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800074e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000750:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000754:	4619      	mov	r1, r3
 8000756:	481c      	ldr	r0, [pc, #112]	@ (80007c8 <MX_TIM4_Init+0xe4>)
 8000758:	f001 ffac 	bl	80026b4 <HAL_TIM_ConfigClockSource>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000762:	f000 fac3 	bl	8000cec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000766:	4818      	ldr	r0, [pc, #96]	@ (80007c8 <MX_TIM4_Init+0xe4>)
 8000768:	f001 fce8 	bl	800213c <HAL_TIM_PWM_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000772:	f000 fabb 	bl	8000cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000776:	2300      	movs	r3, #0
 8000778:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800077a:	2300      	movs	r3, #0
 800077c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800077e:	f107 0320 	add.w	r3, r7, #32
 8000782:	4619      	mov	r1, r3
 8000784:	4810      	ldr	r0, [pc, #64]	@ (80007c8 <MX_TIM4_Init+0xe4>)
 8000786:	f002 fb57 	bl	8002e38 <HAL_TIMEx_MasterConfigSynchronization>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000790:	f000 faac 	bl	8000cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000794:	2360      	movs	r3, #96	@ 0x60
 8000796:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2200      	movs	r2, #0
 80007a8:	4619      	mov	r1, r3
 80007aa:	4807      	ldr	r0, [pc, #28]	@ (80007c8 <MX_TIM4_Init+0xe4>)
 80007ac:	f001 fec0 	bl	8002530 <HAL_TIM_PWM_ConfigChannel>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80007b6:	f000 fa99 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80007ba:	4803      	ldr	r0, [pc, #12]	@ (80007c8 <MX_TIM4_Init+0xe4>)
 80007bc:	f000 faf0 	bl	8000da0 <HAL_TIM_MspPostInit>

}
 80007c0:	bf00      	nop
 80007c2:	3738      	adds	r7, #56	@ 0x38
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000324 	.word	0x20000324
 80007cc:	40000800 	.word	0x40000800

080007d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d4:	4b11      	ldr	r3, [pc, #68]	@ (800081c <MX_USART2_UART_Init+0x4c>)
 80007d6:	4a12      	ldr	r2, [pc, #72]	@ (8000820 <MX_USART2_UART_Init+0x50>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007da:	4b10      	ldr	r3, [pc, #64]	@ (800081c <MX_USART2_UART_Init+0x4c>)
 80007dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <MX_USART2_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <MX_USART2_UART_Init+0x4c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	@ (800081c <MX_USART2_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b09      	ldr	r3, [pc, #36]	@ (800081c <MX_USART2_UART_Init+0x4c>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	@ (800081c <MX_USART2_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b06      	ldr	r3, [pc, #24]	@ (800081c <MX_USART2_UART_Init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	@ (800081c <MX_USART2_UART_Init+0x4c>)
 8000808:	f002 fb98 	bl	8002f3c <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000812:	f000 fa6b 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	2000036c 	.word	0x2000036c
 8000820:	40004400 	.word	0x40004400

08000824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	@ 0x28
 8000828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	4b45      	ldr	r3, [pc, #276]	@ (8000954 <MX_GPIO_Init+0x130>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a44      	ldr	r2, [pc, #272]	@ (8000954 <MX_GPIO_Init+0x130>)
 8000844:	f043 0304 	orr.w	r3, r3, #4
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b42      	ldr	r3, [pc, #264]	@ (8000954 <MX_GPIO_Init+0x130>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0304 	and.w	r3, r3, #4
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	4b3e      	ldr	r3, [pc, #248]	@ (8000954 <MX_GPIO_Init+0x130>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a3d      	ldr	r2, [pc, #244]	@ (8000954 <MX_GPIO_Init+0x130>)
 8000860:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b3b      	ldr	r3, [pc, #236]	@ (8000954 <MX_GPIO_Init+0x130>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	4b37      	ldr	r3, [pc, #220]	@ (8000954 <MX_GPIO_Init+0x130>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a36      	ldr	r2, [pc, #216]	@ (8000954 <MX_GPIO_Init+0x130>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b34      	ldr	r3, [pc, #208]	@ (8000954 <MX_GPIO_Init+0x130>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b30      	ldr	r3, [pc, #192]	@ (8000954 <MX_GPIO_Init+0x130>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a2f      	ldr	r2, [pc, #188]	@ (8000954 <MX_GPIO_Init+0x130>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b2d      	ldr	r3, [pc, #180]	@ (8000954 <MX_GPIO_Init+0x130>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	210f      	movs	r1, #15
 80008ae:	482a      	ldr	r0, [pc, #168]	@ (8000958 <MX_GPIO_Init+0x134>)
 80008b0:	f000 fe96 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2120      	movs	r1, #32
 80008b8:	4828      	ldr	r0, [pc, #160]	@ (800095c <MX_GPIO_Init+0x138>)
 80008ba:	f000 fe91 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008c4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	4619      	mov	r1, r3
 80008d4:	4820      	ldr	r0, [pc, #128]	@ (8000958 <MX_GPIO_Init+0x134>)
 80008d6:	f000 fcff 	bl	80012d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80008da:	230f      	movs	r3, #15
 80008dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	4819      	ldr	r0, [pc, #100]	@ (8000958 <MX_GPIO_Init+0x134>)
 80008f2:	f000 fcf1 	bl	80012d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : plus_Pin minus_Pin */
  GPIO_InitStruct.Pin = plus_Pin|minus_Pin;
 80008f6:	2303      	movs	r3, #3
 80008f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008fa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000900:	2301      	movs	r3, #1
 8000902:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	4814      	ldr	r0, [pc, #80]	@ (800095c <MX_GPIO_Init+0x138>)
 800090c:	f000 fce4 	bl	80012d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000910:	2320      	movs	r3, #32
 8000912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4619      	mov	r1, r3
 8000926:	480d      	ldr	r0, [pc, #52]	@ (800095c <MX_GPIO_Init+0x138>)
 8000928:	f000 fcd6 	bl	80012d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800092c:	2200      	movs	r2, #0
 800092e:	2105      	movs	r1, #5
 8000930:	2006      	movs	r0, #6
 8000932:	f000 fca7 	bl	8001284 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000936:	2006      	movs	r0, #6
 8000938:	f000 fcc0 	bl	80012bc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2105      	movs	r1, #5
 8000940:	2007      	movs	r0, #7
 8000942:	f000 fc9f 	bl	8001284 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000946:	2007      	movs	r0, #7
 8000948:	f000 fcb8 	bl	80012bc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800094c:	bf00      	nop
 800094e:	3728      	adds	r7, #40	@ 0x28
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40023800 	.word	0x40023800
 8000958:	40020800 	.word	0x40020800
 800095c:	40020000 	.word	0x40020000

08000960 <stepMotor>:

/* USER CODE BEGIN 4 */
void stepMotor(int step) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
    switch (step) {
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2b07      	cmp	r3, #7
 800096c:	f200 80bc 	bhi.w	8000ae8 <stepMotor+0x188>
 8000970:	a201      	add	r2, pc, #4	@ (adr r2, 8000978 <stepMotor+0x18>)
 8000972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000976:	bf00      	nop
 8000978:	08000999 	.word	0x08000999
 800097c:	080009c3 	.word	0x080009c3
 8000980:	080009ed 	.word	0x080009ed
 8000984:	08000a17 	.word	0x08000a17
 8000988:	08000a41 	.word	0x08000a41
 800098c:	08000a6b 	.word	0x08000a6b
 8000990:	08000a95 	.word	0x08000a95
 8000994:	08000abf 	.word	0x08000abf
        case 0:
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000998:	2201      	movs	r2, #1
 800099a:	2101      	movs	r1, #1
 800099c:	4854      	ldr	r0, [pc, #336]	@ (8000af0 <stepMotor+0x190>)
 800099e:	f000 fe1f 	bl	80015e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2102      	movs	r1, #2
 80009a6:	4852      	ldr	r0, [pc, #328]	@ (8000af0 <stepMotor+0x190>)
 80009a8:	f000 fe1a 	bl	80015e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2104      	movs	r1, #4
 80009b0:	484f      	ldr	r0, [pc, #316]	@ (8000af0 <stepMotor+0x190>)
 80009b2:	f000 fe15 	bl	80015e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2108      	movs	r1, #8
 80009ba:	484d      	ldr	r0, [pc, #308]	@ (8000af0 <stepMotor+0x190>)
 80009bc:	f000 fe10 	bl	80015e0 <HAL_GPIO_WritePin>
            break;
 80009c0:	e092      	b.n	8000ae8 <stepMotor+0x188>
        case 1:
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80009c2:	2201      	movs	r2, #1
 80009c4:	2101      	movs	r1, #1
 80009c6:	484a      	ldr	r0, [pc, #296]	@ (8000af0 <stepMotor+0x190>)
 80009c8:	f000 fe0a 	bl	80015e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2102      	movs	r1, #2
 80009d0:	4847      	ldr	r0, [pc, #284]	@ (8000af0 <stepMotor+0x190>)
 80009d2:	f000 fe05 	bl	80015e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2104      	movs	r1, #4
 80009da:	4845      	ldr	r0, [pc, #276]	@ (8000af0 <stepMotor+0x190>)
 80009dc:	f000 fe00 	bl	80015e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2108      	movs	r1, #8
 80009e4:	4842      	ldr	r0, [pc, #264]	@ (8000af0 <stepMotor+0x190>)
 80009e6:	f000 fdfb 	bl	80015e0 <HAL_GPIO_WritePin>
            break;
 80009ea:	e07d      	b.n	8000ae8 <stepMotor+0x188>
        case 2:
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2101      	movs	r1, #1
 80009f0:	483f      	ldr	r0, [pc, #252]	@ (8000af0 <stepMotor+0x190>)
 80009f2:	f000 fdf5 	bl	80015e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80009f6:	2201      	movs	r2, #1
 80009f8:	2102      	movs	r1, #2
 80009fa:	483d      	ldr	r0, [pc, #244]	@ (8000af0 <stepMotor+0x190>)
 80009fc:	f000 fdf0 	bl	80015e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2104      	movs	r1, #4
 8000a04:	483a      	ldr	r0, [pc, #232]	@ (8000af0 <stepMotor+0x190>)
 8000a06:	f000 fdeb 	bl	80015e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2108      	movs	r1, #8
 8000a0e:	4838      	ldr	r0, [pc, #224]	@ (8000af0 <stepMotor+0x190>)
 8000a10:	f000 fde6 	bl	80015e0 <HAL_GPIO_WritePin>
            break;
 8000a14:	e068      	b.n	8000ae8 <stepMotor+0x188>
        case 3:
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2101      	movs	r1, #1
 8000a1a:	4835      	ldr	r0, [pc, #212]	@ (8000af0 <stepMotor+0x190>)
 8000a1c:	f000 fde0 	bl	80015e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000a20:	2201      	movs	r2, #1
 8000a22:	2102      	movs	r1, #2
 8000a24:	4832      	ldr	r0, [pc, #200]	@ (8000af0 <stepMotor+0x190>)
 8000a26:	f000 fddb 	bl	80015e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	4830      	ldr	r0, [pc, #192]	@ (8000af0 <stepMotor+0x190>)
 8000a30:	f000 fdd6 	bl	80015e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2108      	movs	r1, #8
 8000a38:	482d      	ldr	r0, [pc, #180]	@ (8000af0 <stepMotor+0x190>)
 8000a3a:	f000 fdd1 	bl	80015e0 <HAL_GPIO_WritePin>
            break;
 8000a3e:	e053      	b.n	8000ae8 <stepMotor+0x188>
        case 4:
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2101      	movs	r1, #1
 8000a44:	482a      	ldr	r0, [pc, #168]	@ (8000af0 <stepMotor+0x190>)
 8000a46:	f000 fdcb 	bl	80015e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2102      	movs	r1, #2
 8000a4e:	4828      	ldr	r0, [pc, #160]	@ (8000af0 <stepMotor+0x190>)
 8000a50:	f000 fdc6 	bl	80015e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	2104      	movs	r1, #4
 8000a58:	4825      	ldr	r0, [pc, #148]	@ (8000af0 <stepMotor+0x190>)
 8000a5a:	f000 fdc1 	bl	80015e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2108      	movs	r1, #8
 8000a62:	4823      	ldr	r0, [pc, #140]	@ (8000af0 <stepMotor+0x190>)
 8000a64:	f000 fdbc 	bl	80015e0 <HAL_GPIO_WritePin>
            break;
 8000a68:	e03e      	b.n	8000ae8 <stepMotor+0x188>
        case 5:
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	4820      	ldr	r0, [pc, #128]	@ (8000af0 <stepMotor+0x190>)
 8000a70:	f000 fdb6 	bl	80015e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2102      	movs	r1, #2
 8000a78:	481d      	ldr	r0, [pc, #116]	@ (8000af0 <stepMotor+0x190>)
 8000a7a:	f000 fdb1 	bl	80015e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2104      	movs	r1, #4
 8000a82:	481b      	ldr	r0, [pc, #108]	@ (8000af0 <stepMotor+0x190>)
 8000a84:	f000 fdac 	bl	80015e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2108      	movs	r1, #8
 8000a8c:	4818      	ldr	r0, [pc, #96]	@ (8000af0 <stepMotor+0x190>)
 8000a8e:	f000 fda7 	bl	80015e0 <HAL_GPIO_WritePin>
            break;
 8000a92:	e029      	b.n	8000ae8 <stepMotor+0x188>
        case 6:
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2101      	movs	r1, #1
 8000a98:	4815      	ldr	r0, [pc, #84]	@ (8000af0 <stepMotor+0x190>)
 8000a9a:	f000 fda1 	bl	80015e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	4813      	ldr	r0, [pc, #76]	@ (8000af0 <stepMotor+0x190>)
 8000aa4:	f000 fd9c 	bl	80015e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2104      	movs	r1, #4
 8000aac:	4810      	ldr	r0, [pc, #64]	@ (8000af0 <stepMotor+0x190>)
 8000aae:	f000 fd97 	bl	80015e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	2108      	movs	r1, #8
 8000ab6:	480e      	ldr	r0, [pc, #56]	@ (8000af0 <stepMotor+0x190>)
 8000ab8:	f000 fd92 	bl	80015e0 <HAL_GPIO_WritePin>
            break;
 8000abc:	e014      	b.n	8000ae8 <stepMotor+0x188>
        case 7:
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	480b      	ldr	r0, [pc, #44]	@ (8000af0 <stepMotor+0x190>)
 8000ac4:	f000 fd8c 	bl	80015e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2102      	movs	r1, #2
 8000acc:	4808      	ldr	r0, [pc, #32]	@ (8000af0 <stepMotor+0x190>)
 8000ace:	f000 fd87 	bl	80015e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2104      	movs	r1, #4
 8000ad6:	4806      	ldr	r0, [pc, #24]	@ (8000af0 <stepMotor+0x190>)
 8000ad8:	f000 fd82 	bl	80015e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000adc:	2201      	movs	r2, #1
 8000ade:	2108      	movs	r1, #8
 8000ae0:	4803      	ldr	r0, [pc, #12]	@ (8000af0 <stepMotor+0x190>)
 8000ae2:	f000 fd7d 	bl	80015e0 <HAL_GPIO_WritePin>
            break;
 8000ae6:	bf00      	nop
    }
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40020800 	.word	0x40020800

08000af4 <Forward120>:

void Forward120(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
    const int one_revolution = 4096;
 8000afa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000afe:	60bb      	str	r3, [r7, #8]
    const int delay_ms = 1;
 8000b00:	2301      	movs	r3, #1
 8000b02:	607b      	str	r3, [r7, #4]

    for(int i = 0; i < one_revolution / 3; i++)
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	e011      	b.n	8000b2e <Forward120+0x3a>
    {
        // 8-step sequence (0 to 7)
        stepMotor(i % 8);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	425a      	negs	r2, r3
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	f002 0207 	and.w	r2, r2, #7
 8000b16:	bf58      	it	pl
 8000b18:	4253      	negpl	r3, r2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff ff20 	bl	8000960 <stepMotor>
        osDelay(delay_ms);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f002 fd39 	bl	800359a <osDelay>
    for(int i = 0; i < one_revolution / 3; i++)
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	4a06      	ldr	r2, [pc, #24]	@ (8000b4c <Forward120+0x58>)
 8000b32:	fb82 1203 	smull	r1, r2, r2, r3
 8000b36:	17db      	asrs	r3, r3, #31
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	dbe4      	blt.n	8000b0a <Forward120+0x16>
    }
}
 8000b40:	bf00      	nop
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	55555556 	.word	0x55555556

08000b50 <Backward120>:

void Backward120(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
    const int one_revolution = 4096;
 8000b56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b5a:	60bb      	str	r3, [r7, #8]
    const int delay_ms = 1;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	607b      	str	r3, [r7, #4]

    for(int i = 0; i < one_revolution / 3; i++)
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	e013      	b.n	8000b8e <Backward120+0x3e>
    {
        // 8-step sequence in reverse (7 to 0)
        stepMotor(7 - (i % 8));
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	425a      	negs	r2, r3
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	f002 0207 	and.w	r2, r2, #7
 8000b72:	bf58      	it	pl
 8000b74:	4253      	negpl	r3, r2
 8000b76:	f1c3 0307 	rsb	r3, r3, #7
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fef0 	bl	8000960 <stepMotor>
        osDelay(delay_ms);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f002 fd09 	bl	800359a <osDelay>
    for(int i = 0; i < one_revolution / 3; i++)
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	4a06      	ldr	r2, [pc, #24]	@ (8000bac <Backward120+0x5c>)
 8000b92:	fb82 1203 	smull	r1, r2, r2, r3
 8000b96:	17db      	asrs	r3, r3, #31
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	dbe2      	blt.n	8000b66 <Backward120+0x16>
    }
}
 8000ba0:	bf00      	nop
 8000ba2:	bf00      	nop
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	55555556 	.word	0x55555556

08000bb0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	80fb      	strh	r3, [r7, #6]
	 switch(GPIO_PIN)
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d002      	beq.n	8000bc6 <HAL_GPIO_EXTI_Callback+0x16>
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d00a      	beq.n	8000bda <HAL_GPIO_EXTI_Callback+0x2a>
	 		 motorCommand = MOTOR_BACKWARD;
	 		 motorFlag = 1;
	 		 servoDone = 0;
	 		 break;
	 }
}
 8000bc4:	e013      	b.n	8000bee <HAL_GPIO_EXTI_Callback+0x3e>
	 		 motorCommand = MOTOR_FORWARD;
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bfc <HAL_GPIO_EXTI_Callback+0x4c>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	701a      	strb	r2, [r3, #0]
	 		 motorFlag = 1;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <HAL_GPIO_EXTI_Callback+0x50>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	601a      	str	r2, [r3, #0]
	 		 servoDone = 0;
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c04 <HAL_GPIO_EXTI_Callback+0x54>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
	 		 break;
 8000bd8:	e009      	b.n	8000bee <HAL_GPIO_EXTI_Callback+0x3e>
	 		 motorCommand = MOTOR_BACKWARD;
 8000bda:	4b08      	ldr	r3, [pc, #32]	@ (8000bfc <HAL_GPIO_EXTI_Callback+0x4c>)
 8000bdc:	2202      	movs	r2, #2
 8000bde:	701a      	strb	r2, [r3, #0]
	 		 motorFlag = 1;
 8000be0:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <HAL_GPIO_EXTI_Callback+0x50>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	601a      	str	r2, [r3, #0]
	 		 servoDone = 0;
 8000be6:	4b07      	ldr	r3, [pc, #28]	@ (8000c04 <HAL_GPIO_EXTI_Callback+0x54>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
	 		 break;
 8000bec:	bf00      	nop
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	200003c0 	.word	0x200003c0
 8000c00:	20000000 	.word	0x20000000
 8000c04:	20000004 	.word	0x20000004

08000c08 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  switch (motorCommand)
 8000c10:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <StartDefaultTask+0x48>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d00b      	beq.n	8000c32 <StartDefaultTask+0x2a>
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	dc13      	bgt.n	8000c46 <StartDefaultTask+0x3e>
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d00d      	beq.n	8000c3e <StartDefaultTask+0x36>
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d10f      	bne.n	8000c46 <StartDefaultTask+0x3e>
	  	{
	  		case MOTOR_FORWARD:
	  			Forward120();      // 정방향 120도 회전 함수 호출
 8000c26:	f7ff ff65 	bl	8000af4 <Forward120>
	  			motorCommand = MOTOR_STOP; // 명령 수행 완료 후 대기 상태로 변경
 8000c2a:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <StartDefaultTask+0x48>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
	  			break;
 8000c30:	e009      	b.n	8000c46 <StartDefaultTask+0x3e>

	  		case MOTOR_BACKWARD:
	  			Backward120();     // 역방향 120도 회전 함수 호출
 8000c32:	f7ff ff8d 	bl	8000b50 <Backward120>
	  			motorCommand = MOTOR_STOP; // 명령 수행 완료 후 대기 상태로 변경
 8000c36:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <StartDefaultTask+0x48>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
	  			break;
 8000c3c:	e003      	b.n	8000c46 <StartDefaultTask+0x3e>

	  		case MOTOR_STOP:
	  			motorFlag = 0;
 8000c3e:	4b05      	ldr	r3, [pc, #20]	@ (8000c54 <StartDefaultTask+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
	  			break;
 8000c44:	bf00      	nop
	  	}
	  osDelay(10);
 8000c46:	200a      	movs	r0, #10
 8000c48:	f002 fca7 	bl	800359a <osDelay>
	  switch (motorCommand)
 8000c4c:	e7e0      	b.n	8000c10 <StartDefaultTask+0x8>
 8000c4e:	bf00      	nop
 8000c50:	200003c0 	.word	0x200003c0
 8000c54:	20000000 	.word	0x20000000

08000c58 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
		if(!motorFlag&&!servoDone)
 8000c60:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <StartTask02+0x44>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d114      	bne.n	8000c92 <StartTask02+0x3a>
 8000c68:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca0 <StartTask02+0x48>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d110      	bne.n	8000c92 <StartTask02+0x3a>
		{
			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 2500);
 8000c70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca4 <StartTask02+0x4c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8000c78:	635a      	str	r2, [r3, #52]	@ 0x34
			osDelay(1000);
 8000c7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c7e:	f002 fc8c 	bl	800359a <osDelay>
			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 500);
 8000c82:	4b08      	ldr	r3, [pc, #32]	@ (8000ca4 <StartTask02+0x4c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000c8a:	635a      	str	r2, [r3, #52]	@ 0x34
			servoDone = 1;
 8000c8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ca0 <StartTask02+0x48>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	601a      	str	r2, [r3, #0]
		}
    osDelay(10);
 8000c92:	200a      	movs	r0, #10
 8000c94:	f002 fc81 	bl	800359a <osDelay>
		if(!motorFlag&&!servoDone)
 8000c98:	e7e2      	b.n	8000c60 <StartTask02+0x8>
 8000c9a:	bf00      	nop
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	20000004 	.word	0x20000004
 8000ca4:	20000324 	.word	0x20000324

08000ca8 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f002 fc72 	bl	800359a <osDelay>
 8000cb6:	e7fb      	b.n	8000cb0 <StartTask03+0x8>

08000cb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if(htim->Instance == TIM4)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a07      	ldr	r2, [pc, #28]	@ (8000ce4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d101      	bne.n	8000cce <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 8000cca:	f000 fa03 	bl	80010d4 <HAL_IncTick>

	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a05      	ldr	r2, [pc, #20]	@ (8000ce8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d101      	bne.n	8000cdc <HAL_TIM_PeriodElapsedCallback+0x24>
  {
    HAL_IncTick();
 8000cd8:	f000 f9fc 	bl	80010d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40000800 	.word	0x40000800
 8000ce8:	40000400 	.word	0x40000400

08000cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf0:	b672      	cpsid	i
}
 8000cf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <Error_Handler+0x8>

08000cf8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	4b12      	ldr	r3, [pc, #72]	@ (8000d4c <HAL_MspInit+0x54>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d06:	4a11      	ldr	r2, [pc, #68]	@ (8000d4c <HAL_MspInit+0x54>)
 8000d08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <HAL_MspInit+0x54>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	603b      	str	r3, [r7, #0]
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d4c <HAL_MspInit+0x54>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d22:	4a0a      	ldr	r2, [pc, #40]	@ (8000d4c <HAL_MspInit+0x54>)
 8000d24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d2a:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <HAL_MspInit+0x54>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	210f      	movs	r1, #15
 8000d3a:	f06f 0001 	mvn.w	r0, #1
 8000d3e:	f000 faa1 	bl	8001284 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40023800 	.word	0x40023800

08000d50 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a0e      	ldr	r2, [pc, #56]	@ (8000d98 <HAL_TIM_Base_MspInit+0x48>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d115      	bne.n	8000d8e <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b0d      	ldr	r3, [pc, #52]	@ (8000d9c <HAL_TIM_Base_MspInit+0x4c>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6a:	4a0c      	ldr	r2, [pc, #48]	@ (8000d9c <HAL_TIM_Base_MspInit+0x4c>)
 8000d6c:	f043 0304 	orr.w	r3, r3, #4
 8000d70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d72:	4b0a      	ldr	r3, [pc, #40]	@ (8000d9c <HAL_TIM_Base_MspInit+0x4c>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d76:	f003 0304 	and.w	r3, r3, #4
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2105      	movs	r1, #5
 8000d82:	201e      	movs	r0, #30
 8000d84:	f000 fa7e 	bl	8001284 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d88:	201e      	movs	r0, #30
 8000d8a:	f000 fa97 	bl	80012bc <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40000800 	.word	0x40000800
 8000d9c:	40023800 	.word	0x40023800

08000da0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a12      	ldr	r2, [pc, #72]	@ (8000e08 <HAL_TIM_MspPostInit+0x68>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d11d      	bne.n	8000dfe <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <HAL_TIM_MspPostInit+0x6c>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	4a10      	ldr	r2, [pc, #64]	@ (8000e0c <HAL_TIM_MspPostInit+0x6c>)
 8000dcc:	f043 0302 	orr.w	r3, r3, #2
 8000dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e0c <HAL_TIM_MspPostInit+0x6c>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dde:	2340      	movs	r3, #64	@ 0x40
 8000de0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000dee:	2302      	movs	r3, #2
 8000df0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df2:	f107 030c 	add.w	r3, r7, #12
 8000df6:	4619      	mov	r1, r3
 8000df8:	4805      	ldr	r0, [pc, #20]	@ (8000e10 <HAL_TIM_MspPostInit+0x70>)
 8000dfa:	f000 fa6d 	bl	80012d8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000dfe:	bf00      	nop
 8000e00:	3720      	adds	r7, #32
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40000800 	.word	0x40000800
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40020400 	.word	0x40020400

08000e14 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	@ 0x28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a19      	ldr	r2, [pc, #100]	@ (8000e98 <HAL_UART_MspInit+0x84>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d12b      	bne.n	8000e8e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	4b18      	ldr	r3, [pc, #96]	@ (8000e9c <HAL_UART_MspInit+0x88>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3e:	4a17      	ldr	r2, [pc, #92]	@ (8000e9c <HAL_UART_MspInit+0x88>)
 8000e40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e46:	4b15      	ldr	r3, [pc, #84]	@ (8000e9c <HAL_UART_MspInit+0x88>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	4b11      	ldr	r3, [pc, #68]	@ (8000e9c <HAL_UART_MspInit+0x88>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	4a10      	ldr	r2, [pc, #64]	@ (8000e9c <HAL_UART_MspInit+0x88>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e62:	4b0e      	ldr	r3, [pc, #56]	@ (8000e9c <HAL_UART_MspInit+0x88>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e6e:	230c      	movs	r3, #12
 8000e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e7e:	2307      	movs	r3, #7
 8000e80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4619      	mov	r1, r3
 8000e88:	4805      	ldr	r0, [pc, #20]	@ (8000ea0 <HAL_UART_MspInit+0x8c>)
 8000e8a:	f000 fa25 	bl	80012d8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e8e:	bf00      	nop
 8000e90:	3728      	adds	r7, #40	@ 0x28
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40004400 	.word	0x40004400
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020000 	.word	0x40020000

08000ea4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08e      	sub	sp, #56	@ 0x38
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000eac:	2300      	movs	r3, #0
 8000eae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	4b33      	ldr	r3, [pc, #204]	@ (8000f88 <HAL_InitTick+0xe4>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebc:	4a32      	ldr	r2, [pc, #200]	@ (8000f88 <HAL_InitTick+0xe4>)
 8000ebe:	f043 0302 	orr.w	r3, r3, #2
 8000ec2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ec4:	4b30      	ldr	r3, [pc, #192]	@ (8000f88 <HAL_InitTick+0xe4>)
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ed0:	f107 0210 	add.w	r2, r7, #16
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	4611      	mov	r1, r2
 8000eda:	4618      	mov	r0, r3
 8000edc:	f001 f84a 	bl	8001f74 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ee0:	6a3b      	ldr	r3, [r7, #32]
 8000ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d103      	bne.n	8000ef2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000eea:	f001 f81b 	bl	8001f24 <HAL_RCC_GetPCLK1Freq>
 8000eee:	6378      	str	r0, [r7, #52]	@ 0x34
 8000ef0:	e004      	b.n	8000efc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ef2:	f001 f817 	bl	8001f24 <HAL_RCC_GetPCLK1Freq>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000efe:	4a23      	ldr	r2, [pc, #140]	@ (8000f8c <HAL_InitTick+0xe8>)
 8000f00:	fba2 2303 	umull	r2, r3, r2, r3
 8000f04:	0c9b      	lsrs	r3, r3, #18
 8000f06:	3b01      	subs	r3, #1
 8000f08:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000f0a:	4b21      	ldr	r3, [pc, #132]	@ (8000f90 <HAL_InitTick+0xec>)
 8000f0c:	4a21      	ldr	r2, [pc, #132]	@ (8000f94 <HAL_InitTick+0xf0>)
 8000f0e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000f10:	4b1f      	ldr	r3, [pc, #124]	@ (8000f90 <HAL_InitTick+0xec>)
 8000f12:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f16:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000f18:	4a1d      	ldr	r2, [pc, #116]	@ (8000f90 <HAL_InitTick+0xec>)
 8000f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f1c:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000f1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f90 <HAL_InitTick+0xec>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f24:	4b1a      	ldr	r3, [pc, #104]	@ (8000f90 <HAL_InitTick+0xec>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f2a:	4b19      	ldr	r3, [pc, #100]	@ (8000f90 <HAL_InitTick+0xec>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000f30:	4817      	ldr	r0, [pc, #92]	@ (8000f90 <HAL_InitTick+0xec>)
 8000f32:	f001 f851 	bl	8001fd8 <HAL_TIM_Base_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000f3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d11b      	bne.n	8000f7c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000f44:	4812      	ldr	r0, [pc, #72]	@ (8000f90 <HAL_InitTick+0xec>)
 8000f46:	f001 f897 	bl	8002078 <HAL_TIM_Base_Start_IT>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000f50:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d111      	bne.n	8000f7c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f58:	201d      	movs	r0, #29
 8000f5a:	f000 f9af 	bl	80012bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2b0f      	cmp	r3, #15
 8000f62:	d808      	bhi.n	8000f76 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000f64:	2200      	movs	r2, #0
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	201d      	movs	r0, #29
 8000f6a:	f000 f98b 	bl	8001284 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f98 <HAL_InitTick+0xf4>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	e002      	b.n	8000f7c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f7c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3738      	adds	r7, #56	@ 0x38
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	431bde83 	.word	0x431bde83
 8000f90:	200003c4 	.word	0x200003c4
 8000f94:	40000400 	.word	0x40000400
 8000f98:	2000000c 	.word	0x2000000c

08000f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <NMI_Handler+0x4>

08000fa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <HardFault_Handler+0x4>

08000fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <MemManage_Handler+0x4>

08000fb4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <BusFault_Handler+0x4>

08000fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <UsageFault_Handler+0x4>

08000fc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(plus_Pin);
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	f000 fb1c 	bl	8001614 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(minus_Pin);
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	f000 fb15 	bl	8001614 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ff4:	4802      	ldr	r0, [pc, #8]	@ (8001000 <TIM3_IRQHandler+0x10>)
 8000ff6:	f001 f9ab 	bl	8002350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200003c4 	.word	0x200003c4

08001004 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001008:	4802      	ldr	r0, [pc, #8]	@ (8001014 <TIM4_IRQHandler+0x10>)
 800100a:	f001 f9a1 	bl	8002350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000324 	.word	0x20000324

08001018 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <SystemInit+0x20>)
 800101e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001022:	4a05      	ldr	r2, [pc, #20]	@ (8001038 <SystemInit+0x20>)
 8001024:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001028:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800103c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001074 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001040:	f7ff ffea 	bl	8001018 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001044:	480c      	ldr	r0, [pc, #48]	@ (8001078 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001046:	490d      	ldr	r1, [pc, #52]	@ (800107c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001048:	4a0d      	ldr	r2, [pc, #52]	@ (8001080 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a0a      	ldr	r2, [pc, #40]	@ (8001084 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800105c:	4c0a      	ldr	r4, [pc, #40]	@ (8001088 <LoopFillZerobss+0x22>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800106a:	f003 fd21 	bl	8004ab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800106e:	f7ff fa67 	bl	8000540 <main>
  bx  lr    
 8001072:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001074:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800107c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001080:	08004c68 	.word	0x08004c68
  ldr r2, =_sbss
 8001084:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001088:	200042a4 	.word	0x200042a4

0800108c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800108c:	e7fe      	b.n	800108c <ADC_IRQHandler>
	...

08001090 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001094:	4b0e      	ldr	r3, [pc, #56]	@ (80010d0 <HAL_Init+0x40>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a0d      	ldr	r2, [pc, #52]	@ (80010d0 <HAL_Init+0x40>)
 800109a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800109e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010a0:	4b0b      	ldr	r3, [pc, #44]	@ (80010d0 <HAL_Init+0x40>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0a      	ldr	r2, [pc, #40]	@ (80010d0 <HAL_Init+0x40>)
 80010a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ac:	4b08      	ldr	r3, [pc, #32]	@ (80010d0 <HAL_Init+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a07      	ldr	r2, [pc, #28]	@ (80010d0 <HAL_Init+0x40>)
 80010b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b8:	2003      	movs	r0, #3
 80010ba:	f000 f8d8 	bl	800126e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010be:	200f      	movs	r0, #15
 80010c0:	f7ff fef0 	bl	8000ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c4:	f7ff fe18 	bl	8000cf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40023c00 	.word	0x40023c00

080010d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d8:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <HAL_IncTick+0x20>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <HAL_IncTick+0x24>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4413      	add	r3, r2
 80010e4:	4a04      	ldr	r2, [pc, #16]	@ (80010f8 <HAL_IncTick+0x24>)
 80010e6:	6013      	str	r3, [r2, #0]
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	20000010 	.word	0x20000010
 80010f8:	2000040c 	.word	0x2000040c

080010fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001100:	4b03      	ldr	r3, [pc, #12]	@ (8001110 <HAL_GetTick+0x14>)
 8001102:	681b      	ldr	r3, [r3, #0]
}
 8001104:	4618      	mov	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	2000040c 	.word	0x2000040c

08001114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001124:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <__NVIC_SetPriorityGrouping+0x44>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001130:	4013      	ands	r3, r2
 8001132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800113c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001140:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001146:	4a04      	ldr	r2, [pc, #16]	@ (8001158 <__NVIC_SetPriorityGrouping+0x44>)
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	60d3      	str	r3, [r2, #12]
}
 800114c:	bf00      	nop
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001160:	4b04      	ldr	r3, [pc, #16]	@ (8001174 <__NVIC_GetPriorityGrouping+0x18>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	0a1b      	lsrs	r3, r3, #8
 8001166:	f003 0307 	and.w	r3, r3, #7
}
 800116a:	4618      	mov	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	2b00      	cmp	r3, #0
 8001188:	db0b      	blt.n	80011a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	f003 021f 	and.w	r2, r3, #31
 8001190:	4907      	ldr	r1, [pc, #28]	@ (80011b0 <__NVIC_EnableIRQ+0x38>)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	095b      	lsrs	r3, r3, #5
 8001198:	2001      	movs	r0, #1
 800119a:	fa00 f202 	lsl.w	r2, r0, r2
 800119e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000e100 	.word	0xe000e100

080011b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	db0a      	blt.n	80011de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	490c      	ldr	r1, [pc, #48]	@ (8001200 <__NVIC_SetPriority+0x4c>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	0112      	lsls	r2, r2, #4
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	440b      	add	r3, r1
 80011d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011dc:	e00a      	b.n	80011f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4908      	ldr	r1, [pc, #32]	@ (8001204 <__NVIC_SetPriority+0x50>)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	3b04      	subs	r3, #4
 80011ec:	0112      	lsls	r2, r2, #4
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	440b      	add	r3, r1
 80011f2:	761a      	strb	r2, [r3, #24]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000e100 	.word	0xe000e100
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001208:	b480      	push	{r7}
 800120a:	b089      	sub	sp, #36	@ 0x24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f1c3 0307 	rsb	r3, r3, #7
 8001222:	2b04      	cmp	r3, #4
 8001224:	bf28      	it	cs
 8001226:	2304      	movcs	r3, #4
 8001228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3304      	adds	r3, #4
 800122e:	2b06      	cmp	r3, #6
 8001230:	d902      	bls.n	8001238 <NVIC_EncodePriority+0x30>
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3b03      	subs	r3, #3
 8001236:	e000      	b.n	800123a <NVIC_EncodePriority+0x32>
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	f04f 32ff 	mov.w	r2, #4294967295
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43da      	mvns	r2, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	401a      	ands	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001250:	f04f 31ff 	mov.w	r1, #4294967295
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	43d9      	mvns	r1, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	4313      	orrs	r3, r2
         );
}
 8001262:	4618      	mov	r0, r3
 8001264:	3724      	adds	r7, #36	@ 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ff4c 	bl	8001114 <__NVIC_SetPriorityGrouping>
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
 8001290:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001296:	f7ff ff61 	bl	800115c <__NVIC_GetPriorityGrouping>
 800129a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	68b9      	ldr	r1, [r7, #8]
 80012a0:	6978      	ldr	r0, [r7, #20]
 80012a2:	f7ff ffb1 	bl	8001208 <NVIC_EncodePriority>
 80012a6:	4602      	mov	r2, r0
 80012a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ac:	4611      	mov	r1, r2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff ff80 	bl	80011b4 <__NVIC_SetPriority>
}
 80012b4:	bf00      	nop
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff54 	bl	8001178 <__NVIC_EnableIRQ>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	@ 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
 80012f2:	e159      	b.n	80015a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012f4:	2201      	movs	r2, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	429a      	cmp	r2, r3
 800130e:	f040 8148 	bne.w	80015a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	2b01      	cmp	r3, #1
 800131c:	d005      	beq.n	800132a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001326:	2b02      	cmp	r3, #2
 8001328:	d130      	bne.n	800138c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	2203      	movs	r2, #3
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	68da      	ldr	r2, [r3, #12]
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001360:	2201      	movs	r2, #1
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	091b      	lsrs	r3, r3, #4
 8001376:	f003 0201 	and.w	r2, r3, #1
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	2b03      	cmp	r3, #3
 8001396:	d017      	beq.n	80013c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	2203      	movs	r2, #3
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d123      	bne.n	800141c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	08da      	lsrs	r2, r3, #3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3208      	adds	r2, #8
 80013dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	220f      	movs	r2, #15
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	691a      	ldr	r2, [r3, #16]
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	08da      	lsrs	r2, r3, #3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3208      	adds	r2, #8
 8001416:	69b9      	ldr	r1, [r7, #24]
 8001418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	2203      	movs	r2, #3
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 0203 	and.w	r2, r3, #3
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 80a2 	beq.w	80015a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	4b57      	ldr	r3, [pc, #348]	@ (80015c0 <HAL_GPIO_Init+0x2e8>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001466:	4a56      	ldr	r2, [pc, #344]	@ (80015c0 <HAL_GPIO_Init+0x2e8>)
 8001468:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800146c:	6453      	str	r3, [r2, #68]	@ 0x44
 800146e:	4b54      	ldr	r3, [pc, #336]	@ (80015c0 <HAL_GPIO_Init+0x2e8>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001472:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800147a:	4a52      	ldr	r2, [pc, #328]	@ (80015c4 <HAL_GPIO_Init+0x2ec>)
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	089b      	lsrs	r3, r3, #2
 8001480:	3302      	adds	r3, #2
 8001482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f003 0303 	and.w	r3, r3, #3
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	220f      	movs	r2, #15
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a49      	ldr	r2, [pc, #292]	@ (80015c8 <HAL_GPIO_Init+0x2f0>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d019      	beq.n	80014da <HAL_GPIO_Init+0x202>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a48      	ldr	r2, [pc, #288]	@ (80015cc <HAL_GPIO_Init+0x2f4>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d013      	beq.n	80014d6 <HAL_GPIO_Init+0x1fe>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a47      	ldr	r2, [pc, #284]	@ (80015d0 <HAL_GPIO_Init+0x2f8>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d00d      	beq.n	80014d2 <HAL_GPIO_Init+0x1fa>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a46      	ldr	r2, [pc, #280]	@ (80015d4 <HAL_GPIO_Init+0x2fc>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d007      	beq.n	80014ce <HAL_GPIO_Init+0x1f6>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a45      	ldr	r2, [pc, #276]	@ (80015d8 <HAL_GPIO_Init+0x300>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d101      	bne.n	80014ca <HAL_GPIO_Init+0x1f2>
 80014c6:	2304      	movs	r3, #4
 80014c8:	e008      	b.n	80014dc <HAL_GPIO_Init+0x204>
 80014ca:	2307      	movs	r3, #7
 80014cc:	e006      	b.n	80014dc <HAL_GPIO_Init+0x204>
 80014ce:	2303      	movs	r3, #3
 80014d0:	e004      	b.n	80014dc <HAL_GPIO_Init+0x204>
 80014d2:	2302      	movs	r3, #2
 80014d4:	e002      	b.n	80014dc <HAL_GPIO_Init+0x204>
 80014d6:	2301      	movs	r3, #1
 80014d8:	e000      	b.n	80014dc <HAL_GPIO_Init+0x204>
 80014da:	2300      	movs	r3, #0
 80014dc:	69fa      	ldr	r2, [r7, #28]
 80014de:	f002 0203 	and.w	r2, r2, #3
 80014e2:	0092      	lsls	r2, r2, #2
 80014e4:	4093      	lsls	r3, r2
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014ec:	4935      	ldr	r1, [pc, #212]	@ (80015c4 <HAL_GPIO_Init+0x2ec>)
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	089b      	lsrs	r3, r3, #2
 80014f2:	3302      	adds	r3, #2
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014fa:	4b38      	ldr	r3, [pc, #224]	@ (80015dc <HAL_GPIO_Init+0x304>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	43db      	mvns	r3, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4013      	ands	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800151e:	4a2f      	ldr	r2, [pc, #188]	@ (80015dc <HAL_GPIO_Init+0x304>)
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001524:	4b2d      	ldr	r3, [pc, #180]	@ (80015dc <HAL_GPIO_Init+0x304>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	43db      	mvns	r3, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4013      	ands	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001548:	4a24      	ldr	r2, [pc, #144]	@ (80015dc <HAL_GPIO_Init+0x304>)
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800154e:	4b23      	ldr	r3, [pc, #140]	@ (80015dc <HAL_GPIO_Init+0x304>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	4313      	orrs	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001572:	4a1a      	ldr	r2, [pc, #104]	@ (80015dc <HAL_GPIO_Init+0x304>)
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001578:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <HAL_GPIO_Init+0x304>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	43db      	mvns	r3, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800159c:	4a0f      	ldr	r2, [pc, #60]	@ (80015dc <HAL_GPIO_Init+0x304>)
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3301      	adds	r3, #1
 80015a6:	61fb      	str	r3, [r7, #28]
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	2b0f      	cmp	r3, #15
 80015ac:	f67f aea2 	bls.w	80012f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	3724      	adds	r7, #36	@ 0x24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40013800 	.word	0x40013800
 80015c8:	40020000 	.word	0x40020000
 80015cc:	40020400 	.word	0x40020400
 80015d0:	40020800 	.word	0x40020800
 80015d4:	40020c00 	.word	0x40020c00
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40013c00 	.word	0x40013c00

080015e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	807b      	strh	r3, [r7, #2]
 80015ec:	4613      	mov	r3, r2
 80015ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015f0:	787b      	ldrb	r3, [r7, #1]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015f6:	887a      	ldrh	r2, [r7, #2]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015fc:	e003      	b.n	8001606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015fe:	887b      	ldrh	r3, [r7, #2]
 8001600:	041a      	lsls	r2, r3, #16
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	619a      	str	r2, [r3, #24]
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
	...

08001614 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800161e:	4b08      	ldr	r3, [pc, #32]	@ (8001640 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001620:	695a      	ldr	r2, [r3, #20]
 8001622:	88fb      	ldrh	r3, [r7, #6]
 8001624:	4013      	ands	r3, r2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d006      	beq.n	8001638 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800162a:	4a05      	ldr	r2, [pc, #20]	@ (8001640 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800162c:	88fb      	ldrh	r3, [r7, #6]
 800162e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001630:	88fb      	ldrh	r3, [r7, #6]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fabc 	bl	8000bb0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40013c00 	.word	0x40013c00

08001644 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e267      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b00      	cmp	r3, #0
 8001660:	d075      	beq.n	800174e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001662:	4b88      	ldr	r3, [pc, #544]	@ (8001884 <HAL_RCC_OscConfig+0x240>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	2b04      	cmp	r3, #4
 800166c:	d00c      	beq.n	8001688 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800166e:	4b85      	ldr	r3, [pc, #532]	@ (8001884 <HAL_RCC_OscConfig+0x240>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001676:	2b08      	cmp	r3, #8
 8001678:	d112      	bne.n	80016a0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800167a:	4b82      	ldr	r3, [pc, #520]	@ (8001884 <HAL_RCC_OscConfig+0x240>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001682:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001686:	d10b      	bne.n	80016a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001688:	4b7e      	ldr	r3, [pc, #504]	@ (8001884 <HAL_RCC_OscConfig+0x240>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d05b      	beq.n	800174c <HAL_RCC_OscConfig+0x108>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d157      	bne.n	800174c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e242      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016a8:	d106      	bne.n	80016b8 <HAL_RCC_OscConfig+0x74>
 80016aa:	4b76      	ldr	r3, [pc, #472]	@ (8001884 <HAL_RCC_OscConfig+0x240>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a75      	ldr	r2, [pc, #468]	@ (8001884 <HAL_RCC_OscConfig+0x240>)
 80016b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	e01d      	b.n	80016f4 <HAL_RCC_OscConfig+0xb0>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016c0:	d10c      	bne.n	80016dc <HAL_RCC_OscConfig+0x98>
 80016c2:	4b70      	ldr	r3, [pc, #448]	@ (8001884 <HAL_RCC_OscConfig+0x240>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a6f      	ldr	r2, [pc, #444]	@ (8001884 <HAL_RCC_OscConfig+0x240>)
 80016c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	4b6d      	ldr	r3, [pc, #436]	@ (8001884 <HAL_RCC_OscConfig+0x240>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a6c      	ldr	r2, [pc, #432]	@ (8001884 <HAL_RCC_OscConfig+0x240>)
 80016d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	e00b      	b.n	80016f4 <HAL_RCC_OscConfig+0xb0>
 80016dc:	4b69      	ldr	r3, [pc, #420]	@ (8001884 <HAL_RCC_OscConfig+0x240>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a68      	ldr	r2, [pc, #416]	@ (8001884 <HAL_RCC_OscConfig+0x240>)
 80016e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	4b66      	ldr	r3, [pc, #408]	@ (8001884 <HAL_RCC_OscConfig+0x240>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a65      	ldr	r2, [pc, #404]	@ (8001884 <HAL_RCC_OscConfig+0x240>)
 80016ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d013      	beq.n	8001724 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fc:	f7ff fcfe 	bl	80010fc <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001704:	f7ff fcfa 	bl	80010fc <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b64      	cmp	r3, #100	@ 0x64
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e207      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001716:	4b5b      	ldr	r3, [pc, #364]	@ (8001884 <HAL_RCC_OscConfig+0x240>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0f0      	beq.n	8001704 <HAL_RCC_OscConfig+0xc0>
 8001722:	e014      	b.n	800174e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001724:	f7ff fcea 	bl	80010fc <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800172c:	f7ff fce6 	bl	80010fc <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b64      	cmp	r3, #100	@ 0x64
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e1f3      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173e:	4b51      	ldr	r3, [pc, #324]	@ (8001884 <HAL_RCC_OscConfig+0x240>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f0      	bne.n	800172c <HAL_RCC_OscConfig+0xe8>
 800174a:	e000      	b.n	800174e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d063      	beq.n	8001822 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800175a:	4b4a      	ldr	r3, [pc, #296]	@ (8001884 <HAL_RCC_OscConfig+0x240>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 030c 	and.w	r3, r3, #12
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00b      	beq.n	800177e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001766:	4b47      	ldr	r3, [pc, #284]	@ (8001884 <HAL_RCC_OscConfig+0x240>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800176e:	2b08      	cmp	r3, #8
 8001770:	d11c      	bne.n	80017ac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001772:	4b44      	ldr	r3, [pc, #272]	@ (8001884 <HAL_RCC_OscConfig+0x240>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d116      	bne.n	80017ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177e:	4b41      	ldr	r3, [pc, #260]	@ (8001884 <HAL_RCC_OscConfig+0x240>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d005      	beq.n	8001796 <HAL_RCC_OscConfig+0x152>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d001      	beq.n	8001796 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e1c7      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001796:	4b3b      	ldr	r3, [pc, #236]	@ (8001884 <HAL_RCC_OscConfig+0x240>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	4937      	ldr	r1, [pc, #220]	@ (8001884 <HAL_RCC_OscConfig+0x240>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017aa:	e03a      	b.n	8001822 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d020      	beq.n	80017f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017b4:	4b34      	ldr	r3, [pc, #208]	@ (8001888 <HAL_RCC_OscConfig+0x244>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ba:	f7ff fc9f 	bl	80010fc <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c2:	f7ff fc9b 	bl	80010fc <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e1a8      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001884 <HAL_RCC_OscConfig+0x240>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0f0      	beq.n	80017c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e0:	4b28      	ldr	r3, [pc, #160]	@ (8001884 <HAL_RCC_OscConfig+0x240>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	4925      	ldr	r1, [pc, #148]	@ (8001884 <HAL_RCC_OscConfig+0x240>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	600b      	str	r3, [r1, #0]
 80017f4:	e015      	b.n	8001822 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017f6:	4b24      	ldr	r3, [pc, #144]	@ (8001888 <HAL_RCC_OscConfig+0x244>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fc:	f7ff fc7e 	bl	80010fc <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001804:	f7ff fc7a 	bl	80010fc <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e187      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001816:	4b1b      	ldr	r3, [pc, #108]	@ (8001884 <HAL_RCC_OscConfig+0x240>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	2b00      	cmp	r3, #0
 800182c:	d036      	beq.n	800189c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d016      	beq.n	8001864 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001836:	4b15      	ldr	r3, [pc, #84]	@ (800188c <HAL_RCC_OscConfig+0x248>)
 8001838:	2201      	movs	r2, #1
 800183a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183c:	f7ff fc5e 	bl	80010fc <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001844:	f7ff fc5a 	bl	80010fc <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e167      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001856:	4b0b      	ldr	r3, [pc, #44]	@ (8001884 <HAL_RCC_OscConfig+0x240>)
 8001858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f0      	beq.n	8001844 <HAL_RCC_OscConfig+0x200>
 8001862:	e01b      	b.n	800189c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001864:	4b09      	ldr	r3, [pc, #36]	@ (800188c <HAL_RCC_OscConfig+0x248>)
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800186a:	f7ff fc47 	bl	80010fc <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001870:	e00e      	b.n	8001890 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001872:	f7ff fc43 	bl	80010fc <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d907      	bls.n	8001890 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e150      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
 8001884:	40023800 	.word	0x40023800
 8001888:	42470000 	.word	0x42470000
 800188c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001890:	4b88      	ldr	r3, [pc, #544]	@ (8001ab4 <HAL_RCC_OscConfig+0x470>)
 8001892:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1ea      	bne.n	8001872 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 8097 	beq.w	80019d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018aa:	2300      	movs	r3, #0
 80018ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ae:	4b81      	ldr	r3, [pc, #516]	@ (8001ab4 <HAL_RCC_OscConfig+0x470>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d10f      	bne.n	80018da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	4b7d      	ldr	r3, [pc, #500]	@ (8001ab4 <HAL_RCC_OscConfig+0x470>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c2:	4a7c      	ldr	r2, [pc, #496]	@ (8001ab4 <HAL_RCC_OscConfig+0x470>)
 80018c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ca:	4b7a      	ldr	r3, [pc, #488]	@ (8001ab4 <HAL_RCC_OscConfig+0x470>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018d6:	2301      	movs	r3, #1
 80018d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018da:	4b77      	ldr	r3, [pc, #476]	@ (8001ab8 <HAL_RCC_OscConfig+0x474>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d118      	bne.n	8001918 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018e6:	4b74      	ldr	r3, [pc, #464]	@ (8001ab8 <HAL_RCC_OscConfig+0x474>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a73      	ldr	r2, [pc, #460]	@ (8001ab8 <HAL_RCC_OscConfig+0x474>)
 80018ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018f2:	f7ff fc03 	bl	80010fc <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018fa:	f7ff fbff 	bl	80010fc <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e10c      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190c:	4b6a      	ldr	r3, [pc, #424]	@ (8001ab8 <HAL_RCC_OscConfig+0x474>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0f0      	beq.n	80018fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d106      	bne.n	800192e <HAL_RCC_OscConfig+0x2ea>
 8001920:	4b64      	ldr	r3, [pc, #400]	@ (8001ab4 <HAL_RCC_OscConfig+0x470>)
 8001922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001924:	4a63      	ldr	r2, [pc, #396]	@ (8001ab4 <HAL_RCC_OscConfig+0x470>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6713      	str	r3, [r2, #112]	@ 0x70
 800192c:	e01c      	b.n	8001968 <HAL_RCC_OscConfig+0x324>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2b05      	cmp	r3, #5
 8001934:	d10c      	bne.n	8001950 <HAL_RCC_OscConfig+0x30c>
 8001936:	4b5f      	ldr	r3, [pc, #380]	@ (8001ab4 <HAL_RCC_OscConfig+0x470>)
 8001938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800193a:	4a5e      	ldr	r2, [pc, #376]	@ (8001ab4 <HAL_RCC_OscConfig+0x470>)
 800193c:	f043 0304 	orr.w	r3, r3, #4
 8001940:	6713      	str	r3, [r2, #112]	@ 0x70
 8001942:	4b5c      	ldr	r3, [pc, #368]	@ (8001ab4 <HAL_RCC_OscConfig+0x470>)
 8001944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001946:	4a5b      	ldr	r2, [pc, #364]	@ (8001ab4 <HAL_RCC_OscConfig+0x470>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6713      	str	r3, [r2, #112]	@ 0x70
 800194e:	e00b      	b.n	8001968 <HAL_RCC_OscConfig+0x324>
 8001950:	4b58      	ldr	r3, [pc, #352]	@ (8001ab4 <HAL_RCC_OscConfig+0x470>)
 8001952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001954:	4a57      	ldr	r2, [pc, #348]	@ (8001ab4 <HAL_RCC_OscConfig+0x470>)
 8001956:	f023 0301 	bic.w	r3, r3, #1
 800195a:	6713      	str	r3, [r2, #112]	@ 0x70
 800195c:	4b55      	ldr	r3, [pc, #340]	@ (8001ab4 <HAL_RCC_OscConfig+0x470>)
 800195e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001960:	4a54      	ldr	r2, [pc, #336]	@ (8001ab4 <HAL_RCC_OscConfig+0x470>)
 8001962:	f023 0304 	bic.w	r3, r3, #4
 8001966:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d015      	beq.n	800199c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001970:	f7ff fbc4 	bl	80010fc <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001976:	e00a      	b.n	800198e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001978:	f7ff fbc0 	bl	80010fc <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001986:	4293      	cmp	r3, r2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e0cb      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800198e:	4b49      	ldr	r3, [pc, #292]	@ (8001ab4 <HAL_RCC_OscConfig+0x470>)
 8001990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0ee      	beq.n	8001978 <HAL_RCC_OscConfig+0x334>
 800199a:	e014      	b.n	80019c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199c:	f7ff fbae 	bl	80010fc <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a2:	e00a      	b.n	80019ba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a4:	f7ff fbaa 	bl	80010fc <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e0b5      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ba:	4b3e      	ldr	r3, [pc, #248]	@ (8001ab4 <HAL_RCC_OscConfig+0x470>)
 80019bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1ee      	bne.n	80019a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019c6:	7dfb      	ldrb	r3, [r7, #23]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d105      	bne.n	80019d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019cc:	4b39      	ldr	r3, [pc, #228]	@ (8001ab4 <HAL_RCC_OscConfig+0x470>)
 80019ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d0:	4a38      	ldr	r2, [pc, #224]	@ (8001ab4 <HAL_RCC_OscConfig+0x470>)
 80019d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 80a1 	beq.w	8001b24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019e2:	4b34      	ldr	r3, [pc, #208]	@ (8001ab4 <HAL_RCC_OscConfig+0x470>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	2b08      	cmp	r3, #8
 80019ec:	d05c      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d141      	bne.n	8001a7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f6:	4b31      	ldr	r3, [pc, #196]	@ (8001abc <HAL_RCC_OscConfig+0x478>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fc:	f7ff fb7e 	bl	80010fc <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a04:	f7ff fb7a 	bl	80010fc <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e087      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a16:	4b27      	ldr	r3, [pc, #156]	@ (8001ab4 <HAL_RCC_OscConfig+0x470>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69da      	ldr	r2, [r3, #28]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a30:	019b      	lsls	r3, r3, #6
 8001a32:	431a      	orrs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a38:	085b      	lsrs	r3, r3, #1
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	041b      	lsls	r3, r3, #16
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a44:	061b      	lsls	r3, r3, #24
 8001a46:	491b      	ldr	r1, [pc, #108]	@ (8001ab4 <HAL_RCC_OscConfig+0x470>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001abc <HAL_RCC_OscConfig+0x478>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a52:	f7ff fb53 	bl	80010fc <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a5a:	f7ff fb4f 	bl	80010fc <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e05c      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6c:	4b11      	ldr	r3, [pc, #68]	@ (8001ab4 <HAL_RCC_OscConfig+0x470>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0f0      	beq.n	8001a5a <HAL_RCC_OscConfig+0x416>
 8001a78:	e054      	b.n	8001b24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7a:	4b10      	ldr	r3, [pc, #64]	@ (8001abc <HAL_RCC_OscConfig+0x478>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a80:	f7ff fb3c 	bl	80010fc <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a88:	f7ff fb38 	bl	80010fc <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e045      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a9a:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <HAL_RCC_OscConfig+0x470>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f0      	bne.n	8001a88 <HAL_RCC_OscConfig+0x444>
 8001aa6:	e03d      	b.n	8001b24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d107      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e038      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40007000 	.word	0x40007000
 8001abc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b30 <HAL_RCC_OscConfig+0x4ec>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d028      	beq.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d121      	bne.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d11a      	bne.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001af0:	4013      	ands	r3, r2
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001af6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d111      	bne.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b06:	085b      	lsrs	r3, r3, #1
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d107      	bne.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800

08001b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0cc      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b48:	4b68      	ldr	r3, [pc, #416]	@ (8001cec <HAL_RCC_ClockConfig+0x1b8>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d90c      	bls.n	8001b70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b56:	4b65      	ldr	r3, [pc, #404]	@ (8001cec <HAL_RCC_ClockConfig+0x1b8>)
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5e:	4b63      	ldr	r3, [pc, #396]	@ (8001cec <HAL_RCC_ClockConfig+0x1b8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d001      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0b8      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d020      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d005      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b88:	4b59      	ldr	r3, [pc, #356]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	4a58      	ldr	r2, [pc, #352]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ba0:	4b53      	ldr	r3, [pc, #332]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	4a52      	ldr	r2, [pc, #328]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001baa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bac:	4b50      	ldr	r3, [pc, #320]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	494d      	ldr	r1, [pc, #308]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d044      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d107      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd2:	4b47      	ldr	r3, [pc, #284]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d119      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e07f      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d003      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d107      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf2:	4b3f      	ldr	r3, [pc, #252]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d109      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e06f      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c02:	4b3b      	ldr	r3, [pc, #236]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e067      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c12:	4b37      	ldr	r3, [pc, #220]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f023 0203 	bic.w	r2, r3, #3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	4934      	ldr	r1, [pc, #208]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c24:	f7ff fa6a 	bl	80010fc <HAL_GetTick>
 8001c28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2a:	e00a      	b.n	8001c42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c2c:	f7ff fa66 	bl	80010fc <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e04f      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c42:	4b2b      	ldr	r3, [pc, #172]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 020c 	and.w	r2, r3, #12
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d1eb      	bne.n	8001c2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c54:	4b25      	ldr	r3, [pc, #148]	@ (8001cec <HAL_RCC_ClockConfig+0x1b8>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d20c      	bcs.n	8001c7c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c62:	4b22      	ldr	r3, [pc, #136]	@ (8001cec <HAL_RCC_ClockConfig+0x1b8>)
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6a:	4b20      	ldr	r3, [pc, #128]	@ (8001cec <HAL_RCC_ClockConfig+0x1b8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d001      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e032      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d008      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c88:	4b19      	ldr	r3, [pc, #100]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	4916      	ldr	r1, [pc, #88]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d009      	beq.n	8001cba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ca6:	4b12      	ldr	r3, [pc, #72]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	490e      	ldr	r1, [pc, #56]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cba:	f000 f821 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	490a      	ldr	r1, [pc, #40]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8001ccc:	5ccb      	ldrb	r3, [r1, r3]
 8001cce:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd2:	4a09      	ldr	r2, [pc, #36]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001cd6:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <HAL_RCC_ClockConfig+0x1c8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff f8e2 	bl	8000ea4 <HAL_InitTick>

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40023c00 	.word	0x40023c00
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	08004c40 	.word	0x08004c40
 8001cf8:	20000008 	.word	0x20000008
 8001cfc:	2000000c 	.word	0x2000000c

08001d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d04:	b094      	sub	sp, #80	@ 0x50
 8001d06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d18:	4b79      	ldr	r3, [pc, #484]	@ (8001f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 030c 	and.w	r3, r3, #12
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d00d      	beq.n	8001d40 <HAL_RCC_GetSysClockFreq+0x40>
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	f200 80e1 	bhi.w	8001eec <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d002      	beq.n	8001d34 <HAL_RCC_GetSysClockFreq+0x34>
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d003      	beq.n	8001d3a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d32:	e0db      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d34:	4b73      	ldr	r3, [pc, #460]	@ (8001f04 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d38:	e0db      	b.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d3a:	4b73      	ldr	r3, [pc, #460]	@ (8001f08 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d3e:	e0d8      	b.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d40:	4b6f      	ldr	r3, [pc, #444]	@ (8001f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d48:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d4a:	4b6d      	ldr	r3, [pc, #436]	@ (8001f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d063      	beq.n	8001e1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d56:	4b6a      	ldr	r3, [pc, #424]	@ (8001f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	099b      	lsrs	r3, r3, #6
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d60:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d68:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d72:	4622      	mov	r2, r4
 8001d74:	462b      	mov	r3, r5
 8001d76:	f04f 0000 	mov.w	r0, #0
 8001d7a:	f04f 0100 	mov.w	r1, #0
 8001d7e:	0159      	lsls	r1, r3, #5
 8001d80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d84:	0150      	lsls	r0, r2, #5
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	4621      	mov	r1, r4
 8001d8c:	1a51      	subs	r1, r2, r1
 8001d8e:	6139      	str	r1, [r7, #16]
 8001d90:	4629      	mov	r1, r5
 8001d92:	eb63 0301 	sbc.w	r3, r3, r1
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	f04f 0300 	mov.w	r3, #0
 8001da0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001da4:	4659      	mov	r1, fp
 8001da6:	018b      	lsls	r3, r1, #6
 8001da8:	4651      	mov	r1, sl
 8001daa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dae:	4651      	mov	r1, sl
 8001db0:	018a      	lsls	r2, r1, #6
 8001db2:	4651      	mov	r1, sl
 8001db4:	ebb2 0801 	subs.w	r8, r2, r1
 8001db8:	4659      	mov	r1, fp
 8001dba:	eb63 0901 	sbc.w	r9, r3, r1
 8001dbe:	f04f 0200 	mov.w	r2, #0
 8001dc2:	f04f 0300 	mov.w	r3, #0
 8001dc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001dca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001dce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dd2:	4690      	mov	r8, r2
 8001dd4:	4699      	mov	r9, r3
 8001dd6:	4623      	mov	r3, r4
 8001dd8:	eb18 0303 	adds.w	r3, r8, r3
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	462b      	mov	r3, r5
 8001de0:	eb49 0303 	adc.w	r3, r9, r3
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001df2:	4629      	mov	r1, r5
 8001df4:	024b      	lsls	r3, r1, #9
 8001df6:	4621      	mov	r1, r4
 8001df8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	024a      	lsls	r2, r1, #9
 8001e00:	4610      	mov	r0, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e06:	2200      	movs	r2, #0
 8001e08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e10:	f7fe f9e6 	bl	80001e0 <__aeabi_uldivmod>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4613      	mov	r3, r2
 8001e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e1c:	e058      	b.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e1e:	4b38      	ldr	r3, [pc, #224]	@ (8001f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	099b      	lsrs	r3, r3, #6
 8001e24:	2200      	movs	r2, #0
 8001e26:	4618      	mov	r0, r3
 8001e28:	4611      	mov	r1, r2
 8001e2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e2e:	623b      	str	r3, [r7, #32]
 8001e30:	2300      	movs	r3, #0
 8001e32:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e38:	4642      	mov	r2, r8
 8001e3a:	464b      	mov	r3, r9
 8001e3c:	f04f 0000 	mov.w	r0, #0
 8001e40:	f04f 0100 	mov.w	r1, #0
 8001e44:	0159      	lsls	r1, r3, #5
 8001e46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e4a:	0150      	lsls	r0, r2, #5
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4641      	mov	r1, r8
 8001e52:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e56:	4649      	mov	r1, r9
 8001e58:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	f04f 0300 	mov.w	r3, #0
 8001e64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e70:	ebb2 040a 	subs.w	r4, r2, sl
 8001e74:	eb63 050b 	sbc.w	r5, r3, fp
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	f04f 0300 	mov.w	r3, #0
 8001e80:	00eb      	lsls	r3, r5, #3
 8001e82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e86:	00e2      	lsls	r2, r4, #3
 8001e88:	4614      	mov	r4, r2
 8001e8a:	461d      	mov	r5, r3
 8001e8c:	4643      	mov	r3, r8
 8001e8e:	18e3      	adds	r3, r4, r3
 8001e90:	603b      	str	r3, [r7, #0]
 8001e92:	464b      	mov	r3, r9
 8001e94:	eb45 0303 	adc.w	r3, r5, r3
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	f04f 0300 	mov.w	r3, #0
 8001ea2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ea6:	4629      	mov	r1, r5
 8001ea8:	028b      	lsls	r3, r1, #10
 8001eaa:	4621      	mov	r1, r4
 8001eac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001eb0:	4621      	mov	r1, r4
 8001eb2:	028a      	lsls	r2, r1, #10
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001eba:	2200      	movs	r2, #0
 8001ebc:	61bb      	str	r3, [r7, #24]
 8001ebe:	61fa      	str	r2, [r7, #28]
 8001ec0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ec4:	f7fe f98c 	bl	80001e0 <__aeabi_uldivmod>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4613      	mov	r3, r2
 8001ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	0c1b      	lsrs	r3, r3, #16
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	3301      	adds	r3, #1
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001ee0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ee2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001eea:	e002      	b.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001eec:	4b05      	ldr	r3, [pc, #20]	@ (8001f04 <HAL_RCC_GetSysClockFreq+0x204>)
 8001eee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ef0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ef2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3750      	adds	r7, #80	@ 0x50
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001efe:	bf00      	nop
 8001f00:	40023800 	.word	0x40023800
 8001f04:	00f42400 	.word	0x00f42400
 8001f08:	007a1200 	.word	0x007a1200

08001f0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f10:	4b03      	ldr	r3, [pc, #12]	@ (8001f20 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f12:	681b      	ldr	r3, [r3, #0]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	20000008 	.word	0x20000008

08001f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f28:	f7ff fff0 	bl	8001f0c <HAL_RCC_GetHCLKFreq>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	4b05      	ldr	r3, [pc, #20]	@ (8001f44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	0a9b      	lsrs	r3, r3, #10
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	4903      	ldr	r1, [pc, #12]	@ (8001f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f3a:	5ccb      	ldrb	r3, [r1, r3]
 8001f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40023800 	.word	0x40023800
 8001f48:	08004c50 	.word	0x08004c50

08001f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f50:	f7ff ffdc 	bl	8001f0c <HAL_RCC_GetHCLKFreq>
 8001f54:	4602      	mov	r2, r0
 8001f56:	4b05      	ldr	r3, [pc, #20]	@ (8001f6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	0b5b      	lsrs	r3, r3, #13
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	4903      	ldr	r1, [pc, #12]	@ (8001f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f62:	5ccb      	ldrb	r3, [r1, r3]
 8001f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	08004c50 	.word	0x08004c50

08001f74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	220f      	movs	r2, #15
 8001f82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f84:	4b12      	ldr	r3, [pc, #72]	@ (8001fd0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 0203 	and.w	r2, r3, #3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f90:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001fa8:	4b09      	ldr	r3, [pc, #36]	@ (8001fd0 <HAL_RCC_GetClockConfig+0x5c>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	08db      	lsrs	r3, r3, #3
 8001fae:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001fb6:	4b07      	ldr	r3, [pc, #28]	@ (8001fd4 <HAL_RCC_GetClockConfig+0x60>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0207 	and.w	r2, r3, #7
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	601a      	str	r2, [r3, #0]
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40023c00 	.word	0x40023c00

08001fd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e041      	b.n	800206e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d106      	bne.n	8002004 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7fe fea6 	bl	8000d50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3304      	adds	r3, #4
 8002014:	4619      	mov	r1, r3
 8002016:	4610      	mov	r0, r2
 8002018:	f000 fc3c 	bl	8002894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b01      	cmp	r3, #1
 800208a:	d001      	beq.n	8002090 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e044      	b.n	800211a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2202      	movs	r2, #2
 8002094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0201 	orr.w	r2, r2, #1
 80020a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a1e      	ldr	r2, [pc, #120]	@ (8002128 <HAL_TIM_Base_Start_IT+0xb0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d018      	beq.n	80020e4 <HAL_TIM_Base_Start_IT+0x6c>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020ba:	d013      	beq.n	80020e4 <HAL_TIM_Base_Start_IT+0x6c>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a1a      	ldr	r2, [pc, #104]	@ (800212c <HAL_TIM_Base_Start_IT+0xb4>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d00e      	beq.n	80020e4 <HAL_TIM_Base_Start_IT+0x6c>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a19      	ldr	r2, [pc, #100]	@ (8002130 <HAL_TIM_Base_Start_IT+0xb8>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d009      	beq.n	80020e4 <HAL_TIM_Base_Start_IT+0x6c>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a17      	ldr	r2, [pc, #92]	@ (8002134 <HAL_TIM_Base_Start_IT+0xbc>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d004      	beq.n	80020e4 <HAL_TIM_Base_Start_IT+0x6c>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a16      	ldr	r2, [pc, #88]	@ (8002138 <HAL_TIM_Base_Start_IT+0xc0>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d111      	bne.n	8002108 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2b06      	cmp	r3, #6
 80020f4:	d010      	beq.n	8002118 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f042 0201 	orr.w	r2, r2, #1
 8002104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002106:	e007      	b.n	8002118 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0201 	orr.w	r2, r2, #1
 8002116:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40010000 	.word	0x40010000
 800212c:	40000400 	.word	0x40000400
 8002130:	40000800 	.word	0x40000800
 8002134:	40000c00 	.word	0x40000c00
 8002138:	40014000 	.word	0x40014000

0800213c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e041      	b.n	80021d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d106      	bne.n	8002168 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f839 	bl	80021da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2202      	movs	r2, #2
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3304      	adds	r3, #4
 8002178:	4619      	mov	r1, r3
 800217a:	4610      	mov	r0, r2
 800217c:	f000 fb8a 	bl	8002894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d109      	bne.n	8002214 <HAL_TIM_PWM_Start+0x24>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b01      	cmp	r3, #1
 800220a:	bf14      	ite	ne
 800220c:	2301      	movne	r3, #1
 800220e:	2300      	moveq	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	e022      	b.n	800225a <HAL_TIM_PWM_Start+0x6a>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	2b04      	cmp	r3, #4
 8002218:	d109      	bne.n	800222e <HAL_TIM_PWM_Start+0x3e>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b01      	cmp	r3, #1
 8002224:	bf14      	ite	ne
 8002226:	2301      	movne	r3, #1
 8002228:	2300      	moveq	r3, #0
 800222a:	b2db      	uxtb	r3, r3
 800222c:	e015      	b.n	800225a <HAL_TIM_PWM_Start+0x6a>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	2b08      	cmp	r3, #8
 8002232:	d109      	bne.n	8002248 <HAL_TIM_PWM_Start+0x58>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b01      	cmp	r3, #1
 800223e:	bf14      	ite	ne
 8002240:	2301      	movne	r3, #1
 8002242:	2300      	moveq	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	e008      	b.n	800225a <HAL_TIM_PWM_Start+0x6a>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b01      	cmp	r3, #1
 8002252:	bf14      	ite	ne
 8002254:	2301      	movne	r3, #1
 8002256:	2300      	moveq	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e068      	b.n	8002334 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d104      	bne.n	8002272 <HAL_TIM_PWM_Start+0x82>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2202      	movs	r2, #2
 800226c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002270:	e013      	b.n	800229a <HAL_TIM_PWM_Start+0xaa>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	2b04      	cmp	r3, #4
 8002276:	d104      	bne.n	8002282 <HAL_TIM_PWM_Start+0x92>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2202      	movs	r2, #2
 800227c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002280:	e00b      	b.n	800229a <HAL_TIM_PWM_Start+0xaa>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	2b08      	cmp	r3, #8
 8002286:	d104      	bne.n	8002292 <HAL_TIM_PWM_Start+0xa2>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2202      	movs	r2, #2
 800228c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002290:	e003      	b.n	800229a <HAL_TIM_PWM_Start+0xaa>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2202      	movs	r2, #2
 8002296:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2201      	movs	r2, #1
 80022a0:	6839      	ldr	r1, [r7, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 fda2 	bl	8002dec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a23      	ldr	r2, [pc, #140]	@ (800233c <HAL_TIM_PWM_Start+0x14c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d107      	bne.n	80022c2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a1d      	ldr	r2, [pc, #116]	@ (800233c <HAL_TIM_PWM_Start+0x14c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d018      	beq.n	80022fe <HAL_TIM_PWM_Start+0x10e>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022d4:	d013      	beq.n	80022fe <HAL_TIM_PWM_Start+0x10e>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a19      	ldr	r2, [pc, #100]	@ (8002340 <HAL_TIM_PWM_Start+0x150>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d00e      	beq.n	80022fe <HAL_TIM_PWM_Start+0x10e>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a17      	ldr	r2, [pc, #92]	@ (8002344 <HAL_TIM_PWM_Start+0x154>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d009      	beq.n	80022fe <HAL_TIM_PWM_Start+0x10e>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a16      	ldr	r2, [pc, #88]	@ (8002348 <HAL_TIM_PWM_Start+0x158>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d004      	beq.n	80022fe <HAL_TIM_PWM_Start+0x10e>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a14      	ldr	r2, [pc, #80]	@ (800234c <HAL_TIM_PWM_Start+0x15c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d111      	bne.n	8002322 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2b06      	cmp	r3, #6
 800230e:	d010      	beq.n	8002332 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002320:	e007      	b.n	8002332 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f042 0201 	orr.w	r2, r2, #1
 8002330:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40010000 	.word	0x40010000
 8002340:	40000400 	.word	0x40000400
 8002344:	40000800 	.word	0x40000800
 8002348:	40000c00 	.word	0x40000c00
 800234c:	40014000 	.word	0x40014000

08002350 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d020      	beq.n	80023b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d01b      	beq.n	80023b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f06f 0202 	mvn.w	r2, #2
 8002384:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 fa5b 	bl	8002856 <HAL_TIM_IC_CaptureCallback>
 80023a0:	e005      	b.n	80023ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 fa4d 	bl	8002842 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 fa5e 	bl	800286a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d020      	beq.n	8002400 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d01b      	beq.n	8002400 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f06f 0204 	mvn.w	r2, #4
 80023d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2202      	movs	r2, #2
 80023d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 fa35 	bl	8002856 <HAL_TIM_IC_CaptureCallback>
 80023ec:	e005      	b.n	80023fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 fa27 	bl	8002842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 fa38 	bl	800286a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d020      	beq.n	800244c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b00      	cmp	r3, #0
 8002412:	d01b      	beq.n	800244c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f06f 0208 	mvn.w	r2, #8
 800241c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2204      	movs	r2, #4
 8002422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 fa0f 	bl	8002856 <HAL_TIM_IC_CaptureCallback>
 8002438:	e005      	b.n	8002446 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 fa01 	bl	8002842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 fa12 	bl	800286a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	f003 0310 	and.w	r3, r3, #16
 8002452:	2b00      	cmp	r3, #0
 8002454:	d020      	beq.n	8002498 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f003 0310 	and.w	r3, r3, #16
 800245c:	2b00      	cmp	r3, #0
 800245e:	d01b      	beq.n	8002498 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f06f 0210 	mvn.w	r2, #16
 8002468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2208      	movs	r2, #8
 800246e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f9e9 	bl	8002856 <HAL_TIM_IC_CaptureCallback>
 8002484:	e005      	b.n	8002492 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f9db 	bl	8002842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f9ec 	bl	800286a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00c      	beq.n	80024bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d007      	beq.n	80024bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f06f 0201 	mvn.w	r2, #1
 80024b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7fe fbfe 	bl	8000cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00c      	beq.n	80024e0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d007      	beq.n	80024e0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80024d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 fd24 	bl	8002f28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00c      	beq.n	8002504 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d007      	beq.n	8002504 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80024fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f9bd 	bl	800287e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	f003 0320 	and.w	r3, r3, #32
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00c      	beq.n	8002528 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f003 0320 	and.w	r3, r3, #32
 8002514:	2b00      	cmp	r3, #0
 8002516:	d007      	beq.n	8002528 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f06f 0220 	mvn.w	r2, #32
 8002520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 fcf6 	bl	8002f14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002528:	bf00      	nop
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002546:	2b01      	cmp	r3, #1
 8002548:	d101      	bne.n	800254e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800254a:	2302      	movs	r3, #2
 800254c:	e0ae      	b.n	80026ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b0c      	cmp	r3, #12
 800255a:	f200 809f 	bhi.w	800269c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800255e:	a201      	add	r2, pc, #4	@ (adr r2, 8002564 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002564:	08002599 	.word	0x08002599
 8002568:	0800269d 	.word	0x0800269d
 800256c:	0800269d 	.word	0x0800269d
 8002570:	0800269d 	.word	0x0800269d
 8002574:	080025d9 	.word	0x080025d9
 8002578:	0800269d 	.word	0x0800269d
 800257c:	0800269d 	.word	0x0800269d
 8002580:	0800269d 	.word	0x0800269d
 8002584:	0800261b 	.word	0x0800261b
 8002588:	0800269d 	.word	0x0800269d
 800258c:	0800269d 	.word	0x0800269d
 8002590:	0800269d 	.word	0x0800269d
 8002594:	0800265b 	.word	0x0800265b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68b9      	ldr	r1, [r7, #8]
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 f9fe 	bl	80029a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	699a      	ldr	r2, [r3, #24]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0208 	orr.w	r2, r2, #8
 80025b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	699a      	ldr	r2, [r3, #24]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0204 	bic.w	r2, r2, #4
 80025c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6999      	ldr	r1, [r3, #24]
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	691a      	ldr	r2, [r3, #16]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	619a      	str	r2, [r3, #24]
      break;
 80025d6:	e064      	b.n	80026a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68b9      	ldr	r1, [r7, #8]
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 fa44 	bl	8002a6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	699a      	ldr	r2, [r3, #24]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	699a      	ldr	r2, [r3, #24]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002602:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6999      	ldr	r1, [r3, #24]
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	021a      	lsls	r2, r3, #8
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	619a      	str	r2, [r3, #24]
      break;
 8002618:	e043      	b.n	80026a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68b9      	ldr	r1, [r7, #8]
 8002620:	4618      	mov	r0, r3
 8002622:	f000 fa8f 	bl	8002b44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	69da      	ldr	r2, [r3, #28]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f042 0208 	orr.w	r2, r2, #8
 8002634:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	69da      	ldr	r2, [r3, #28]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0204 	bic.w	r2, r2, #4
 8002644:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	69d9      	ldr	r1, [r3, #28]
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	691a      	ldr	r2, [r3, #16]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	61da      	str	r2, [r3, #28]
      break;
 8002658:	e023      	b.n	80026a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68b9      	ldr	r1, [r7, #8]
 8002660:	4618      	mov	r0, r3
 8002662:	f000 fad9 	bl	8002c18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	69da      	ldr	r2, [r3, #28]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002674:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	69da      	ldr	r2, [r3, #28]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002684:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	69d9      	ldr	r1, [r3, #28]
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	021a      	lsls	r2, r3, #8
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	61da      	str	r2, [r3, #28]
      break;
 800269a:	e002      	b.n	80026a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	75fb      	strb	r3, [r7, #23]
      break;
 80026a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80026aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d101      	bne.n	80026d0 <HAL_TIM_ConfigClockSource+0x1c>
 80026cc:	2302      	movs	r3, #2
 80026ce:	e0b4      	b.n	800283a <HAL_TIM_ConfigClockSource+0x186>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2202      	movs	r2, #2
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80026ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80026f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002708:	d03e      	beq.n	8002788 <HAL_TIM_ConfigClockSource+0xd4>
 800270a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800270e:	f200 8087 	bhi.w	8002820 <HAL_TIM_ConfigClockSource+0x16c>
 8002712:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002716:	f000 8086 	beq.w	8002826 <HAL_TIM_ConfigClockSource+0x172>
 800271a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800271e:	d87f      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x16c>
 8002720:	2b70      	cmp	r3, #112	@ 0x70
 8002722:	d01a      	beq.n	800275a <HAL_TIM_ConfigClockSource+0xa6>
 8002724:	2b70      	cmp	r3, #112	@ 0x70
 8002726:	d87b      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x16c>
 8002728:	2b60      	cmp	r3, #96	@ 0x60
 800272a:	d050      	beq.n	80027ce <HAL_TIM_ConfigClockSource+0x11a>
 800272c:	2b60      	cmp	r3, #96	@ 0x60
 800272e:	d877      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x16c>
 8002730:	2b50      	cmp	r3, #80	@ 0x50
 8002732:	d03c      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0xfa>
 8002734:	2b50      	cmp	r3, #80	@ 0x50
 8002736:	d873      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x16c>
 8002738:	2b40      	cmp	r3, #64	@ 0x40
 800273a:	d058      	beq.n	80027ee <HAL_TIM_ConfigClockSource+0x13a>
 800273c:	2b40      	cmp	r3, #64	@ 0x40
 800273e:	d86f      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x16c>
 8002740:	2b30      	cmp	r3, #48	@ 0x30
 8002742:	d064      	beq.n	800280e <HAL_TIM_ConfigClockSource+0x15a>
 8002744:	2b30      	cmp	r3, #48	@ 0x30
 8002746:	d86b      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x16c>
 8002748:	2b20      	cmp	r3, #32
 800274a:	d060      	beq.n	800280e <HAL_TIM_ConfigClockSource+0x15a>
 800274c:	2b20      	cmp	r3, #32
 800274e:	d867      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x16c>
 8002750:	2b00      	cmp	r3, #0
 8002752:	d05c      	beq.n	800280e <HAL_TIM_ConfigClockSource+0x15a>
 8002754:	2b10      	cmp	r3, #16
 8002756:	d05a      	beq.n	800280e <HAL_TIM_ConfigClockSource+0x15a>
 8002758:	e062      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800276a:	f000 fb1f 	bl	8002dac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800277c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	609a      	str	r2, [r3, #8]
      break;
 8002786:	e04f      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002798:	f000 fb08 	bl	8002dac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027aa:	609a      	str	r2, [r3, #8]
      break;
 80027ac:	e03c      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ba:	461a      	mov	r2, r3
 80027bc:	f000 fa7c 	bl	8002cb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2150      	movs	r1, #80	@ 0x50
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 fad5 	bl	8002d76 <TIM_ITRx_SetConfig>
      break;
 80027cc:	e02c      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027da:	461a      	mov	r2, r3
 80027dc:	f000 fa9b 	bl	8002d16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2160      	movs	r1, #96	@ 0x60
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 fac5 	bl	8002d76 <TIM_ITRx_SetConfig>
      break;
 80027ec:	e01c      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027fa:	461a      	mov	r2, r3
 80027fc:	f000 fa5c 	bl	8002cb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2140      	movs	r1, #64	@ 0x40
 8002806:	4618      	mov	r0, r3
 8002808:	f000 fab5 	bl	8002d76 <TIM_ITRx_SetConfig>
      break;
 800280c:	e00c      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4619      	mov	r1, r3
 8002818:	4610      	mov	r0, r2
 800281a:	f000 faac 	bl	8002d76 <TIM_ITRx_SetConfig>
      break;
 800281e:	e003      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	73fb      	strb	r3, [r7, #15]
      break;
 8002824:	e000      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002826:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002838:	7bfb      	ldrb	r3, [r7, #15]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a37      	ldr	r2, [pc, #220]	@ (8002984 <TIM_Base_SetConfig+0xf0>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d00f      	beq.n	80028cc <TIM_Base_SetConfig+0x38>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028b2:	d00b      	beq.n	80028cc <TIM_Base_SetConfig+0x38>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a34      	ldr	r2, [pc, #208]	@ (8002988 <TIM_Base_SetConfig+0xf4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d007      	beq.n	80028cc <TIM_Base_SetConfig+0x38>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a33      	ldr	r2, [pc, #204]	@ (800298c <TIM_Base_SetConfig+0xf8>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d003      	beq.n	80028cc <TIM_Base_SetConfig+0x38>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a32      	ldr	r2, [pc, #200]	@ (8002990 <TIM_Base_SetConfig+0xfc>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d108      	bne.n	80028de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a28      	ldr	r2, [pc, #160]	@ (8002984 <TIM_Base_SetConfig+0xf0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d01b      	beq.n	800291e <TIM_Base_SetConfig+0x8a>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028ec:	d017      	beq.n	800291e <TIM_Base_SetConfig+0x8a>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a25      	ldr	r2, [pc, #148]	@ (8002988 <TIM_Base_SetConfig+0xf4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d013      	beq.n	800291e <TIM_Base_SetConfig+0x8a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a24      	ldr	r2, [pc, #144]	@ (800298c <TIM_Base_SetConfig+0xf8>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00f      	beq.n	800291e <TIM_Base_SetConfig+0x8a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a23      	ldr	r2, [pc, #140]	@ (8002990 <TIM_Base_SetConfig+0xfc>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d00b      	beq.n	800291e <TIM_Base_SetConfig+0x8a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a22      	ldr	r2, [pc, #136]	@ (8002994 <TIM_Base_SetConfig+0x100>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d007      	beq.n	800291e <TIM_Base_SetConfig+0x8a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a21      	ldr	r2, [pc, #132]	@ (8002998 <TIM_Base_SetConfig+0x104>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d003      	beq.n	800291e <TIM_Base_SetConfig+0x8a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a20      	ldr	r2, [pc, #128]	@ (800299c <TIM_Base_SetConfig+0x108>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d108      	bne.n	8002930 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	4313      	orrs	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	4313      	orrs	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a0c      	ldr	r2, [pc, #48]	@ (8002984 <TIM_Base_SetConfig+0xf0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d103      	bne.n	800295e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	691a      	ldr	r2, [r3, #16]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f043 0204 	orr.w	r2, r3, #4
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	601a      	str	r2, [r3, #0]
}
 8002976:	bf00      	nop
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40010000 	.word	0x40010000
 8002988:	40000400 	.word	0x40000400
 800298c:	40000800 	.word	0x40000800
 8002990:	40000c00 	.word	0x40000c00
 8002994:	40014000 	.word	0x40014000
 8002998:	40014400 	.word	0x40014400
 800299c:	40014800 	.word	0x40014800

080029a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	f023 0201 	bic.w	r2, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f023 0303 	bic.w	r3, r3, #3
 80029d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	4313      	orrs	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f023 0302 	bic.w	r3, r3, #2
 80029e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002a68 <TIM_OC1_SetConfig+0xc8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d10c      	bne.n	8002a16 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f023 0308 	bic.w	r3, r3, #8
 8002a02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f023 0304 	bic.w	r3, r3, #4
 8002a14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a13      	ldr	r2, [pc, #76]	@ (8002a68 <TIM_OC1_SetConfig+0xc8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d111      	bne.n	8002a42 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	621a      	str	r2, [r3, #32]
}
 8002a5c:	bf00      	nop
 8002a5e:	371c      	adds	r7, #28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	40010000 	.word	0x40010000

08002a6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b087      	sub	sp, #28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	f023 0210 	bic.w	r2, r3, #16
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	021b      	lsls	r3, r3, #8
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f023 0320 	bic.w	r3, r3, #32
 8002ab6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a1e      	ldr	r2, [pc, #120]	@ (8002b40 <TIM_OC2_SetConfig+0xd4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d10d      	bne.n	8002ae8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ae6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a15      	ldr	r2, [pc, #84]	@ (8002b40 <TIM_OC2_SetConfig+0xd4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d113      	bne.n	8002b18 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002af6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002afe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	621a      	str	r2, [r3, #32]
}
 8002b32:	bf00      	nop
 8002b34:	371c      	adds	r7, #28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40010000 	.word	0x40010000

08002b44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b087      	sub	sp, #28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f023 0303 	bic.w	r3, r3, #3
 8002b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	021b      	lsls	r3, r3, #8
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8002c14 <TIM_OC3_SetConfig+0xd0>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d10d      	bne.n	8002bbe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002ba8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	021b      	lsls	r3, r3, #8
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002bbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a14      	ldr	r2, [pc, #80]	@ (8002c14 <TIM_OC3_SetConfig+0xd0>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d113      	bne.n	8002bee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002bcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	621a      	str	r2, [r3, #32]
}
 8002c08:	bf00      	nop
 8002c0a:	371c      	adds	r7, #28
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	40010000 	.word	0x40010000

08002c18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	021b      	lsls	r3, r3, #8
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	031b      	lsls	r3, r3, #12
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a10      	ldr	r2, [pc, #64]	@ (8002cb4 <TIM_OC4_SetConfig+0x9c>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d109      	bne.n	8002c8c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	019b      	lsls	r3, r3, #6
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	621a      	str	r2, [r3, #32]
}
 8002ca6:	bf00      	nop
 8002ca8:	371c      	adds	r7, #28
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40010000 	.word	0x40010000

08002cb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b087      	sub	sp, #28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	f023 0201 	bic.w	r2, r3, #1
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ce2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	011b      	lsls	r3, r3, #4
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f023 030a 	bic.w	r3, r3, #10
 8002cf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	621a      	str	r2, [r3, #32]
}
 8002d0a:	bf00      	nop
 8002d0c:	371c      	adds	r7, #28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b087      	sub	sp, #28
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	60f8      	str	r0, [r7, #12]
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	f023 0210 	bic.w	r2, r3, #16
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	031b      	lsls	r3, r3, #12
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002d52:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	621a      	str	r2, [r3, #32]
}
 8002d6a:	bf00      	nop
 8002d6c:	371c      	adds	r7, #28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b085      	sub	sp, #20
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f043 0307 	orr.w	r3, r3, #7
 8002d98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	609a      	str	r2, [r3, #8]
}
 8002da0:	bf00      	nop
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b087      	sub	sp, #28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
 8002db8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002dc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	021a      	lsls	r2, r3, #8
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	609a      	str	r2, [r3, #8]
}
 8002de0:	bf00      	nop
 8002de2:	371c      	adds	r7, #28
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f003 031f 	and.w	r3, r3, #31
 8002dfe:	2201      	movs	r2, #1
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a1a      	ldr	r2, [r3, #32]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	401a      	ands	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a1a      	ldr	r2, [r3, #32]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	f003 031f 	and.w	r3, r3, #31
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	fa01 f303 	lsl.w	r3, r1, r3
 8002e24:	431a      	orrs	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	621a      	str	r2, [r3, #32]
}
 8002e2a:	bf00      	nop
 8002e2c:	371c      	adds	r7, #28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
	...

08002e38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e050      	b.n	8002ef2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a1c      	ldr	r2, [pc, #112]	@ (8002f00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d018      	beq.n	8002ec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e9c:	d013      	beq.n	8002ec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a18      	ldr	r2, [pc, #96]	@ (8002f04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d00e      	beq.n	8002ec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a16      	ldr	r2, [pc, #88]	@ (8002f08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d009      	beq.n	8002ec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a15      	ldr	r2, [pc, #84]	@ (8002f0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d004      	beq.n	8002ec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a13      	ldr	r2, [pc, #76]	@ (8002f10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ecc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40010000 	.word	0x40010000
 8002f04:	40000400 	.word	0x40000400
 8002f08:	40000800 	.word	0x40000800
 8002f0c:	40000c00 	.word	0x40000c00
 8002f10:	40014000 	.word	0x40014000

08002f14 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e042      	b.n	8002fd4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7fd ff56 	bl	8000e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2224      	movs	r2, #36	@ 0x24
 8002f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f82b 	bl	8002fdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	695a      	ldr	r2, [r3, #20]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002fa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fe0:	b0c0      	sub	sp, #256	@ 0x100
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ff8:	68d9      	ldr	r1, [r3, #12]
 8002ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	ea40 0301 	orr.w	r3, r0, r1
 8003004:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	431a      	orrs	r2, r3
 8003014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	431a      	orrs	r2, r3
 800301c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003034:	f021 010c 	bic.w	r1, r1, #12
 8003038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003042:	430b      	orrs	r3, r1
 8003044:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003056:	6999      	ldr	r1, [r3, #24]
 8003058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	ea40 0301 	orr.w	r3, r0, r1
 8003062:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	4b8f      	ldr	r3, [pc, #572]	@ (80032a8 <UART_SetConfig+0x2cc>)
 800306c:	429a      	cmp	r2, r3
 800306e:	d005      	beq.n	800307c <UART_SetConfig+0xa0>
 8003070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	4b8d      	ldr	r3, [pc, #564]	@ (80032ac <UART_SetConfig+0x2d0>)
 8003078:	429a      	cmp	r2, r3
 800307a:	d104      	bne.n	8003086 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800307c:	f7fe ff66 	bl	8001f4c <HAL_RCC_GetPCLK2Freq>
 8003080:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003084:	e003      	b.n	800308e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003086:	f7fe ff4d 	bl	8001f24 <HAL_RCC_GetPCLK1Freq>
 800308a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800308e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003098:	f040 810c 	bne.w	80032b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800309c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030a0:	2200      	movs	r2, #0
 80030a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80030a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80030aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80030ae:	4622      	mov	r2, r4
 80030b0:	462b      	mov	r3, r5
 80030b2:	1891      	adds	r1, r2, r2
 80030b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80030b6:	415b      	adcs	r3, r3
 80030b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80030be:	4621      	mov	r1, r4
 80030c0:	eb12 0801 	adds.w	r8, r2, r1
 80030c4:	4629      	mov	r1, r5
 80030c6:	eb43 0901 	adc.w	r9, r3, r1
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030de:	4690      	mov	r8, r2
 80030e0:	4699      	mov	r9, r3
 80030e2:	4623      	mov	r3, r4
 80030e4:	eb18 0303 	adds.w	r3, r8, r3
 80030e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80030ec:	462b      	mov	r3, r5
 80030ee:	eb49 0303 	adc.w	r3, r9, r3
 80030f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80030f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003102:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003106:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800310a:	460b      	mov	r3, r1
 800310c:	18db      	adds	r3, r3, r3
 800310e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003110:	4613      	mov	r3, r2
 8003112:	eb42 0303 	adc.w	r3, r2, r3
 8003116:	657b      	str	r3, [r7, #84]	@ 0x54
 8003118:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800311c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003120:	f7fd f85e 	bl	80001e0 <__aeabi_uldivmod>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4b61      	ldr	r3, [pc, #388]	@ (80032b0 <UART_SetConfig+0x2d4>)
 800312a:	fba3 2302 	umull	r2, r3, r3, r2
 800312e:	095b      	lsrs	r3, r3, #5
 8003130:	011c      	lsls	r4, r3, #4
 8003132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003136:	2200      	movs	r2, #0
 8003138:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800313c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003140:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003144:	4642      	mov	r2, r8
 8003146:	464b      	mov	r3, r9
 8003148:	1891      	adds	r1, r2, r2
 800314a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800314c:	415b      	adcs	r3, r3
 800314e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003150:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003154:	4641      	mov	r1, r8
 8003156:	eb12 0a01 	adds.w	sl, r2, r1
 800315a:	4649      	mov	r1, r9
 800315c:	eb43 0b01 	adc.w	fp, r3, r1
 8003160:	f04f 0200 	mov.w	r2, #0
 8003164:	f04f 0300 	mov.w	r3, #0
 8003168:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800316c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003170:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003174:	4692      	mov	sl, r2
 8003176:	469b      	mov	fp, r3
 8003178:	4643      	mov	r3, r8
 800317a:	eb1a 0303 	adds.w	r3, sl, r3
 800317e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003182:	464b      	mov	r3, r9
 8003184:	eb4b 0303 	adc.w	r3, fp, r3
 8003188:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800318c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003198:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800319c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80031a0:	460b      	mov	r3, r1
 80031a2:	18db      	adds	r3, r3, r3
 80031a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80031a6:	4613      	mov	r3, r2
 80031a8:	eb42 0303 	adc.w	r3, r2, r3
 80031ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80031ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80031b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80031b6:	f7fd f813 	bl	80001e0 <__aeabi_uldivmod>
 80031ba:	4602      	mov	r2, r0
 80031bc:	460b      	mov	r3, r1
 80031be:	4611      	mov	r1, r2
 80031c0:	4b3b      	ldr	r3, [pc, #236]	@ (80032b0 <UART_SetConfig+0x2d4>)
 80031c2:	fba3 2301 	umull	r2, r3, r3, r1
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	2264      	movs	r2, #100	@ 0x64
 80031ca:	fb02 f303 	mul.w	r3, r2, r3
 80031ce:	1acb      	subs	r3, r1, r3
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80031d6:	4b36      	ldr	r3, [pc, #216]	@ (80032b0 <UART_SetConfig+0x2d4>)
 80031d8:	fba3 2302 	umull	r2, r3, r3, r2
 80031dc:	095b      	lsrs	r3, r3, #5
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80031e4:	441c      	add	r4, r3
 80031e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031ea:	2200      	movs	r2, #0
 80031ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80031f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80031f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80031f8:	4642      	mov	r2, r8
 80031fa:	464b      	mov	r3, r9
 80031fc:	1891      	adds	r1, r2, r2
 80031fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003200:	415b      	adcs	r3, r3
 8003202:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003204:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003208:	4641      	mov	r1, r8
 800320a:	1851      	adds	r1, r2, r1
 800320c:	6339      	str	r1, [r7, #48]	@ 0x30
 800320e:	4649      	mov	r1, r9
 8003210:	414b      	adcs	r3, r1
 8003212:	637b      	str	r3, [r7, #52]	@ 0x34
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003220:	4659      	mov	r1, fp
 8003222:	00cb      	lsls	r3, r1, #3
 8003224:	4651      	mov	r1, sl
 8003226:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800322a:	4651      	mov	r1, sl
 800322c:	00ca      	lsls	r2, r1, #3
 800322e:	4610      	mov	r0, r2
 8003230:	4619      	mov	r1, r3
 8003232:	4603      	mov	r3, r0
 8003234:	4642      	mov	r2, r8
 8003236:	189b      	adds	r3, r3, r2
 8003238:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800323c:	464b      	mov	r3, r9
 800323e:	460a      	mov	r2, r1
 8003240:	eb42 0303 	adc.w	r3, r2, r3
 8003244:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003254:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003258:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800325c:	460b      	mov	r3, r1
 800325e:	18db      	adds	r3, r3, r3
 8003260:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003262:	4613      	mov	r3, r2
 8003264:	eb42 0303 	adc.w	r3, r2, r3
 8003268:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800326a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800326e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003272:	f7fc ffb5 	bl	80001e0 <__aeabi_uldivmod>
 8003276:	4602      	mov	r2, r0
 8003278:	460b      	mov	r3, r1
 800327a:	4b0d      	ldr	r3, [pc, #52]	@ (80032b0 <UART_SetConfig+0x2d4>)
 800327c:	fba3 1302 	umull	r1, r3, r3, r2
 8003280:	095b      	lsrs	r3, r3, #5
 8003282:	2164      	movs	r1, #100	@ 0x64
 8003284:	fb01 f303 	mul.w	r3, r1, r3
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	3332      	adds	r3, #50	@ 0x32
 800328e:	4a08      	ldr	r2, [pc, #32]	@ (80032b0 <UART_SetConfig+0x2d4>)
 8003290:	fba2 2303 	umull	r2, r3, r2, r3
 8003294:	095b      	lsrs	r3, r3, #5
 8003296:	f003 0207 	and.w	r2, r3, #7
 800329a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4422      	add	r2, r4
 80032a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032a4:	e106      	b.n	80034b4 <UART_SetConfig+0x4d8>
 80032a6:	bf00      	nop
 80032a8:	40011000 	.word	0x40011000
 80032ac:	40011400 	.word	0x40011400
 80032b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032b8:	2200      	movs	r2, #0
 80032ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80032be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80032c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80032c6:	4642      	mov	r2, r8
 80032c8:	464b      	mov	r3, r9
 80032ca:	1891      	adds	r1, r2, r2
 80032cc:	6239      	str	r1, [r7, #32]
 80032ce:	415b      	adcs	r3, r3
 80032d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80032d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032d6:	4641      	mov	r1, r8
 80032d8:	1854      	adds	r4, r2, r1
 80032da:	4649      	mov	r1, r9
 80032dc:	eb43 0501 	adc.w	r5, r3, r1
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	00eb      	lsls	r3, r5, #3
 80032ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032ee:	00e2      	lsls	r2, r4, #3
 80032f0:	4614      	mov	r4, r2
 80032f2:	461d      	mov	r5, r3
 80032f4:	4643      	mov	r3, r8
 80032f6:	18e3      	adds	r3, r4, r3
 80032f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80032fc:	464b      	mov	r3, r9
 80032fe:	eb45 0303 	adc.w	r3, r5, r3
 8003302:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003312:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003322:	4629      	mov	r1, r5
 8003324:	008b      	lsls	r3, r1, #2
 8003326:	4621      	mov	r1, r4
 8003328:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800332c:	4621      	mov	r1, r4
 800332e:	008a      	lsls	r2, r1, #2
 8003330:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003334:	f7fc ff54 	bl	80001e0 <__aeabi_uldivmod>
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	4b60      	ldr	r3, [pc, #384]	@ (80034c0 <UART_SetConfig+0x4e4>)
 800333e:	fba3 2302 	umull	r2, r3, r3, r2
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	011c      	lsls	r4, r3, #4
 8003346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800334a:	2200      	movs	r2, #0
 800334c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003350:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003354:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003358:	4642      	mov	r2, r8
 800335a:	464b      	mov	r3, r9
 800335c:	1891      	adds	r1, r2, r2
 800335e:	61b9      	str	r1, [r7, #24]
 8003360:	415b      	adcs	r3, r3
 8003362:	61fb      	str	r3, [r7, #28]
 8003364:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003368:	4641      	mov	r1, r8
 800336a:	1851      	adds	r1, r2, r1
 800336c:	6139      	str	r1, [r7, #16]
 800336e:	4649      	mov	r1, r9
 8003370:	414b      	adcs	r3, r1
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	f04f 0200 	mov.w	r2, #0
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003380:	4659      	mov	r1, fp
 8003382:	00cb      	lsls	r3, r1, #3
 8003384:	4651      	mov	r1, sl
 8003386:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800338a:	4651      	mov	r1, sl
 800338c:	00ca      	lsls	r2, r1, #3
 800338e:	4610      	mov	r0, r2
 8003390:	4619      	mov	r1, r3
 8003392:	4603      	mov	r3, r0
 8003394:	4642      	mov	r2, r8
 8003396:	189b      	adds	r3, r3, r2
 8003398:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800339c:	464b      	mov	r3, r9
 800339e:	460a      	mov	r2, r1
 80033a0:	eb42 0303 	adc.w	r3, r2, r3
 80033a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80033a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80033c0:	4649      	mov	r1, r9
 80033c2:	008b      	lsls	r3, r1, #2
 80033c4:	4641      	mov	r1, r8
 80033c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033ca:	4641      	mov	r1, r8
 80033cc:	008a      	lsls	r2, r1, #2
 80033ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80033d2:	f7fc ff05 	bl	80001e0 <__aeabi_uldivmod>
 80033d6:	4602      	mov	r2, r0
 80033d8:	460b      	mov	r3, r1
 80033da:	4611      	mov	r1, r2
 80033dc:	4b38      	ldr	r3, [pc, #224]	@ (80034c0 <UART_SetConfig+0x4e4>)
 80033de:	fba3 2301 	umull	r2, r3, r3, r1
 80033e2:	095b      	lsrs	r3, r3, #5
 80033e4:	2264      	movs	r2, #100	@ 0x64
 80033e6:	fb02 f303 	mul.w	r3, r2, r3
 80033ea:	1acb      	subs	r3, r1, r3
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	3332      	adds	r3, #50	@ 0x32
 80033f0:	4a33      	ldr	r2, [pc, #204]	@ (80034c0 <UART_SetConfig+0x4e4>)
 80033f2:	fba2 2303 	umull	r2, r3, r2, r3
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033fc:	441c      	add	r4, r3
 80033fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003402:	2200      	movs	r2, #0
 8003404:	673b      	str	r3, [r7, #112]	@ 0x70
 8003406:	677a      	str	r2, [r7, #116]	@ 0x74
 8003408:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800340c:	4642      	mov	r2, r8
 800340e:	464b      	mov	r3, r9
 8003410:	1891      	adds	r1, r2, r2
 8003412:	60b9      	str	r1, [r7, #8]
 8003414:	415b      	adcs	r3, r3
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800341c:	4641      	mov	r1, r8
 800341e:	1851      	adds	r1, r2, r1
 8003420:	6039      	str	r1, [r7, #0]
 8003422:	4649      	mov	r1, r9
 8003424:	414b      	adcs	r3, r1
 8003426:	607b      	str	r3, [r7, #4]
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	f04f 0300 	mov.w	r3, #0
 8003430:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003434:	4659      	mov	r1, fp
 8003436:	00cb      	lsls	r3, r1, #3
 8003438:	4651      	mov	r1, sl
 800343a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800343e:	4651      	mov	r1, sl
 8003440:	00ca      	lsls	r2, r1, #3
 8003442:	4610      	mov	r0, r2
 8003444:	4619      	mov	r1, r3
 8003446:	4603      	mov	r3, r0
 8003448:	4642      	mov	r2, r8
 800344a:	189b      	adds	r3, r3, r2
 800344c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800344e:	464b      	mov	r3, r9
 8003450:	460a      	mov	r2, r1
 8003452:	eb42 0303 	adc.w	r3, r2, r3
 8003456:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	663b      	str	r3, [r7, #96]	@ 0x60
 8003462:	667a      	str	r2, [r7, #100]	@ 0x64
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003470:	4649      	mov	r1, r9
 8003472:	008b      	lsls	r3, r1, #2
 8003474:	4641      	mov	r1, r8
 8003476:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800347a:	4641      	mov	r1, r8
 800347c:	008a      	lsls	r2, r1, #2
 800347e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003482:	f7fc fead 	bl	80001e0 <__aeabi_uldivmod>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	4b0d      	ldr	r3, [pc, #52]	@ (80034c0 <UART_SetConfig+0x4e4>)
 800348c:	fba3 1302 	umull	r1, r3, r3, r2
 8003490:	095b      	lsrs	r3, r3, #5
 8003492:	2164      	movs	r1, #100	@ 0x64
 8003494:	fb01 f303 	mul.w	r3, r1, r3
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	3332      	adds	r3, #50	@ 0x32
 800349e:	4a08      	ldr	r2, [pc, #32]	@ (80034c0 <UART_SetConfig+0x4e4>)
 80034a0:	fba2 2303 	umull	r2, r3, r2, r3
 80034a4:	095b      	lsrs	r3, r3, #5
 80034a6:	f003 020f 	and.w	r2, r3, #15
 80034aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4422      	add	r2, r4
 80034b2:	609a      	str	r2, [r3, #8]
}
 80034b4:	bf00      	nop
 80034b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80034ba:	46bd      	mov	sp, r7
 80034bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034c0:	51eb851f 	.word	0x51eb851f

080034c4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80034ce:	2300      	movs	r3, #0
 80034d0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80034d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034d6:	2b84      	cmp	r3, #132	@ 0x84
 80034d8:	d005      	beq.n	80034e6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80034da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4413      	add	r3, r2
 80034e2:	3303      	adds	r3, #3
 80034e4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80034e6:	68fb      	ldr	r3, [r7, #12]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80034f8:	f000 fafc 	bl	8003af4 <vTaskStartScheduler>
  
  return osOK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	bd80      	pop	{r7, pc}

08003502 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003502:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003504:	b089      	sub	sp, #36	@ 0x24
 8003506:	af04      	add	r7, sp, #16
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d020      	beq.n	8003556 <osThreadCreate+0x54>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d01c      	beq.n	8003556 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685c      	ldr	r4, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691e      	ldr	r6, [r3, #16]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff ffc8 	bl	80034c4 <makeFreeRtosPriority>
 8003534:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800353e:	9202      	str	r2, [sp, #8]
 8003540:	9301      	str	r3, [sp, #4]
 8003542:	9100      	str	r1, [sp, #0]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	4632      	mov	r2, r6
 8003548:	4629      	mov	r1, r5
 800354a:	4620      	mov	r0, r4
 800354c:	f000 f8ed 	bl	800372a <xTaskCreateStatic>
 8003550:	4603      	mov	r3, r0
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	e01c      	b.n	8003590 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685c      	ldr	r4, [r3, #4]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003562:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff ffaa 	bl	80034c4 <makeFreeRtosPriority>
 8003570:	4602      	mov	r2, r0
 8003572:	f107 030c 	add.w	r3, r7, #12
 8003576:	9301      	str	r3, [sp, #4]
 8003578:	9200      	str	r2, [sp, #0]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	4632      	mov	r2, r6
 800357e:	4629      	mov	r1, r5
 8003580:	4620      	mov	r0, r4
 8003582:	f000 f932 	bl	80037ea <xTaskCreate>
 8003586:	4603      	mov	r3, r0
 8003588:	2b01      	cmp	r3, #1
 800358a:	d001      	beq.n	8003590 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800358c:	2300      	movs	r3, #0
 800358e:	e000      	b.n	8003592 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003590:	68fb      	ldr	r3, [r7, #12]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800359a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b084      	sub	sp, #16
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <osDelay+0x16>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	e000      	b.n	80035b2 <osDelay+0x18>
 80035b0:	2301      	movs	r3, #1
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fa68 	bl	8003a88 <vTaskDelay>
  
  return osOK;
 80035b8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f103 0208 	add.w	r2, r3, #8
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f04f 32ff 	mov.w	r2, #4294967295
 80035da:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f103 0208 	add.w	r2, r3, #8
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f103 0208 	add.w	r2, r3, #8
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	601a      	str	r2, [r3, #0]
}
 8003658:	bf00      	nop
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367a:	d103      	bne.n	8003684 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	e00c      	b.n	800369e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3308      	adds	r3, #8
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	e002      	b.n	8003692 <vListInsert+0x2e>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	429a      	cmp	r2, r3
 800369c:	d2f6      	bcs.n	800368c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	601a      	str	r2, [r3, #0]
}
 80036ca:	bf00      	nop
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80036d6:	b480      	push	{r7}
 80036d8:	b085      	sub	sp, #20
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6892      	ldr	r2, [r2, #8]
 80036ec:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6852      	ldr	r2, [r2, #4]
 80036f6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d103      	bne.n	800370a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689a      	ldr	r2, [r3, #8]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	1e5a      	subs	r2, r3, #1
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800372a:	b580      	push	{r7, lr}
 800372c:	b08e      	sub	sp, #56	@ 0x38
 800372e:	af04      	add	r7, sp, #16
 8003730:	60f8      	str	r0, [r7, #12]
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	607a      	str	r2, [r7, #4]
 8003736:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10b      	bne.n	8003756 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800373e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003742:	f383 8811 	msr	BASEPRI, r3
 8003746:	f3bf 8f6f 	isb	sy
 800374a:	f3bf 8f4f 	dsb	sy
 800374e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003750:	bf00      	nop
 8003752:	bf00      	nop
 8003754:	e7fd      	b.n	8003752 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10b      	bne.n	8003774 <xTaskCreateStatic+0x4a>
	__asm volatile
 800375c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003760:	f383 8811 	msr	BASEPRI, r3
 8003764:	f3bf 8f6f 	isb	sy
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	61fb      	str	r3, [r7, #28]
}
 800376e:	bf00      	nop
 8003770:	bf00      	nop
 8003772:	e7fd      	b.n	8003770 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003774:	23a0      	movs	r3, #160	@ 0xa0
 8003776:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	2ba0      	cmp	r3, #160	@ 0xa0
 800377c:	d00b      	beq.n	8003796 <xTaskCreateStatic+0x6c>
	__asm volatile
 800377e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003782:	f383 8811 	msr	BASEPRI, r3
 8003786:	f3bf 8f6f 	isb	sy
 800378a:	f3bf 8f4f 	dsb	sy
 800378e:	61bb      	str	r3, [r7, #24]
}
 8003790:	bf00      	nop
 8003792:	bf00      	nop
 8003794:	e7fd      	b.n	8003792 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003796:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800379a:	2b00      	cmp	r3, #0
 800379c:	d01e      	beq.n	80037dc <xTaskCreateStatic+0xb2>
 800379e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d01b      	beq.n	80037dc <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037a6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80037a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037ac:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80037ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b0:	2202      	movs	r2, #2
 80037b2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80037b6:	2300      	movs	r3, #0
 80037b8:	9303      	str	r3, [sp, #12]
 80037ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037bc:	9302      	str	r3, [sp, #8]
 80037be:	f107 0314 	add.w	r3, r7, #20
 80037c2:	9301      	str	r3, [sp, #4]
 80037c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	68b9      	ldr	r1, [r7, #8]
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 f850 	bl	8003874 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80037d6:	f000 f8ed 	bl	80039b4 <prvAddNewTaskToReadyList>
 80037da:	e001      	b.n	80037e0 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80037dc:	2300      	movs	r3, #0
 80037de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80037e0:	697b      	ldr	r3, [r7, #20]
	}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3728      	adds	r7, #40	@ 0x28
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b08c      	sub	sp, #48	@ 0x30
 80037ee:	af04      	add	r7, sp, #16
 80037f0:	60f8      	str	r0, [r7, #12]
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	603b      	str	r3, [r7, #0]
 80037f6:	4613      	mov	r3, r2
 80037f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80037fa:	88fb      	ldrh	r3, [r7, #6]
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 ff02 	bl	8004608 <pvPortMalloc>
 8003804:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00e      	beq.n	800382a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800380c:	20a0      	movs	r0, #160	@ 0xa0
 800380e:	f000 fefb 	bl	8004608 <pvPortMalloc>
 8003812:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003820:	e005      	b.n	800382e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003822:	6978      	ldr	r0, [r7, #20]
 8003824:	f000 ffbe 	bl	80047a4 <vPortFree>
 8003828:	e001      	b.n	800382e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800382a:	2300      	movs	r3, #0
 800382c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d017      	beq.n	8003864 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800383c:	88fa      	ldrh	r2, [r7, #6]
 800383e:	2300      	movs	r3, #0
 8003840:	9303      	str	r3, [sp, #12]
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	9302      	str	r3, [sp, #8]
 8003846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003848:	9301      	str	r3, [sp, #4]
 800384a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68b9      	ldr	r1, [r7, #8]
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f80e 	bl	8003874 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003858:	69f8      	ldr	r0, [r7, #28]
 800385a:	f000 f8ab 	bl	80039b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800385e:	2301      	movs	r3, #1
 8003860:	61bb      	str	r3, [r7, #24]
 8003862:	e002      	b.n	800386a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003864:	f04f 33ff 	mov.w	r3, #4294967295
 8003868:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800386a:	69bb      	ldr	r3, [r7, #24]
	}
 800386c:	4618      	mov	r0, r3
 800386e:	3720      	adds	r7, #32
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b088      	sub	sp, #32
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003884:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800388c:	3b01      	subs	r3, #1
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	f023 0307 	bic.w	r3, r3, #7
 800389a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00b      	beq.n	80038be <prvInitialiseNewTask+0x4a>
	__asm volatile
 80038a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038aa:	f383 8811 	msr	BASEPRI, r3
 80038ae:	f3bf 8f6f 	isb	sy
 80038b2:	f3bf 8f4f 	dsb	sy
 80038b6:	617b      	str	r3, [r7, #20]
}
 80038b8:	bf00      	nop
 80038ba:	bf00      	nop
 80038bc:	e7fd      	b.n	80038ba <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d01f      	beq.n	8003904 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038c4:	2300      	movs	r3, #0
 80038c6:	61fb      	str	r3, [r7, #28]
 80038c8:	e012      	b.n	80038f0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	4413      	add	r3, r2
 80038d0:	7819      	ldrb	r1, [r3, #0]
 80038d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	4413      	add	r3, r2
 80038d8:	3334      	adds	r3, #52	@ 0x34
 80038da:	460a      	mov	r2, r1
 80038dc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	4413      	add	r3, r2
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d006      	beq.n	80038f8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	3301      	adds	r3, #1
 80038ee:	61fb      	str	r3, [r7, #28]
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	2b0f      	cmp	r3, #15
 80038f4:	d9e9      	bls.n	80038ca <prvInitialiseNewTask+0x56>
 80038f6:	e000      	b.n	80038fa <prvInitialiseNewTask+0x86>
			{
				break;
 80038f8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80038fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003902:	e003      	b.n	800390c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800390c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800390e:	2b06      	cmp	r3, #6
 8003910:	d901      	bls.n	8003916 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003912:	2306      	movs	r3, #6
 8003914:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003918:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800391a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800391c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800391e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003920:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003924:	2200      	movs	r2, #0
 8003926:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392a:	3304      	adds	r3, #4
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff fe68 	bl	8003602 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003934:	3318      	adds	r3, #24
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff fe63 	bl	8003602 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800393c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800393e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003940:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003944:	f1c3 0207 	rsb	r2, r3, #7
 8003948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800394a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800394c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800394e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003950:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003954:	2200      	movs	r2, #0
 8003956:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800395a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800395c:	2200      	movs	r2, #0
 800395e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003964:	334c      	adds	r3, #76	@ 0x4c
 8003966:	224c      	movs	r2, #76	@ 0x4c
 8003968:	2100      	movs	r1, #0
 800396a:	4618      	mov	r0, r3
 800396c:	f001 f83a 	bl	80049e4 <memset>
 8003970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003972:	4a0d      	ldr	r2, [pc, #52]	@ (80039a8 <prvInitialiseNewTask+0x134>)
 8003974:	651a      	str	r2, [r3, #80]	@ 0x50
 8003976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003978:	4a0c      	ldr	r2, [pc, #48]	@ (80039ac <prvInitialiseNewTask+0x138>)
 800397a:	655a      	str	r2, [r3, #84]	@ 0x54
 800397c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397e:	4a0c      	ldr	r2, [pc, #48]	@ (80039b0 <prvInitialiseNewTask+0x13c>)
 8003980:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	68f9      	ldr	r1, [r7, #12]
 8003986:	69b8      	ldr	r0, [r7, #24]
 8003988:	f000 fc2a 	bl	80041e0 <pxPortInitialiseStack>
 800398c:	4602      	mov	r2, r0
 800398e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003990:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800399a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800399c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800399e:	bf00      	nop
 80039a0:	3720      	adds	r7, #32
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20004164 	.word	0x20004164
 80039ac:	200041cc 	.word	0x200041cc
 80039b0:	20004234 	.word	0x20004234

080039b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80039bc:	f000 fd44 	bl	8004448 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80039c0:	4b2a      	ldr	r3, [pc, #168]	@ (8003a6c <prvAddNewTaskToReadyList+0xb8>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3301      	adds	r3, #1
 80039c6:	4a29      	ldr	r2, [pc, #164]	@ (8003a6c <prvAddNewTaskToReadyList+0xb8>)
 80039c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80039ca:	4b29      	ldr	r3, [pc, #164]	@ (8003a70 <prvAddNewTaskToReadyList+0xbc>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d109      	bne.n	80039e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80039d2:	4a27      	ldr	r2, [pc, #156]	@ (8003a70 <prvAddNewTaskToReadyList+0xbc>)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80039d8:	4b24      	ldr	r3, [pc, #144]	@ (8003a6c <prvAddNewTaskToReadyList+0xb8>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d110      	bne.n	8003a02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80039e0:	f000 fad4 	bl	8003f8c <prvInitialiseTaskLists>
 80039e4:	e00d      	b.n	8003a02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80039e6:	4b23      	ldr	r3, [pc, #140]	@ (8003a74 <prvAddNewTaskToReadyList+0xc0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d109      	bne.n	8003a02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80039ee:	4b20      	ldr	r3, [pc, #128]	@ (8003a70 <prvAddNewTaskToReadyList+0xbc>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d802      	bhi.n	8003a02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80039fc:	4a1c      	ldr	r2, [pc, #112]	@ (8003a70 <prvAddNewTaskToReadyList+0xbc>)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a02:	4b1d      	ldr	r3, [pc, #116]	@ (8003a78 <prvAddNewTaskToReadyList+0xc4>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3301      	adds	r3, #1
 8003a08:	4a1b      	ldr	r2, [pc, #108]	@ (8003a78 <prvAddNewTaskToReadyList+0xc4>)
 8003a0a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a10:	2201      	movs	r2, #1
 8003a12:	409a      	lsls	r2, r3
 8003a14:	4b19      	ldr	r3, [pc, #100]	@ (8003a7c <prvAddNewTaskToReadyList+0xc8>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	4a18      	ldr	r2, [pc, #96]	@ (8003a7c <prvAddNewTaskToReadyList+0xc8>)
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a22:	4613      	mov	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4413      	add	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4a15      	ldr	r2, [pc, #84]	@ (8003a80 <prvAddNewTaskToReadyList+0xcc>)
 8003a2c:	441a      	add	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	3304      	adds	r3, #4
 8003a32:	4619      	mov	r1, r3
 8003a34:	4610      	mov	r0, r2
 8003a36:	f7ff fdf1 	bl	800361c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a3a:	f000 fd37 	bl	80044ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a74 <prvAddNewTaskToReadyList+0xc0>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00e      	beq.n	8003a64 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a46:	4b0a      	ldr	r3, [pc, #40]	@ (8003a70 <prvAddNewTaskToReadyList+0xbc>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d207      	bcs.n	8003a64 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a54:	4b0b      	ldr	r3, [pc, #44]	@ (8003a84 <prvAddNewTaskToReadyList+0xd0>)
 8003a56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	f3bf 8f4f 	dsb	sy
 8003a60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a64:	bf00      	nop
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	20000510 	.word	0x20000510
 8003a70:	20000410 	.word	0x20000410
 8003a74:	2000051c 	.word	0x2000051c
 8003a78:	2000052c 	.word	0x2000052c
 8003a7c:	20000518 	.word	0x20000518
 8003a80:	20000414 	.word	0x20000414
 8003a84:	e000ed04 	.word	0xe000ed04

08003a88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003a90:	2300      	movs	r3, #0
 8003a92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d018      	beq.n	8003acc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003a9a:	4b14      	ldr	r3, [pc, #80]	@ (8003aec <vTaskDelay+0x64>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00b      	beq.n	8003aba <vTaskDelay+0x32>
	__asm volatile
 8003aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aa6:	f383 8811 	msr	BASEPRI, r3
 8003aaa:	f3bf 8f6f 	isb	sy
 8003aae:	f3bf 8f4f 	dsb	sy
 8003ab2:	60bb      	str	r3, [r7, #8]
}
 8003ab4:	bf00      	nop
 8003ab6:	bf00      	nop
 8003ab8:	e7fd      	b.n	8003ab6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003aba:	f000 f885 	bl	8003bc8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003abe:	2100      	movs	r1, #0
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 fb27 	bl	8004114 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ac6:	f000 f88d 	bl	8003be4 <xTaskResumeAll>
 8003aca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d107      	bne.n	8003ae2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003ad2:	4b07      	ldr	r3, [pc, #28]	@ (8003af0 <vTaskDelay+0x68>)
 8003ad4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	f3bf 8f4f 	dsb	sy
 8003ade:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ae2:	bf00      	nop
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	20000538 	.word	0x20000538
 8003af0:	e000ed04 	.word	0xe000ed04

08003af4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b08a      	sub	sp, #40	@ 0x28
 8003af8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b02:	463a      	mov	r2, r7
 8003b04:	1d39      	adds	r1, r7, #4
 8003b06:	f107 0308 	add.w	r3, r7, #8
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fc fcfe 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b10:	6839      	ldr	r1, [r7, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	9202      	str	r2, [sp, #8]
 8003b18:	9301      	str	r3, [sp, #4]
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	2300      	movs	r3, #0
 8003b20:	460a      	mov	r2, r1
 8003b22:	4921      	ldr	r1, [pc, #132]	@ (8003ba8 <vTaskStartScheduler+0xb4>)
 8003b24:	4821      	ldr	r0, [pc, #132]	@ (8003bac <vTaskStartScheduler+0xb8>)
 8003b26:	f7ff fe00 	bl	800372a <xTaskCreateStatic>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	4a20      	ldr	r2, [pc, #128]	@ (8003bb0 <vTaskStartScheduler+0xbc>)
 8003b2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b30:	4b1f      	ldr	r3, [pc, #124]	@ (8003bb0 <vTaskStartScheduler+0xbc>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	e001      	b.n	8003b42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d11b      	bne.n	8003b80 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	613b      	str	r3, [r7, #16]
}
 8003b5a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b5c:	4b15      	ldr	r3, [pc, #84]	@ (8003bb4 <vTaskStartScheduler+0xc0>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	334c      	adds	r3, #76	@ 0x4c
 8003b62:	4a15      	ldr	r2, [pc, #84]	@ (8003bb8 <vTaskStartScheduler+0xc4>)
 8003b64:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b66:	4b15      	ldr	r3, [pc, #84]	@ (8003bbc <vTaskStartScheduler+0xc8>)
 8003b68:	f04f 32ff 	mov.w	r2, #4294967295
 8003b6c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b6e:	4b14      	ldr	r3, [pc, #80]	@ (8003bc0 <vTaskStartScheduler+0xcc>)
 8003b70:	2201      	movs	r2, #1
 8003b72:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b74:	4b13      	ldr	r3, [pc, #76]	@ (8003bc4 <vTaskStartScheduler+0xd0>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b7a:	f000 fbc1 	bl	8004300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b7e:	e00f      	b.n	8003ba0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b86:	d10b      	bne.n	8003ba0 <vTaskStartScheduler+0xac>
	__asm volatile
 8003b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b8c:	f383 8811 	msr	BASEPRI, r3
 8003b90:	f3bf 8f6f 	isb	sy
 8003b94:	f3bf 8f4f 	dsb	sy
 8003b98:	60fb      	str	r3, [r7, #12]
}
 8003b9a:	bf00      	nop
 8003b9c:	bf00      	nop
 8003b9e:	e7fd      	b.n	8003b9c <vTaskStartScheduler+0xa8>
}
 8003ba0:	bf00      	nop
 8003ba2:	3718      	adds	r7, #24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	08004c38 	.word	0x08004c38
 8003bac:	08003f5d 	.word	0x08003f5d
 8003bb0:	20000534 	.word	0x20000534
 8003bb4:	20000410 	.word	0x20000410
 8003bb8:	20000018 	.word	0x20000018
 8003bbc:	20000530 	.word	0x20000530
 8003bc0:	2000051c 	.word	0x2000051c
 8003bc4:	20000514 	.word	0x20000514

08003bc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003bcc:	4b04      	ldr	r3, [pc, #16]	@ (8003be0 <vTaskSuspendAll+0x18>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	4a03      	ldr	r2, [pc, #12]	@ (8003be0 <vTaskSuspendAll+0x18>)
 8003bd4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003bd6:	bf00      	nop
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	20000538 	.word	0x20000538

08003be4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003bf2:	4b42      	ldr	r3, [pc, #264]	@ (8003cfc <xTaskResumeAll+0x118>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10b      	bne.n	8003c12 <xTaskResumeAll+0x2e>
	__asm volatile
 8003bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bfe:	f383 8811 	msr	BASEPRI, r3
 8003c02:	f3bf 8f6f 	isb	sy
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	603b      	str	r3, [r7, #0]
}
 8003c0c:	bf00      	nop
 8003c0e:	bf00      	nop
 8003c10:	e7fd      	b.n	8003c0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c12:	f000 fc19 	bl	8004448 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c16:	4b39      	ldr	r3, [pc, #228]	@ (8003cfc <xTaskResumeAll+0x118>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	4a37      	ldr	r2, [pc, #220]	@ (8003cfc <xTaskResumeAll+0x118>)
 8003c1e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c20:	4b36      	ldr	r3, [pc, #216]	@ (8003cfc <xTaskResumeAll+0x118>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d161      	bne.n	8003cec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c28:	4b35      	ldr	r3, [pc, #212]	@ (8003d00 <xTaskResumeAll+0x11c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d05d      	beq.n	8003cec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c30:	e02e      	b.n	8003c90 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c32:	4b34      	ldr	r3, [pc, #208]	@ (8003d04 <xTaskResumeAll+0x120>)
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	3318      	adds	r3, #24
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff fd49 	bl	80036d6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	3304      	adds	r3, #4
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff fd44 	bl	80036d6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c52:	2201      	movs	r2, #1
 8003c54:	409a      	lsls	r2, r3
 8003c56:	4b2c      	ldr	r3, [pc, #176]	@ (8003d08 <xTaskResumeAll+0x124>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	4a2a      	ldr	r2, [pc, #168]	@ (8003d08 <xTaskResumeAll+0x124>)
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c64:	4613      	mov	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4a27      	ldr	r2, [pc, #156]	@ (8003d0c <xTaskResumeAll+0x128>)
 8003c6e:	441a      	add	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	3304      	adds	r3, #4
 8003c74:	4619      	mov	r1, r3
 8003c76:	4610      	mov	r0, r2
 8003c78:	f7ff fcd0 	bl	800361c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c80:	4b23      	ldr	r3, [pc, #140]	@ (8003d10 <xTaskResumeAll+0x12c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d302      	bcc.n	8003c90 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003c8a:	4b22      	ldr	r3, [pc, #136]	@ (8003d14 <xTaskResumeAll+0x130>)
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c90:	4b1c      	ldr	r3, [pc, #112]	@ (8003d04 <xTaskResumeAll+0x120>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1cc      	bne.n	8003c32 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c9e:	f000 fa19 	bl	80040d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8003d18 <xTaskResumeAll+0x134>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d010      	beq.n	8003cd0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003cae:	f000 f837 	bl	8003d20 <xTaskIncrementTick>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003cb8:	4b16      	ldr	r3, [pc, #88]	@ (8003d14 <xTaskResumeAll+0x130>)
 8003cba:	2201      	movs	r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f1      	bne.n	8003cae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003cca:	4b13      	ldr	r3, [pc, #76]	@ (8003d18 <xTaskResumeAll+0x134>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003cd0:	4b10      	ldr	r3, [pc, #64]	@ (8003d14 <xTaskResumeAll+0x130>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d009      	beq.n	8003cec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8003d1c <xTaskResumeAll+0x138>)
 8003cde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	f3bf 8f4f 	dsb	sy
 8003ce8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003cec:	f000 fbde 	bl	80044ac <vPortExitCritical>

	return xAlreadyYielded;
 8003cf0:	68bb      	ldr	r3, [r7, #8]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	20000538 	.word	0x20000538
 8003d00:	20000510 	.word	0x20000510
 8003d04:	200004d0 	.word	0x200004d0
 8003d08:	20000518 	.word	0x20000518
 8003d0c:	20000414 	.word	0x20000414
 8003d10:	20000410 	.word	0x20000410
 8003d14:	20000524 	.word	0x20000524
 8003d18:	20000520 	.word	0x20000520
 8003d1c:	e000ed04 	.word	0xe000ed04

08003d20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d2a:	4b4f      	ldr	r3, [pc, #316]	@ (8003e68 <xTaskIncrementTick+0x148>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f040 808f 	bne.w	8003e52 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d34:	4b4d      	ldr	r3, [pc, #308]	@ (8003e6c <xTaskIncrementTick+0x14c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d3c:	4a4b      	ldr	r2, [pc, #300]	@ (8003e6c <xTaskIncrementTick+0x14c>)
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d121      	bne.n	8003d8c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d48:	4b49      	ldr	r3, [pc, #292]	@ (8003e70 <xTaskIncrementTick+0x150>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00b      	beq.n	8003d6a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d56:	f383 8811 	msr	BASEPRI, r3
 8003d5a:	f3bf 8f6f 	isb	sy
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	603b      	str	r3, [r7, #0]
}
 8003d64:	bf00      	nop
 8003d66:	bf00      	nop
 8003d68:	e7fd      	b.n	8003d66 <xTaskIncrementTick+0x46>
 8003d6a:	4b41      	ldr	r3, [pc, #260]	@ (8003e70 <xTaskIncrementTick+0x150>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	4b40      	ldr	r3, [pc, #256]	@ (8003e74 <xTaskIncrementTick+0x154>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a3e      	ldr	r2, [pc, #248]	@ (8003e70 <xTaskIncrementTick+0x150>)
 8003d76:	6013      	str	r3, [r2, #0]
 8003d78:	4a3e      	ldr	r2, [pc, #248]	@ (8003e74 <xTaskIncrementTick+0x154>)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	4b3e      	ldr	r3, [pc, #248]	@ (8003e78 <xTaskIncrementTick+0x158>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	3301      	adds	r3, #1
 8003d84:	4a3c      	ldr	r2, [pc, #240]	@ (8003e78 <xTaskIncrementTick+0x158>)
 8003d86:	6013      	str	r3, [r2, #0]
 8003d88:	f000 f9a4 	bl	80040d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d8c:	4b3b      	ldr	r3, [pc, #236]	@ (8003e7c <xTaskIncrementTick+0x15c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d348      	bcc.n	8003e28 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d96:	4b36      	ldr	r3, [pc, #216]	@ (8003e70 <xTaskIncrementTick+0x150>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d104      	bne.n	8003daa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003da0:	4b36      	ldr	r3, [pc, #216]	@ (8003e7c <xTaskIncrementTick+0x15c>)
 8003da2:	f04f 32ff 	mov.w	r2, #4294967295
 8003da6:	601a      	str	r2, [r3, #0]
					break;
 8003da8:	e03e      	b.n	8003e28 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003daa:	4b31      	ldr	r3, [pc, #196]	@ (8003e70 <xTaskIncrementTick+0x150>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d203      	bcs.n	8003dca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003dc2:	4a2e      	ldr	r2, [pc, #184]	@ (8003e7c <xTaskIncrementTick+0x15c>)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003dc8:	e02e      	b.n	8003e28 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	3304      	adds	r3, #4
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff fc81 	bl	80036d6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d004      	beq.n	8003de6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	3318      	adds	r3, #24
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff fc78 	bl	80036d6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dea:	2201      	movs	r2, #1
 8003dec:	409a      	lsls	r2, r3
 8003dee:	4b24      	ldr	r3, [pc, #144]	@ (8003e80 <xTaskIncrementTick+0x160>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	4a22      	ldr	r2, [pc, #136]	@ (8003e80 <xTaskIncrementTick+0x160>)
 8003df6:	6013      	str	r3, [r2, #0]
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4a1f      	ldr	r2, [pc, #124]	@ (8003e84 <xTaskIncrementTick+0x164>)
 8003e06:	441a      	add	r2, r3
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4610      	mov	r0, r2
 8003e10:	f7ff fc04 	bl	800361c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e18:	4b1b      	ldr	r3, [pc, #108]	@ (8003e88 <xTaskIncrementTick+0x168>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d3b9      	bcc.n	8003d96 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003e22:	2301      	movs	r3, #1
 8003e24:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e26:	e7b6      	b.n	8003d96 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e28:	4b17      	ldr	r3, [pc, #92]	@ (8003e88 <xTaskIncrementTick+0x168>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e2e:	4915      	ldr	r1, [pc, #84]	@ (8003e84 <xTaskIncrementTick+0x164>)
 8003e30:	4613      	mov	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d901      	bls.n	8003e44 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003e40:	2301      	movs	r3, #1
 8003e42:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003e44:	4b11      	ldr	r3, [pc, #68]	@ (8003e8c <xTaskIncrementTick+0x16c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d007      	beq.n	8003e5c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	e004      	b.n	8003e5c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003e52:	4b0f      	ldr	r3, [pc, #60]	@ (8003e90 <xTaskIncrementTick+0x170>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3301      	adds	r3, #1
 8003e58:	4a0d      	ldr	r2, [pc, #52]	@ (8003e90 <xTaskIncrementTick+0x170>)
 8003e5a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003e5c:	697b      	ldr	r3, [r7, #20]
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3718      	adds	r7, #24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	20000538 	.word	0x20000538
 8003e6c:	20000514 	.word	0x20000514
 8003e70:	200004c8 	.word	0x200004c8
 8003e74:	200004cc 	.word	0x200004cc
 8003e78:	20000528 	.word	0x20000528
 8003e7c:	20000530 	.word	0x20000530
 8003e80:	20000518 	.word	0x20000518
 8003e84:	20000414 	.word	0x20000414
 8003e88:	20000410 	.word	0x20000410
 8003e8c:	20000524 	.word	0x20000524
 8003e90:	20000520 	.word	0x20000520

08003e94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e94:	b480      	push	{r7}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8003f44 <vTaskSwitchContext+0xb0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ea2:	4b29      	ldr	r3, [pc, #164]	@ (8003f48 <vTaskSwitchContext+0xb4>)
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ea8:	e045      	b.n	8003f36 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8003eaa:	4b27      	ldr	r3, [pc, #156]	@ (8003f48 <vTaskSwitchContext+0xb4>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eb0:	4b26      	ldr	r3, [pc, #152]	@ (8003f4c <vTaskSwitchContext+0xb8>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	fab3 f383 	clz	r3, r3
 8003ebc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003ebe:	7afb      	ldrb	r3, [r7, #11]
 8003ec0:	f1c3 031f 	rsb	r3, r3, #31
 8003ec4:	617b      	str	r3, [r7, #20]
 8003ec6:	4922      	ldr	r1, [pc, #136]	@ (8003f50 <vTaskSwitchContext+0xbc>)
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4413      	add	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	440b      	add	r3, r1
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10b      	bne.n	8003ef2 <vTaskSwitchContext+0x5e>
	__asm volatile
 8003eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ede:	f383 8811 	msr	BASEPRI, r3
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	607b      	str	r3, [r7, #4]
}
 8003eec:	bf00      	nop
 8003eee:	bf00      	nop
 8003ef0:	e7fd      	b.n	8003eee <vTaskSwitchContext+0x5a>
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4a14      	ldr	r2, [pc, #80]	@ (8003f50 <vTaskSwitchContext+0xbc>)
 8003efe:	4413      	add	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	605a      	str	r2, [r3, #4]
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	3308      	adds	r3, #8
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d104      	bne.n	8003f22 <vTaskSwitchContext+0x8e>
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	605a      	str	r2, [r3, #4]
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	4a0a      	ldr	r2, [pc, #40]	@ (8003f54 <vTaskSwitchContext+0xc0>)
 8003f2a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f2c:	4b09      	ldr	r3, [pc, #36]	@ (8003f54 <vTaskSwitchContext+0xc0>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	334c      	adds	r3, #76	@ 0x4c
 8003f32:	4a09      	ldr	r2, [pc, #36]	@ (8003f58 <vTaskSwitchContext+0xc4>)
 8003f34:	6013      	str	r3, [r2, #0]
}
 8003f36:	bf00      	nop
 8003f38:	371c      	adds	r7, #28
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	20000538 	.word	0x20000538
 8003f48:	20000524 	.word	0x20000524
 8003f4c:	20000518 	.word	0x20000518
 8003f50:	20000414 	.word	0x20000414
 8003f54:	20000410 	.word	0x20000410
 8003f58:	20000018 	.word	0x20000018

08003f5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f64:	f000 f852 	bl	800400c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f68:	4b06      	ldr	r3, [pc, #24]	@ (8003f84 <prvIdleTask+0x28>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d9f9      	bls.n	8003f64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f70:	4b05      	ldr	r3, [pc, #20]	@ (8003f88 <prvIdleTask+0x2c>)
 8003f72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f80:	e7f0      	b.n	8003f64 <prvIdleTask+0x8>
 8003f82:	bf00      	nop
 8003f84:	20000414 	.word	0x20000414
 8003f88:	e000ed04 	.word	0xe000ed04

08003f8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f92:	2300      	movs	r3, #0
 8003f94:	607b      	str	r3, [r7, #4]
 8003f96:	e00c      	b.n	8003fb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4a12      	ldr	r2, [pc, #72]	@ (8003fec <prvInitialiseTaskLists+0x60>)
 8003fa4:	4413      	add	r3, r2
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7ff fb0b 	bl	80035c2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	607b      	str	r3, [r7, #4]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b06      	cmp	r3, #6
 8003fb6:	d9ef      	bls.n	8003f98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003fb8:	480d      	ldr	r0, [pc, #52]	@ (8003ff0 <prvInitialiseTaskLists+0x64>)
 8003fba:	f7ff fb02 	bl	80035c2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003fbe:	480d      	ldr	r0, [pc, #52]	@ (8003ff4 <prvInitialiseTaskLists+0x68>)
 8003fc0:	f7ff faff 	bl	80035c2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003fc4:	480c      	ldr	r0, [pc, #48]	@ (8003ff8 <prvInitialiseTaskLists+0x6c>)
 8003fc6:	f7ff fafc 	bl	80035c2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003fca:	480c      	ldr	r0, [pc, #48]	@ (8003ffc <prvInitialiseTaskLists+0x70>)
 8003fcc:	f7ff faf9 	bl	80035c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003fd0:	480b      	ldr	r0, [pc, #44]	@ (8004000 <prvInitialiseTaskLists+0x74>)
 8003fd2:	f7ff faf6 	bl	80035c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8004004 <prvInitialiseTaskLists+0x78>)
 8003fd8:	4a05      	ldr	r2, [pc, #20]	@ (8003ff0 <prvInitialiseTaskLists+0x64>)
 8003fda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8004008 <prvInitialiseTaskLists+0x7c>)
 8003fde:	4a05      	ldr	r2, [pc, #20]	@ (8003ff4 <prvInitialiseTaskLists+0x68>)
 8003fe0:	601a      	str	r2, [r3, #0]
}
 8003fe2:	bf00      	nop
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	20000414 	.word	0x20000414
 8003ff0:	200004a0 	.word	0x200004a0
 8003ff4:	200004b4 	.word	0x200004b4
 8003ff8:	200004d0 	.word	0x200004d0
 8003ffc:	200004e4 	.word	0x200004e4
 8004000:	200004fc 	.word	0x200004fc
 8004004:	200004c8 	.word	0x200004c8
 8004008:	200004cc 	.word	0x200004cc

0800400c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004012:	e019      	b.n	8004048 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004014:	f000 fa18 	bl	8004448 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004018:	4b10      	ldr	r3, [pc, #64]	@ (800405c <prvCheckTasksWaitingTermination+0x50>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3304      	adds	r3, #4
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff fb56 	bl	80036d6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800402a:	4b0d      	ldr	r3, [pc, #52]	@ (8004060 <prvCheckTasksWaitingTermination+0x54>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	3b01      	subs	r3, #1
 8004030:	4a0b      	ldr	r2, [pc, #44]	@ (8004060 <prvCheckTasksWaitingTermination+0x54>)
 8004032:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004034:	4b0b      	ldr	r3, [pc, #44]	@ (8004064 <prvCheckTasksWaitingTermination+0x58>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3b01      	subs	r3, #1
 800403a:	4a0a      	ldr	r2, [pc, #40]	@ (8004064 <prvCheckTasksWaitingTermination+0x58>)
 800403c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800403e:	f000 fa35 	bl	80044ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f810 	bl	8004068 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004048:	4b06      	ldr	r3, [pc, #24]	@ (8004064 <prvCheckTasksWaitingTermination+0x58>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1e1      	bne.n	8004014 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004050:	bf00      	nop
 8004052:	bf00      	nop
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	200004e4 	.word	0x200004e4
 8004060:	20000510 	.word	0x20000510
 8004064:	200004f8 	.word	0x200004f8

08004068 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	334c      	adds	r3, #76	@ 0x4c
 8004074:	4618      	mov	r0, r3
 8004076:	f000 fcbd 	bl	80049f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004080:	2b00      	cmp	r3, #0
 8004082:	d108      	bne.n	8004096 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004088:	4618      	mov	r0, r3
 800408a:	f000 fb8b 	bl	80047a4 <vPortFree>
				vPortFree( pxTCB );
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fb88 	bl	80047a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004094:	e019      	b.n	80040ca <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800409c:	2b01      	cmp	r3, #1
 800409e:	d103      	bne.n	80040a8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 fb7f 	bl	80047a4 <vPortFree>
	}
 80040a6:	e010      	b.n	80040ca <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d00b      	beq.n	80040ca <prvDeleteTCB+0x62>
	__asm volatile
 80040b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	60fb      	str	r3, [r7, #12]
}
 80040c4:	bf00      	nop
 80040c6:	bf00      	nop
 80040c8:	e7fd      	b.n	80040c6 <prvDeleteTCB+0x5e>
	}
 80040ca:	bf00      	nop
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
	...

080040d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040da:	4b0c      	ldr	r3, [pc, #48]	@ (800410c <prvResetNextTaskUnblockTime+0x38>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d104      	bne.n	80040ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80040e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004110 <prvResetNextTaskUnblockTime+0x3c>)
 80040e6:	f04f 32ff 	mov.w	r2, #4294967295
 80040ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80040ec:	e008      	b.n	8004100 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040ee:	4b07      	ldr	r3, [pc, #28]	@ (800410c <prvResetNextTaskUnblockTime+0x38>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	4a04      	ldr	r2, [pc, #16]	@ (8004110 <prvResetNextTaskUnblockTime+0x3c>)
 80040fe:	6013      	str	r3, [r2, #0]
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	200004c8 	.word	0x200004c8
 8004110:	20000530 	.word	0x20000530

08004114 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800411e:	4b29      	ldr	r3, [pc, #164]	@ (80041c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004124:	4b28      	ldr	r3, [pc, #160]	@ (80041c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	3304      	adds	r3, #4
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff fad3 	bl	80036d6 <uxListRemove>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10b      	bne.n	800414e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004136:	4b24      	ldr	r3, [pc, #144]	@ (80041c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413c:	2201      	movs	r2, #1
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	43da      	mvns	r2, r3
 8004144:	4b21      	ldr	r3, [pc, #132]	@ (80041cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4013      	ands	r3, r2
 800414a:	4a20      	ldr	r2, [pc, #128]	@ (80041cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800414c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004154:	d10a      	bne.n	800416c <prvAddCurrentTaskToDelayedList+0x58>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d007      	beq.n	800416c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800415c:	4b1a      	ldr	r3, [pc, #104]	@ (80041c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3304      	adds	r3, #4
 8004162:	4619      	mov	r1, r3
 8004164:	481a      	ldr	r0, [pc, #104]	@ (80041d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004166:	f7ff fa59 	bl	800361c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800416a:	e026      	b.n	80041ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4413      	add	r3, r2
 8004172:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004174:	4b14      	ldr	r3, [pc, #80]	@ (80041c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	429a      	cmp	r2, r3
 8004182:	d209      	bcs.n	8004198 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004184:	4b13      	ldr	r3, [pc, #76]	@ (80041d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	4b0f      	ldr	r3, [pc, #60]	@ (80041c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3304      	adds	r3, #4
 800418e:	4619      	mov	r1, r3
 8004190:	4610      	mov	r0, r2
 8004192:	f7ff fa67 	bl	8003664 <vListInsert>
}
 8004196:	e010      	b.n	80041ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004198:	4b0f      	ldr	r3, [pc, #60]	@ (80041d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	4b0a      	ldr	r3, [pc, #40]	@ (80041c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3304      	adds	r3, #4
 80041a2:	4619      	mov	r1, r3
 80041a4:	4610      	mov	r0, r2
 80041a6:	f7ff fa5d 	bl	8003664 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80041aa:	4b0c      	ldr	r3, [pc, #48]	@ (80041dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d202      	bcs.n	80041ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80041b4:	4a09      	ldr	r2, [pc, #36]	@ (80041dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	6013      	str	r3, [r2, #0]
}
 80041ba:	bf00      	nop
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20000514 	.word	0x20000514
 80041c8:	20000410 	.word	0x20000410
 80041cc:	20000518 	.word	0x20000518
 80041d0:	200004fc 	.word	0x200004fc
 80041d4:	200004cc 	.word	0x200004cc
 80041d8:	200004c8 	.word	0x200004c8
 80041dc:	20000530 	.word	0x20000530

080041e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	3b04      	subs	r3, #4
 80041f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80041f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3b04      	subs	r3, #4
 80041fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	f023 0201 	bic.w	r2, r3, #1
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	3b04      	subs	r3, #4
 800420e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004210:	4a0c      	ldr	r2, [pc, #48]	@ (8004244 <pxPortInitialiseStack+0x64>)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	3b14      	subs	r3, #20
 800421a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	3b04      	subs	r3, #4
 8004226:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f06f 0202 	mvn.w	r2, #2
 800422e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	3b20      	subs	r3, #32
 8004234:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004236:	68fb      	ldr	r3, [r7, #12]
}
 8004238:	4618      	mov	r0, r3
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	08004249 	.word	0x08004249

08004248 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800424e:	2300      	movs	r3, #0
 8004250:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004252:	4b13      	ldr	r3, [pc, #76]	@ (80042a0 <prvTaskExitError+0x58>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425a:	d00b      	beq.n	8004274 <prvTaskExitError+0x2c>
	__asm volatile
 800425c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004260:	f383 8811 	msr	BASEPRI, r3
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	60fb      	str	r3, [r7, #12]
}
 800426e:	bf00      	nop
 8004270:	bf00      	nop
 8004272:	e7fd      	b.n	8004270 <prvTaskExitError+0x28>
	__asm volatile
 8004274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004278:	f383 8811 	msr	BASEPRI, r3
 800427c:	f3bf 8f6f 	isb	sy
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	60bb      	str	r3, [r7, #8]
}
 8004286:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004288:	bf00      	nop
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d0fc      	beq.n	800428a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004290:	bf00      	nop
 8004292:	bf00      	nop
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	20000014 	.word	0x20000014
	...

080042b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80042b0:	4b07      	ldr	r3, [pc, #28]	@ (80042d0 <pxCurrentTCBConst2>)
 80042b2:	6819      	ldr	r1, [r3, #0]
 80042b4:	6808      	ldr	r0, [r1, #0]
 80042b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ba:	f380 8809 	msr	PSP, r0
 80042be:	f3bf 8f6f 	isb	sy
 80042c2:	f04f 0000 	mov.w	r0, #0
 80042c6:	f380 8811 	msr	BASEPRI, r0
 80042ca:	4770      	bx	lr
 80042cc:	f3af 8000 	nop.w

080042d0 <pxCurrentTCBConst2>:
 80042d0:	20000410 	.word	0x20000410
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80042d4:	bf00      	nop
 80042d6:	bf00      	nop

080042d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80042d8:	4808      	ldr	r0, [pc, #32]	@ (80042fc <prvPortStartFirstTask+0x24>)
 80042da:	6800      	ldr	r0, [r0, #0]
 80042dc:	6800      	ldr	r0, [r0, #0]
 80042de:	f380 8808 	msr	MSP, r0
 80042e2:	f04f 0000 	mov.w	r0, #0
 80042e6:	f380 8814 	msr	CONTROL, r0
 80042ea:	b662      	cpsie	i
 80042ec:	b661      	cpsie	f
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	df00      	svc	0
 80042f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80042fa:	bf00      	nop
 80042fc:	e000ed08 	.word	0xe000ed08

08004300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004306:	4b47      	ldr	r3, [pc, #284]	@ (8004424 <xPortStartScheduler+0x124>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a47      	ldr	r2, [pc, #284]	@ (8004428 <xPortStartScheduler+0x128>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d10b      	bne.n	8004328 <xPortStartScheduler+0x28>
	__asm volatile
 8004310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	60fb      	str	r3, [r7, #12]
}
 8004322:	bf00      	nop
 8004324:	bf00      	nop
 8004326:	e7fd      	b.n	8004324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004328:	4b3e      	ldr	r3, [pc, #248]	@ (8004424 <xPortStartScheduler+0x124>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a3f      	ldr	r2, [pc, #252]	@ (800442c <xPortStartScheduler+0x12c>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d10b      	bne.n	800434a <xPortStartScheduler+0x4a>
	__asm volatile
 8004332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	613b      	str	r3, [r7, #16]
}
 8004344:	bf00      	nop
 8004346:	bf00      	nop
 8004348:	e7fd      	b.n	8004346 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800434a:	4b39      	ldr	r3, [pc, #228]	@ (8004430 <xPortStartScheduler+0x130>)
 800434c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	b2db      	uxtb	r3, r3
 8004354:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	22ff      	movs	r2, #255	@ 0xff
 800435a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	b2db      	uxtb	r3, r3
 8004362:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004364:	78fb      	ldrb	r3, [r7, #3]
 8004366:	b2db      	uxtb	r3, r3
 8004368:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800436c:	b2da      	uxtb	r2, r3
 800436e:	4b31      	ldr	r3, [pc, #196]	@ (8004434 <xPortStartScheduler+0x134>)
 8004370:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004372:	4b31      	ldr	r3, [pc, #196]	@ (8004438 <xPortStartScheduler+0x138>)
 8004374:	2207      	movs	r2, #7
 8004376:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004378:	e009      	b.n	800438e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800437a:	4b2f      	ldr	r3, [pc, #188]	@ (8004438 <xPortStartScheduler+0x138>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	3b01      	subs	r3, #1
 8004380:	4a2d      	ldr	r2, [pc, #180]	@ (8004438 <xPortStartScheduler+0x138>)
 8004382:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004384:	78fb      	ldrb	r3, [r7, #3]
 8004386:	b2db      	uxtb	r3, r3
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	b2db      	uxtb	r3, r3
 800438c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800438e:	78fb      	ldrb	r3, [r7, #3]
 8004390:	b2db      	uxtb	r3, r3
 8004392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004396:	2b80      	cmp	r3, #128	@ 0x80
 8004398:	d0ef      	beq.n	800437a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800439a:	4b27      	ldr	r3, [pc, #156]	@ (8004438 <xPortStartScheduler+0x138>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f1c3 0307 	rsb	r3, r3, #7
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d00b      	beq.n	80043be <xPortStartScheduler+0xbe>
	__asm volatile
 80043a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043aa:	f383 8811 	msr	BASEPRI, r3
 80043ae:	f3bf 8f6f 	isb	sy
 80043b2:	f3bf 8f4f 	dsb	sy
 80043b6:	60bb      	str	r3, [r7, #8]
}
 80043b8:	bf00      	nop
 80043ba:	bf00      	nop
 80043bc:	e7fd      	b.n	80043ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043be:	4b1e      	ldr	r3, [pc, #120]	@ (8004438 <xPortStartScheduler+0x138>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	021b      	lsls	r3, r3, #8
 80043c4:	4a1c      	ldr	r2, [pc, #112]	@ (8004438 <xPortStartScheduler+0x138>)
 80043c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004438 <xPortStartScheduler+0x138>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043d0:	4a19      	ldr	r2, [pc, #100]	@ (8004438 <xPortStartScheduler+0x138>)
 80043d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80043dc:	4b17      	ldr	r3, [pc, #92]	@ (800443c <xPortStartScheduler+0x13c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a16      	ldr	r2, [pc, #88]	@ (800443c <xPortStartScheduler+0x13c>)
 80043e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80043e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80043e8:	4b14      	ldr	r3, [pc, #80]	@ (800443c <xPortStartScheduler+0x13c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a13      	ldr	r2, [pc, #76]	@ (800443c <xPortStartScheduler+0x13c>)
 80043ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80043f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80043f4:	f000 f8da 	bl	80045ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80043f8:	4b11      	ldr	r3, [pc, #68]	@ (8004440 <xPortStartScheduler+0x140>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80043fe:	f000 f8f9 	bl	80045f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004402:	4b10      	ldr	r3, [pc, #64]	@ (8004444 <xPortStartScheduler+0x144>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a0f      	ldr	r2, [pc, #60]	@ (8004444 <xPortStartScheduler+0x144>)
 8004408:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800440c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800440e:	f7ff ff63 	bl	80042d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004412:	f7ff fd3f 	bl	8003e94 <vTaskSwitchContext>
	prvTaskExitError();
 8004416:	f7ff ff17 	bl	8004248 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3718      	adds	r7, #24
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	e000ed00 	.word	0xe000ed00
 8004428:	410fc271 	.word	0x410fc271
 800442c:	410fc270 	.word	0x410fc270
 8004430:	e000e400 	.word	0xe000e400
 8004434:	2000053c 	.word	0x2000053c
 8004438:	20000540 	.word	0x20000540
 800443c:	e000ed20 	.word	0xe000ed20
 8004440:	20000014 	.word	0x20000014
 8004444:	e000ef34 	.word	0xe000ef34

08004448 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
	__asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	607b      	str	r3, [r7, #4]
}
 8004460:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004462:	4b10      	ldr	r3, [pc, #64]	@ (80044a4 <vPortEnterCritical+0x5c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3301      	adds	r3, #1
 8004468:	4a0e      	ldr	r2, [pc, #56]	@ (80044a4 <vPortEnterCritical+0x5c>)
 800446a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800446c:	4b0d      	ldr	r3, [pc, #52]	@ (80044a4 <vPortEnterCritical+0x5c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d110      	bne.n	8004496 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004474:	4b0c      	ldr	r3, [pc, #48]	@ (80044a8 <vPortEnterCritical+0x60>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00b      	beq.n	8004496 <vPortEnterCritical+0x4e>
	__asm volatile
 800447e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	603b      	str	r3, [r7, #0]
}
 8004490:	bf00      	nop
 8004492:	bf00      	nop
 8004494:	e7fd      	b.n	8004492 <vPortEnterCritical+0x4a>
	}
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	20000014 	.word	0x20000014
 80044a8:	e000ed04 	.word	0xe000ed04

080044ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80044b2:	4b12      	ldr	r3, [pc, #72]	@ (80044fc <vPortExitCritical+0x50>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10b      	bne.n	80044d2 <vPortExitCritical+0x26>
	__asm volatile
 80044ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	607b      	str	r3, [r7, #4]
}
 80044cc:	bf00      	nop
 80044ce:	bf00      	nop
 80044d0:	e7fd      	b.n	80044ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80044d2:	4b0a      	ldr	r3, [pc, #40]	@ (80044fc <vPortExitCritical+0x50>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	4a08      	ldr	r2, [pc, #32]	@ (80044fc <vPortExitCritical+0x50>)
 80044da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80044dc:	4b07      	ldr	r3, [pc, #28]	@ (80044fc <vPortExitCritical+0x50>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d105      	bne.n	80044f0 <vPortExitCritical+0x44>
 80044e4:	2300      	movs	r3, #0
 80044e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80044ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	20000014 	.word	0x20000014

08004500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004500:	f3ef 8009 	mrs	r0, PSP
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	4b15      	ldr	r3, [pc, #84]	@ (8004560 <pxCurrentTCBConst>)
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	f01e 0f10 	tst.w	lr, #16
 8004510:	bf08      	it	eq
 8004512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800451a:	6010      	str	r0, [r2, #0]
 800451c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004520:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004524:	f380 8811 	msr	BASEPRI, r0
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f7ff fcb0 	bl	8003e94 <vTaskSwitchContext>
 8004534:	f04f 0000 	mov.w	r0, #0
 8004538:	f380 8811 	msr	BASEPRI, r0
 800453c:	bc09      	pop	{r0, r3}
 800453e:	6819      	ldr	r1, [r3, #0]
 8004540:	6808      	ldr	r0, [r1, #0]
 8004542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004546:	f01e 0f10 	tst.w	lr, #16
 800454a:	bf08      	it	eq
 800454c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004550:	f380 8809 	msr	PSP, r0
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	f3af 8000 	nop.w

08004560 <pxCurrentTCBConst>:
 8004560:	20000410 	.word	0x20000410
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004564:	bf00      	nop
 8004566:	bf00      	nop

08004568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
	__asm volatile
 800456e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	607b      	str	r3, [r7, #4]
}
 8004580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004582:	f7ff fbcd 	bl	8003d20 <xTaskIncrementTick>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800458c:	4b06      	ldr	r3, [pc, #24]	@ (80045a8 <SysTick_Handler+0x40>)
 800458e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	2300      	movs	r3, #0
 8004596:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	f383 8811 	msr	BASEPRI, r3
}
 800459e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80045a0:	bf00      	nop
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	e000ed04 	.word	0xe000ed04

080045ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80045b0:	4b0b      	ldr	r3, [pc, #44]	@ (80045e0 <vPortSetupTimerInterrupt+0x34>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80045b6:	4b0b      	ldr	r3, [pc, #44]	@ (80045e4 <vPortSetupTimerInterrupt+0x38>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80045bc:	4b0a      	ldr	r3, [pc, #40]	@ (80045e8 <vPortSetupTimerInterrupt+0x3c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a0a      	ldr	r2, [pc, #40]	@ (80045ec <vPortSetupTimerInterrupt+0x40>)
 80045c2:	fba2 2303 	umull	r2, r3, r2, r3
 80045c6:	099b      	lsrs	r3, r3, #6
 80045c8:	4a09      	ldr	r2, [pc, #36]	@ (80045f0 <vPortSetupTimerInterrupt+0x44>)
 80045ca:	3b01      	subs	r3, #1
 80045cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80045ce:	4b04      	ldr	r3, [pc, #16]	@ (80045e0 <vPortSetupTimerInterrupt+0x34>)
 80045d0:	2207      	movs	r2, #7
 80045d2:	601a      	str	r2, [r3, #0]
}
 80045d4:	bf00      	nop
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	e000e010 	.word	0xe000e010
 80045e4:	e000e018 	.word	0xe000e018
 80045e8:	20000008 	.word	0x20000008
 80045ec:	10624dd3 	.word	0x10624dd3
 80045f0:	e000e014 	.word	0xe000e014

080045f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80045f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004604 <vPortEnableVFP+0x10>
 80045f8:	6801      	ldr	r1, [r0, #0]
 80045fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80045fe:	6001      	str	r1, [r0, #0]
 8004600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004602:	bf00      	nop
 8004604:	e000ed88 	.word	0xe000ed88

08004608 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08a      	sub	sp, #40	@ 0x28
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004610:	2300      	movs	r3, #0
 8004612:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004614:	f7ff fad8 	bl	8003bc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004618:	4b5c      	ldr	r3, [pc, #368]	@ (800478c <pvPortMalloc+0x184>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004620:	f000 f924 	bl	800486c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004624:	4b5a      	ldr	r3, [pc, #360]	@ (8004790 <pvPortMalloc+0x188>)
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4013      	ands	r3, r2
 800462c:	2b00      	cmp	r3, #0
 800462e:	f040 8095 	bne.w	800475c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d01e      	beq.n	8004676 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004638:	2208      	movs	r2, #8
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4413      	add	r3, r2
 800463e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	2b00      	cmp	r3, #0
 8004648:	d015      	beq.n	8004676 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f023 0307 	bic.w	r3, r3, #7
 8004650:	3308      	adds	r3, #8
 8004652:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00b      	beq.n	8004676 <pvPortMalloc+0x6e>
	__asm volatile
 800465e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	617b      	str	r3, [r7, #20]
}
 8004670:	bf00      	nop
 8004672:	bf00      	nop
 8004674:	e7fd      	b.n	8004672 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d06f      	beq.n	800475c <pvPortMalloc+0x154>
 800467c:	4b45      	ldr	r3, [pc, #276]	@ (8004794 <pvPortMalloc+0x18c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	429a      	cmp	r2, r3
 8004684:	d86a      	bhi.n	800475c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004686:	4b44      	ldr	r3, [pc, #272]	@ (8004798 <pvPortMalloc+0x190>)
 8004688:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800468a:	4b43      	ldr	r3, [pc, #268]	@ (8004798 <pvPortMalloc+0x190>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004690:	e004      	b.n	800469c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004694:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800469c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d903      	bls.n	80046ae <pvPortMalloc+0xa6>
 80046a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1f1      	bne.n	8004692 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80046ae:	4b37      	ldr	r3, [pc, #220]	@ (800478c <pvPortMalloc+0x184>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d051      	beq.n	800475c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2208      	movs	r2, #8
 80046be:	4413      	add	r3, r2
 80046c0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	1ad2      	subs	r2, r2, r3
 80046d2:	2308      	movs	r3, #8
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d920      	bls.n	800471c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4413      	add	r3, r2
 80046e0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00b      	beq.n	8004704 <pvPortMalloc+0xfc>
	__asm volatile
 80046ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f0:	f383 8811 	msr	BASEPRI, r3
 80046f4:	f3bf 8f6f 	isb	sy
 80046f8:	f3bf 8f4f 	dsb	sy
 80046fc:	613b      	str	r3, [r7, #16]
}
 80046fe:	bf00      	nop
 8004700:	bf00      	nop
 8004702:	e7fd      	b.n	8004700 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	1ad2      	subs	r2, r2, r3
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004716:	69b8      	ldr	r0, [r7, #24]
 8004718:	f000 f90a 	bl	8004930 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800471c:	4b1d      	ldr	r3, [pc, #116]	@ (8004794 <pvPortMalloc+0x18c>)
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	4a1b      	ldr	r2, [pc, #108]	@ (8004794 <pvPortMalloc+0x18c>)
 8004728:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800472a:	4b1a      	ldr	r3, [pc, #104]	@ (8004794 <pvPortMalloc+0x18c>)
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	4b1b      	ldr	r3, [pc, #108]	@ (800479c <pvPortMalloc+0x194>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	429a      	cmp	r2, r3
 8004734:	d203      	bcs.n	800473e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004736:	4b17      	ldr	r3, [pc, #92]	@ (8004794 <pvPortMalloc+0x18c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a18      	ldr	r2, [pc, #96]	@ (800479c <pvPortMalloc+0x194>)
 800473c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800473e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004740:	685a      	ldr	r2, [r3, #4]
 8004742:	4b13      	ldr	r3, [pc, #76]	@ (8004790 <pvPortMalloc+0x188>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	431a      	orrs	r2, r3
 8004748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800474c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474e:	2200      	movs	r2, #0
 8004750:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004752:	4b13      	ldr	r3, [pc, #76]	@ (80047a0 <pvPortMalloc+0x198>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	3301      	adds	r3, #1
 8004758:	4a11      	ldr	r2, [pc, #68]	@ (80047a0 <pvPortMalloc+0x198>)
 800475a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800475c:	f7ff fa42 	bl	8003be4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00b      	beq.n	8004782 <pvPortMalloc+0x17a>
	__asm volatile
 800476a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800476e:	f383 8811 	msr	BASEPRI, r3
 8004772:	f3bf 8f6f 	isb	sy
 8004776:	f3bf 8f4f 	dsb	sy
 800477a:	60fb      	str	r3, [r7, #12]
}
 800477c:	bf00      	nop
 800477e:	bf00      	nop
 8004780:	e7fd      	b.n	800477e <pvPortMalloc+0x176>
	return pvReturn;
 8004782:	69fb      	ldr	r3, [r7, #28]
}
 8004784:	4618      	mov	r0, r3
 8004786:	3728      	adds	r7, #40	@ 0x28
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	2000414c 	.word	0x2000414c
 8004790:	20004160 	.word	0x20004160
 8004794:	20004150 	.word	0x20004150
 8004798:	20004144 	.word	0x20004144
 800479c:	20004154 	.word	0x20004154
 80047a0:	20004158 	.word	0x20004158

080047a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d04f      	beq.n	8004856 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80047b6:	2308      	movs	r3, #8
 80047b8:	425b      	negs	r3, r3
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	4413      	add	r3, r2
 80047be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	4b25      	ldr	r3, [pc, #148]	@ (8004860 <vPortFree+0xbc>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4013      	ands	r3, r2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10b      	bne.n	80047ea <vPortFree+0x46>
	__asm volatile
 80047d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d6:	f383 8811 	msr	BASEPRI, r3
 80047da:	f3bf 8f6f 	isb	sy
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	60fb      	str	r3, [r7, #12]
}
 80047e4:	bf00      	nop
 80047e6:	bf00      	nop
 80047e8:	e7fd      	b.n	80047e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00b      	beq.n	800480a <vPortFree+0x66>
	__asm volatile
 80047f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f6:	f383 8811 	msr	BASEPRI, r3
 80047fa:	f3bf 8f6f 	isb	sy
 80047fe:	f3bf 8f4f 	dsb	sy
 8004802:	60bb      	str	r3, [r7, #8]
}
 8004804:	bf00      	nop
 8004806:	bf00      	nop
 8004808:	e7fd      	b.n	8004806 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	4b14      	ldr	r3, [pc, #80]	@ (8004860 <vPortFree+0xbc>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4013      	ands	r3, r2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d01e      	beq.n	8004856 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d11a      	bne.n	8004856 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	4b0e      	ldr	r3, [pc, #56]	@ (8004860 <vPortFree+0xbc>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	43db      	mvns	r3, r3
 800482a:	401a      	ands	r2, r3
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004830:	f7ff f9ca 	bl	8003bc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	4b0a      	ldr	r3, [pc, #40]	@ (8004864 <vPortFree+0xc0>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4413      	add	r3, r2
 800483e:	4a09      	ldr	r2, [pc, #36]	@ (8004864 <vPortFree+0xc0>)
 8004840:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004842:	6938      	ldr	r0, [r7, #16]
 8004844:	f000 f874 	bl	8004930 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004848:	4b07      	ldr	r3, [pc, #28]	@ (8004868 <vPortFree+0xc4>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3301      	adds	r3, #1
 800484e:	4a06      	ldr	r2, [pc, #24]	@ (8004868 <vPortFree+0xc4>)
 8004850:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004852:	f7ff f9c7 	bl	8003be4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004856:	bf00      	nop
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	20004160 	.word	0x20004160
 8004864:	20004150 	.word	0x20004150
 8004868:	2000415c 	.word	0x2000415c

0800486c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004872:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004876:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004878:	4b27      	ldr	r3, [pc, #156]	@ (8004918 <prvHeapInit+0xac>)
 800487a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00c      	beq.n	80048a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	3307      	adds	r3, #7
 800488a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f023 0307 	bic.w	r3, r3, #7
 8004892:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	4a1f      	ldr	r2, [pc, #124]	@ (8004918 <prvHeapInit+0xac>)
 800489c:	4413      	add	r3, r2
 800489e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80048a4:	4a1d      	ldr	r2, [pc, #116]	@ (800491c <prvHeapInit+0xb0>)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80048aa:	4b1c      	ldr	r3, [pc, #112]	@ (800491c <prvHeapInit+0xb0>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	4413      	add	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80048b8:	2208      	movs	r2, #8
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	1a9b      	subs	r3, r3, r2
 80048be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f023 0307 	bic.w	r3, r3, #7
 80048c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4a15      	ldr	r2, [pc, #84]	@ (8004920 <prvHeapInit+0xb4>)
 80048cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80048ce:	4b14      	ldr	r3, [pc, #80]	@ (8004920 <prvHeapInit+0xb4>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2200      	movs	r2, #0
 80048d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80048d6:	4b12      	ldr	r3, [pc, #72]	@ (8004920 <prvHeapInit+0xb4>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	1ad2      	subs	r2, r2, r3
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004920 <prvHeapInit+0xb4>)
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	4a0a      	ldr	r2, [pc, #40]	@ (8004924 <prvHeapInit+0xb8>)
 80048fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	4a09      	ldr	r2, [pc, #36]	@ (8004928 <prvHeapInit+0xbc>)
 8004902:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004904:	4b09      	ldr	r3, [pc, #36]	@ (800492c <prvHeapInit+0xc0>)
 8004906:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800490a:	601a      	str	r2, [r3, #0]
}
 800490c:	bf00      	nop
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	20000544 	.word	0x20000544
 800491c:	20004144 	.word	0x20004144
 8004920:	2000414c 	.word	0x2000414c
 8004924:	20004154 	.word	0x20004154
 8004928:	20004150 	.word	0x20004150
 800492c:	20004160 	.word	0x20004160

08004930 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004938:	4b28      	ldr	r3, [pc, #160]	@ (80049dc <prvInsertBlockIntoFreeList+0xac>)
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	e002      	b.n	8004944 <prvInsertBlockIntoFreeList+0x14>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	429a      	cmp	r2, r3
 800494c:	d8f7      	bhi.n	800493e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	4413      	add	r3, r2
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	429a      	cmp	r2, r3
 800495e:	d108      	bne.n	8004972 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	441a      	add	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	441a      	add	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	d118      	bne.n	80049b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	4b15      	ldr	r3, [pc, #84]	@ (80049e0 <prvInsertBlockIntoFreeList+0xb0>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d00d      	beq.n	80049ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	441a      	add	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	e008      	b.n	80049c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80049ae:	4b0c      	ldr	r3, [pc, #48]	@ (80049e0 <prvInsertBlockIntoFreeList+0xb0>)
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	e003      	b.n	80049c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d002      	beq.n	80049ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049ce:	bf00      	nop
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	20004144 	.word	0x20004144
 80049e0:	2000414c 	.word	0x2000414c

080049e4 <memset>:
 80049e4:	4402      	add	r2, r0
 80049e6:	4603      	mov	r3, r0
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d100      	bne.n	80049ee <memset+0xa>
 80049ec:	4770      	bx	lr
 80049ee:	f803 1b01 	strb.w	r1, [r3], #1
 80049f2:	e7f9      	b.n	80049e8 <memset+0x4>

080049f4 <_reclaim_reent>:
 80049f4:	4b2d      	ldr	r3, [pc, #180]	@ (8004aac <_reclaim_reent+0xb8>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4283      	cmp	r3, r0
 80049fa:	b570      	push	{r4, r5, r6, lr}
 80049fc:	4604      	mov	r4, r0
 80049fe:	d053      	beq.n	8004aa8 <_reclaim_reent+0xb4>
 8004a00:	69c3      	ldr	r3, [r0, #28]
 8004a02:	b31b      	cbz	r3, 8004a4c <_reclaim_reent+0x58>
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	b163      	cbz	r3, 8004a22 <_reclaim_reent+0x2e>
 8004a08:	2500      	movs	r5, #0
 8004a0a:	69e3      	ldr	r3, [r4, #28]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	5959      	ldr	r1, [r3, r5]
 8004a10:	b9b1      	cbnz	r1, 8004a40 <_reclaim_reent+0x4c>
 8004a12:	3504      	adds	r5, #4
 8004a14:	2d80      	cmp	r5, #128	@ 0x80
 8004a16:	d1f8      	bne.n	8004a0a <_reclaim_reent+0x16>
 8004a18:	69e3      	ldr	r3, [r4, #28]
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	68d9      	ldr	r1, [r3, #12]
 8004a1e:	f000 f86d 	bl	8004afc <_free_r>
 8004a22:	69e3      	ldr	r3, [r4, #28]
 8004a24:	6819      	ldr	r1, [r3, #0]
 8004a26:	b111      	cbz	r1, 8004a2e <_reclaim_reent+0x3a>
 8004a28:	4620      	mov	r0, r4
 8004a2a:	f000 f867 	bl	8004afc <_free_r>
 8004a2e:	69e3      	ldr	r3, [r4, #28]
 8004a30:	689d      	ldr	r5, [r3, #8]
 8004a32:	b15d      	cbz	r5, 8004a4c <_reclaim_reent+0x58>
 8004a34:	4629      	mov	r1, r5
 8004a36:	4620      	mov	r0, r4
 8004a38:	682d      	ldr	r5, [r5, #0]
 8004a3a:	f000 f85f 	bl	8004afc <_free_r>
 8004a3e:	e7f8      	b.n	8004a32 <_reclaim_reent+0x3e>
 8004a40:	680e      	ldr	r6, [r1, #0]
 8004a42:	4620      	mov	r0, r4
 8004a44:	f000 f85a 	bl	8004afc <_free_r>
 8004a48:	4631      	mov	r1, r6
 8004a4a:	e7e1      	b.n	8004a10 <_reclaim_reent+0x1c>
 8004a4c:	6961      	ldr	r1, [r4, #20]
 8004a4e:	b111      	cbz	r1, 8004a56 <_reclaim_reent+0x62>
 8004a50:	4620      	mov	r0, r4
 8004a52:	f000 f853 	bl	8004afc <_free_r>
 8004a56:	69e1      	ldr	r1, [r4, #28]
 8004a58:	b111      	cbz	r1, 8004a60 <_reclaim_reent+0x6c>
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	f000 f84e 	bl	8004afc <_free_r>
 8004a60:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004a62:	b111      	cbz	r1, 8004a6a <_reclaim_reent+0x76>
 8004a64:	4620      	mov	r0, r4
 8004a66:	f000 f849 	bl	8004afc <_free_r>
 8004a6a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a6c:	b111      	cbz	r1, 8004a74 <_reclaim_reent+0x80>
 8004a6e:	4620      	mov	r0, r4
 8004a70:	f000 f844 	bl	8004afc <_free_r>
 8004a74:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004a76:	b111      	cbz	r1, 8004a7e <_reclaim_reent+0x8a>
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f000 f83f 	bl	8004afc <_free_r>
 8004a7e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004a80:	b111      	cbz	r1, 8004a88 <_reclaim_reent+0x94>
 8004a82:	4620      	mov	r0, r4
 8004a84:	f000 f83a 	bl	8004afc <_free_r>
 8004a88:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004a8a:	b111      	cbz	r1, 8004a92 <_reclaim_reent+0x9e>
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	f000 f835 	bl	8004afc <_free_r>
 8004a92:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004a94:	b111      	cbz	r1, 8004a9c <_reclaim_reent+0xa8>
 8004a96:	4620      	mov	r0, r4
 8004a98:	f000 f830 	bl	8004afc <_free_r>
 8004a9c:	6a23      	ldr	r3, [r4, #32]
 8004a9e:	b11b      	cbz	r3, 8004aa8 <_reclaim_reent+0xb4>
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004aa6:	4718      	bx	r3
 8004aa8:	bd70      	pop	{r4, r5, r6, pc}
 8004aaa:	bf00      	nop
 8004aac:	20000018 	.word	0x20000018

08004ab0 <__libc_init_array>:
 8004ab0:	b570      	push	{r4, r5, r6, lr}
 8004ab2:	4d0d      	ldr	r5, [pc, #52]	@ (8004ae8 <__libc_init_array+0x38>)
 8004ab4:	4c0d      	ldr	r4, [pc, #52]	@ (8004aec <__libc_init_array+0x3c>)
 8004ab6:	1b64      	subs	r4, r4, r5
 8004ab8:	10a4      	asrs	r4, r4, #2
 8004aba:	2600      	movs	r6, #0
 8004abc:	42a6      	cmp	r6, r4
 8004abe:	d109      	bne.n	8004ad4 <__libc_init_array+0x24>
 8004ac0:	4d0b      	ldr	r5, [pc, #44]	@ (8004af0 <__libc_init_array+0x40>)
 8004ac2:	4c0c      	ldr	r4, [pc, #48]	@ (8004af4 <__libc_init_array+0x44>)
 8004ac4:	f000 f870 	bl	8004ba8 <_init>
 8004ac8:	1b64      	subs	r4, r4, r5
 8004aca:	10a4      	asrs	r4, r4, #2
 8004acc:	2600      	movs	r6, #0
 8004ace:	42a6      	cmp	r6, r4
 8004ad0:	d105      	bne.n	8004ade <__libc_init_array+0x2e>
 8004ad2:	bd70      	pop	{r4, r5, r6, pc}
 8004ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ad8:	4798      	blx	r3
 8004ada:	3601      	adds	r6, #1
 8004adc:	e7ee      	b.n	8004abc <__libc_init_array+0xc>
 8004ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ae2:	4798      	blx	r3
 8004ae4:	3601      	adds	r6, #1
 8004ae6:	e7f2      	b.n	8004ace <__libc_init_array+0x1e>
 8004ae8:	08004c60 	.word	0x08004c60
 8004aec:	08004c60 	.word	0x08004c60
 8004af0:	08004c60 	.word	0x08004c60
 8004af4:	08004c64 	.word	0x08004c64

08004af8 <__retarget_lock_acquire_recursive>:
 8004af8:	4770      	bx	lr

08004afa <__retarget_lock_release_recursive>:
 8004afa:	4770      	bx	lr

08004afc <_free_r>:
 8004afc:	b538      	push	{r3, r4, r5, lr}
 8004afe:	4605      	mov	r5, r0
 8004b00:	2900      	cmp	r1, #0
 8004b02:	d041      	beq.n	8004b88 <_free_r+0x8c>
 8004b04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b08:	1f0c      	subs	r4, r1, #4
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	bfb8      	it	lt
 8004b0e:	18e4      	addlt	r4, r4, r3
 8004b10:	f000 f83e 	bl	8004b90 <__malloc_lock>
 8004b14:	4a1d      	ldr	r2, [pc, #116]	@ (8004b8c <_free_r+0x90>)
 8004b16:	6813      	ldr	r3, [r2, #0]
 8004b18:	b933      	cbnz	r3, 8004b28 <_free_r+0x2c>
 8004b1a:	6063      	str	r3, [r4, #4]
 8004b1c:	6014      	str	r4, [r2, #0]
 8004b1e:	4628      	mov	r0, r5
 8004b20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b24:	f000 b83a 	b.w	8004b9c <__malloc_unlock>
 8004b28:	42a3      	cmp	r3, r4
 8004b2a:	d908      	bls.n	8004b3e <_free_r+0x42>
 8004b2c:	6820      	ldr	r0, [r4, #0]
 8004b2e:	1821      	adds	r1, r4, r0
 8004b30:	428b      	cmp	r3, r1
 8004b32:	bf01      	itttt	eq
 8004b34:	6819      	ldreq	r1, [r3, #0]
 8004b36:	685b      	ldreq	r3, [r3, #4]
 8004b38:	1809      	addeq	r1, r1, r0
 8004b3a:	6021      	streq	r1, [r4, #0]
 8004b3c:	e7ed      	b.n	8004b1a <_free_r+0x1e>
 8004b3e:	461a      	mov	r2, r3
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	b10b      	cbz	r3, 8004b48 <_free_r+0x4c>
 8004b44:	42a3      	cmp	r3, r4
 8004b46:	d9fa      	bls.n	8004b3e <_free_r+0x42>
 8004b48:	6811      	ldr	r1, [r2, #0]
 8004b4a:	1850      	adds	r0, r2, r1
 8004b4c:	42a0      	cmp	r0, r4
 8004b4e:	d10b      	bne.n	8004b68 <_free_r+0x6c>
 8004b50:	6820      	ldr	r0, [r4, #0]
 8004b52:	4401      	add	r1, r0
 8004b54:	1850      	adds	r0, r2, r1
 8004b56:	4283      	cmp	r3, r0
 8004b58:	6011      	str	r1, [r2, #0]
 8004b5a:	d1e0      	bne.n	8004b1e <_free_r+0x22>
 8004b5c:	6818      	ldr	r0, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	6053      	str	r3, [r2, #4]
 8004b62:	4408      	add	r0, r1
 8004b64:	6010      	str	r0, [r2, #0]
 8004b66:	e7da      	b.n	8004b1e <_free_r+0x22>
 8004b68:	d902      	bls.n	8004b70 <_free_r+0x74>
 8004b6a:	230c      	movs	r3, #12
 8004b6c:	602b      	str	r3, [r5, #0]
 8004b6e:	e7d6      	b.n	8004b1e <_free_r+0x22>
 8004b70:	6820      	ldr	r0, [r4, #0]
 8004b72:	1821      	adds	r1, r4, r0
 8004b74:	428b      	cmp	r3, r1
 8004b76:	bf04      	itt	eq
 8004b78:	6819      	ldreq	r1, [r3, #0]
 8004b7a:	685b      	ldreq	r3, [r3, #4]
 8004b7c:	6063      	str	r3, [r4, #4]
 8004b7e:	bf04      	itt	eq
 8004b80:	1809      	addeq	r1, r1, r0
 8004b82:	6021      	streq	r1, [r4, #0]
 8004b84:	6054      	str	r4, [r2, #4]
 8004b86:	e7ca      	b.n	8004b1e <_free_r+0x22>
 8004b88:	bd38      	pop	{r3, r4, r5, pc}
 8004b8a:	bf00      	nop
 8004b8c:	200042a0 	.word	0x200042a0

08004b90 <__malloc_lock>:
 8004b90:	4801      	ldr	r0, [pc, #4]	@ (8004b98 <__malloc_lock+0x8>)
 8004b92:	f7ff bfb1 	b.w	8004af8 <__retarget_lock_acquire_recursive>
 8004b96:	bf00      	nop
 8004b98:	2000429c 	.word	0x2000429c

08004b9c <__malloc_unlock>:
 8004b9c:	4801      	ldr	r0, [pc, #4]	@ (8004ba4 <__malloc_unlock+0x8>)
 8004b9e:	f7ff bfac 	b.w	8004afa <__retarget_lock_release_recursive>
 8004ba2:	bf00      	nop
 8004ba4:	2000429c 	.word	0x2000429c

08004ba8 <_init>:
 8004ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004baa:	bf00      	nop
 8004bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bae:	bc08      	pop	{r3}
 8004bb0:	469e      	mov	lr, r3
 8004bb2:	4770      	bx	lr

08004bb4 <_fini>:
 8004bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb6:	bf00      	nop
 8004bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bba:	bc08      	pop	{r3}
 8004bbc:	469e      	mov	lr, r3
 8004bbe:	4770      	bx	lr
